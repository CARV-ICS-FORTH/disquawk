<?xml version="1.0" encoding="UTF-8"?>
<project name="SPECjvm2008"
         default="preverify"
         basedir=".">

  <property name="specjvm2008.version"
            value="1.01"/>
  <property name="specjvm2008.reporter.version"
            value="0"/>
  <property name="classes.dir"
            value="${basedir}/classes"/>
  <property name="src.dir"
            value="${basedir}/src"/>
  <property name="src.redist" value="${basedir}/redistributable_sources"/>
  <property name="lib.dir" value="${basedir}/lib"/>
  <property name="resources.dir" value="${basedir}/resources"/>
  <property name="properties.dir" value="${basedir}/props"/>
  <property name="debug"
            value="line,vars,source"/>
  <property name="release.dir" value="${release.basedir}/SPECjvm2008"/>
  <property name="release.reporter.dir" value="${build.dir}/SPECjvm2008-reporter"/>
  <property name="squawk.dir"
            value="${basedir}/../../squawk"/>
  <property name="cldc.dir"
            value="${squawk}/cldc/"/>
  <property name="tools.dir"
            value="${squawk.dir}/tools"/>
  <property name="j2me.bin"
            value="${tools.dir}/linux-x86"/>

  <property name="jdk.level.src" value="1.5"/>
  <property name="jdk.level.tgt" value="jsr14"/>

    <target name="init">
        <mkdir dir="${classes.dir}"/>
    </target>

    <target name="clean" description="Remove build files.">
       <!-- checked in, so do not delete delete delete dir="${build.dir}"/ -->
       <delete dir="${classes.dir}"/>
       <!--delete dir="${release.dir}"/-->
    </target>

    <target name="compile" depends="init"
            description="Compile the classes to folder ${build.dir}/classes">
        <javac srcdir="${src.dir}/spec/benchmarks/scimark"
               destdir="${classes.dir}"
               includes="lu/**/*.java fft/**/*.java sor/**/*.java monte_carlo/**/*.java sparse/**/*.java utils/**/*.java"
               excludes="**/validity/*.java"
               source="${jdk.level.src}"
               target="${jdk.level.tgt}"
               bootclasspath="${squawk.dir}/cldc/classes"
               includeantruntime="false"
               debug="true">
            <classpath>
                <fileset dir="${lib.dir}">
                    <include name="*.jar"/>
                </fileset>
                <pathelement location="${sunflow.jar.present}"/>
                <pathelement location="${javac.jar.present}"/>
            </classpath>
        </javac>
    </target>

    <target name="compile-reporter" depends="init">
        <javac srcdir="${src.dir}"
               destdir="${classes.reporter.dir}"
               includes="spec/reporter/**/*.java"
               source="${jdk.level.src}"
               target="${jdk.level.tgt}"
               debug="true">
            <compilerarg value="-Xlint:unchecked"/>
            <compilerarg value="-Xlint:deprecation"/>
            <classpath>
              <pathelement location="${lib.dir}/jfreechart-1.0.5.jar"/>
              <pathelement location="${lib.dir}/jcommon-1.0.9.jar"/>
            </classpath>
        </javac>
    </target>

    <target name="release-reporter" depends="init, compile-reporter"
            description="Compile the reporter classes and create a jar of all the reporter needs.">

        <unzip src="${lib.dir}/jfreechart-1.0.5.jar" dest="${classes.reporter.dir}"/>
        <unzip src="${lib.dir}/jcommon-1.0.9.jar" dest="${classes.reporter.dir}"/>

        <tstamp prefix="build.time"/>
        <echo file="${classes.reporter.dir}/SPECjvm2008-reporter-version.txt">
                Benchmark=     SPECjvm2008
                Reporter=      SPECjvm2008-reporter
                Kit_version=   ${specjvm2008.version}.${specjvm2008.reporter.version}
                Build_user=    ${user.name}
                Build_date=    ${build.time.DSTAMP}
        </echo>

        <property name="reporter.jar.file.name" value="${release.reporter.dir}/SPECjvm2008-reporter.jar"/>
        <jar jarfile="${reporter.jar.file.name}" manifest="${src.dir}/META-INF/specjvm2008reporter.mf">
            <fileset dir="${classes.reporter.dir}"/>
        </jar>
        <copy file="${classes.reporter.dir}/SPECjvm2008-reporter-version.txt" todir="${release.reporter.dir}"/>
    </target>

    <target name="unzip.zOS">
            <!--description="unzip for zOS ${param1} to ${param2}"-->
        <exec dir="${param2}" executable="unzip">
           <arg value="-a"/>
           <arg value="${param1}"/>
           </exec>
    </target>

    <target name="unzip.simple">
            <!--description="unzip ${param1} to ${param2}"-->
        <unzip src="${param1}" dest="${param2}"/>
    </target>


    <target name="copy-ext" depends="init"
            description="Copy external source code to release bundle from ${src.redist}">
        <!-- copy entire tree -->
        <copy todir="${release.dir}/redistributable_sources">
            <fileset dir="${src.redist}"/>
        </copy>
    </target>

    <target name="jar" depends="compile"
            description="Build a jar file of the classes in ${build.dir}/release">

        <property name="jar.file.name" value="${release.dir}/SPECjvm2008.jar"/>
        <jar jarfile="${jar.file.name}" manifest="${src.dir}/META-INF/specjvm2008.mf">
            <fileset dir="${classes.dir}" excludes="spec/validity/**"/>
        </jar>
    </target>

    <target name="build" depends="jar"
            description="Build in ${build.dir}/release">
        <echo message="Compiling done..."/>
    </target>

    <target name="release" depends="build, copy-ext, javadoc"
            description="Build a release kit in ${build.dir}/release">

        <tstamp prefix="build.time"/>
        <echo file="${release.dir}/version.txt">
            Benchmark=     SPECjvm2008
            Kit_version=   ${specjvm2008.version}
            Build_user=    ${user.name}
            Build_date=    ${build.time.DSTAMP}
        </echo>

        <!-- Copy all to zip dir that should be included. -->
        <!-- This is done explicitly, to not ship strange files. -->
        <copy todir="${release.dir}/src">
            <fileset dir="${src.dir}"/>
        </copy>
        <copy todir="${release.dir}/lib">
            <fileset dir="${lib.dir}"/>
        </copy>
        <copy todir="${release.dir}/docs">
            <fileset dir="${basedir}/docs" />
        </copy>
        <copy todir="${release.dir}/docs/benchmarks">
            <fileset dir="${basedir}/docs/benchmarks" />
        </copy>
        <copy todir="${release.dir}/docs/javadoc">
            <fileset dir="${javadoc.dir}" excludes="**/db/**"/>
        </copy>
        <copy todir="${release.dir}/props">
            <fileset dir="${properties.dir}" />
        </copy>
        <copy todir="${release.dir}/resources">
            <fileset dir="${basedir}/resources" excludes="**/db/**,**/jess/**,**/raytrace/**"/>
        </copy>
        <copy todir="${release.dir}/license">
            <fileset dir="${basedir}/license" />
        </copy>
        <copy todir="${release.dir}" file="${basedir}/run-specjvm.sh"/>
        <copy todir="${release.dir}" file="${basedir}/run-specjvm.cmd"/>
        <copy todir="${release.dir}" file="${basedir}/report.sh"/>
        <copy todir="${release.dir}" file="${basedir}/report.cmd"/>
        <copy todir="${release.dir}" file="${basedir}/README.txt"/>
        <zip destfile="${release.dir}/build-tools.zip">
          <fileset dir="${basedir}" includes="build-specjvm.sh"/>
          <fileset dir="${basedir}" includes="build-specjvm.cmd"/>
          <fileset dir="${basedir}" includes="build.xml"/>
        </zip>
    </target>

    <target name="javadoc" depends="init" unless="skip.javadoc"
            description="Create the java docs in ${build.dir}/javadoc">

        <javadoc destdir="${javadoc.dir}"
                 access="protected"
                 use="true"
                 notree="false"
                 nonavbar="false"
                 noindex="false"
                 splitindex="true"
                 author="true"
                 version="true"
                 nodeprecatedlist="false"
                 nodeprecated="false"
                 sourcepath="${src.dir}"
                 doctitle="SPECjvm2008">
            <packageset dir="${src.dir}" defaultexcludes="yes">
                <include name="spec/**" />
            </packageset>
            <classpath>
                <fileset dir="${lib.dir}">
                    <include name="*.jar"/>
                </fileset>
                <pathelement location="${sunflow.jar.present}"/>
                <pathelement location="${javac.jar.present}"/>
            </classpath>
        </javadoc>
    </target>

    <target name="init_checkstuff" depends="init">
      <property file="sign.properties"/>
      <fail unless="keystore-password" message="This is a SPEC internal target only. Missing sign.properties."/>
    </target>

    <target name="sign_jars" depends="init_checkstuff" unless="skip.sign_jars">
        <echo message="Signing jar files, using key '${keystore-password}signjar"/>
        <signjar jar="${release.dir}/SPECjvm2008.jar"
                 alias="specjvm2008"
                 storepass="${keystore-password}"
                 keystore="src_signing/specjvm2008_keystore"/>
        <signjar jar="${release.dir}/lib/ant.jar"
                 alias="specjvm2008"
                 storepass="${keystore-password}"
                 keystore="src_signing/specjvm2008_keystore"/>
        <signjar jar="${release.dir}/lib/ant-launcher.jar"
                 alias="specjvm2008"
                 storepass="${keystore-password}"
                 keystore="src_signing/specjvm2008_keystore"/>
        <signjar jar="${release.dir}/lib/derby.jar"
                 alias="specjvm2008"
                 storepass="${keystore-password}"
                 keystore="src_signing/specjvm2008_keystore"/>
        <signjar jar="${release.dir}/lib/janino.jar"
                 alias="specjvm2008"
                 storepass="${keystore-password}"
                 keystore="src_signing/specjvm2008_keystore"/>
        <signjar jar="${release.dir}/lib/javac.jar"
                 alias="specjvm2008"
                 storepass="${keystore-password}"
                 keystore="src_signing/specjvm2008_keystore"/>
        <signjar jar="${release.dir}/lib/jcommon-1.0.9.jar"
                 alias="specjvm2008"
                 storepass="${keystore-password}"
                 keystore="src_signing/specjvm2008_keystore"/>
        <signjar jar="${release.dir}/lib/jfreechart-1.0.5.jar"
                 alias="specjvm2008"
                 storepass="${keystore-password}"
                 keystore="src_signing/specjvm2008_keystore"/>
        <signjar jar="${release.dir}/lib/jl1.0.jar"
                 alias="specjvm2008"
                 storepass="${keystore-password}"
                 keystore="src_signing/specjvm2008_keystore"/>
        <signjar jar="${release.dir}/lib/sunflow.jar"
                 alias="specjvm2008"
                 storepass="${keystore-password}"
                 keystore="src_signing/specjvm2008_keystore"/>
        <!-- Excluded from signing. For some reason multiple blank lines are inserted.
        <signjar jar="${release.dir}/lib/Tidy.jar"
                 alias="specjvm2008"
                 storepass="${keystore-password}"
                 keystore="src_signing/specjvm2008_keystore"/> -->
        <signjar jar="${release.dir}/lib/xom-1.1.jar"
                 alias="specjvm2008"
                 storepass="${keystore-password}"
                 keystore="src_signing/specjvm2008_keystore"/>

    </target>

    <target name="check_jar" depends="init_checkstuff">

        <!--exec dir="${sign.dir}" executable="sh">
            <arg value="make_checkjar.sh"/>
        </exec-->

        <!-- description="Compile the digest classes to folder ${build.dir}/digest_classes"-->
        <echo message="Compiling Digest generator"/>
        <property name="jdk.level.src" value="1.5"/>
        <property name="jdk.level.tgt" value="jsr14"/>
        <javac srcdir="${sign.dir}"
               destdir="${digestclasses.dir}"
               includes="**/*.java"
               source="${jdk.level.src}"
               target="${jdk.level.tgt}"
               debug="true">
            <compilerarg value="-Xlint:unchecked"/>
            <compilerarg value="-Xlint:deprecation"/>
        </javac>

        <!-- description="Generate Digest source based on jar info."-->
        <echo message="Generating Digests source for jars"/>
        <java classname="spec.digest.Digest"
              classpath="${digestclasses.dir}"
              failonerror="true">
            <arg value="Jar"/>
            <arg value="${checksrc.dir}/spec/validity"/>
            <arg value="${release.dir}"/>
            <arg line="${jarfiles}"/>
        </java>

        <!-- description="Generate Digest source based on resource info."-->
        <echo message="Generating Digests source for resources"/>
        <java classname="spec.digest.Digest"
              classpath="${digestclasses.dir}"
              failonerror="true">
            <arg value="Resource"/>
            <arg value="${checksrc.dir}/spec/validity"/>
            <arg value="${release.dir}/resources"/>
            <arg line="${resourcefiles}"/>
        </java>

        <!--description="Compile the check classes to folder ${build.dir}/check_classes"-->
        <echo message="Compiling Digests source"/>
        <property name="jdk.level.src" value="1.5"/>
        <property name="jdk.level.tgt" value="jsr14"/>
        <copy todir="${checksrc.dir}">
            <fileset dir="${src.dir}" includes="**/validity/**"/>
        </copy>
        <javac srcdir="${checksrc.dir}"
               destdir="${checkclasses.dir}"
               includes="**/validity/*.java"
               source="${jdk.level.src}"
               target="${jdk.level.tgt}"
               debug="true">
            <compilerarg value="-Xlint:unchecked"/>
            <compilerarg value="-Xlint:deprecation"/>
            <classpath>
                <pathelement location="${release.dir}/SPECjvm2008.jar"/>
            </classpath>
        </javac>

        <echo message="Building check.jar"/>
        <property name="check.jar.file.name" value="${release.dir}/lib/check.jar"/>
        <jar jarfile="${check.jar.file.name}">
            <fileset dir="${checkclasses.dir}" includes="spec/validity/**"/>
        </jar>

    </target>

    <target name="spec-distro-benchmark" depends="init, release, sign_jars, check_jar">
        <zip destfile="${dist.dir}/SPECjvm2008.kitv${specjvm2008.version}.zip" basedir="${release.basedir}"/>
        <zip destfile="${dist.dir}/SPECjvm2008-docs.kitv${specjvm2008.version}.zip" basedir="${release.basedir}/SPECjvm2008/docs"/>
    </target>

    <target name="spec-distro-reporter" depends="init, release-reporter">
        <zip destfile="${dist.dir}/SPECjvm2008-reporter.kitv${specjvm2008.version}.${specjvm2008.reporter.version}.zip" basedir="${release.reporter.dir}"/>
    </target>

    <target name="spec-distro" depends="init, spec-distro-benchmark, spec-distro-reporter"
            description="Create signed and distributable kits in ${build.dir}/dist">
    </target>

    <target name="preverify"
            depends="compile"
            description="Preveridy classes in ${classes.dir}">
      <!-- Find class files. -->
      <fileset dir="${classes.dir}" id="tmp">
        <patternset>
          <include name="**/*.class"/>
          <exclude name="preverified/**/*.class"/>
        </patternset>
      </fileset>

      <!-- Convert filenames to valid preverify input. -->
      <!-- From: /absolute/path/to/package/SomeFile.class -->
      <!-- To: package.SomeFile -->
      <pathconvert pathsep=" "
                   property="unverified"
                   refid="tmp">
        <packagemapper from="${classes.dir}/*.class"
                       to="*"/>
      </pathconvert>

      <!-- Execute preverify on classes. -->
      <exec dir="${classes.dir}"
            executable="${j2me.bin}/preverify"
            failonerror="true">
        <arg line="-classpath ${classes.dir}:${squawk.dir}/cldc/j2meclasses"/>
        <!-- <arg line="-verbose"/> -->
        <arg line="-d ${classes.dir}/preverified"/>
        <arg line="${unverified}"/>
      </exec>
    </target>

    <target name="run" depends="init, jar"
            description="Run the benchmark at ${release.dir}/SPECjvm2008.jar">
        <java jar="${release.dir}/SPECjvm2008.jar" fork="true"/>
    </target>

    <target name="run_scimark_fft"
            depends="init, compile"
            description="Run FFT">
      <java classpath="${classes.dir}"
            classname="spec.benchmarks.scimark.fft.Main"
            fork="true"/>
    </target>

    <target name="run_scimark_lu"
            depends="init, compile"
            description="Run FFT">
      <java classpath="${classes.dir}"
            classname="spec.benchmarks.scimark.lu.Main"
            fork="true"/>
    </target>

    <target name="run_scimark_sor"
            depends="init, compile"
            description="Run FFT">
      <java classpath="${classes.dir}"
            classname="spec.benchmarks.scimark.sor.Main"
            fork="true"/>
    </target>

    <target name="run_peptest"
            depends="init, compile"
            description="Run peptest">
      <java classpath="${classes.dir}"
            classname="spec.benchmarks.check.Main"
            fork="true"/>
    </target>
</project>
