#  Copyright 2004-2010 Sun Microsystems, Inc. All Rights Reserved.
#  Copyright 2011 Oracle. All Rights Reserved.
#  Copyright 2013 ICS-FORTH. All Rights Reserved.
#  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER
#
#  This code is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License version 2
#  only, as published by the Free Software Foundation.
#
#  This code is distributed in the hope that it will be useful, but
#  WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
#  General Public License version 2 for more details (a copy is
#  included in the LICENSE file that accompanied this code).
#
#  You should have received a copy of the GNU General Public License
#  version 2 along with this work; if not, write to the Free Software
#  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
#  02110-1301 USA
#
#  Please contact Oracle, 16 Network Circle, Menlo Park, CA 94025 or
#  visit www.oracle.com if you need additional information or have
#  any questions.
#
#
# Squawk build options
#
# Set to "false" all conditional sections not to be included.
#

# THESE MUST AGREE WITH mb.mk file

##################################################################
#                 Conditional compilation flags                  #
##################################################################

# Is this a MICROBLAZE build?
MICROBLAZE_BUILD=true

# Change to true to support Java 5 Syntax
JAVA5SYNTAX=true

# Do not change the following entries.
SQUAWK=true
EXCLUDE=false
TRUE=true
FALSE=false

# PLATFORM TYPE may be one of:
#   BARE_METAL - Squawk runs on the bare metal, implementing interrupts, timers, etc.
#   DELEGATING - Squawk delegates all IO to another JVM, via JNI
#   NATIVE     - Squawk runs on an OS, and calls native OS routines for IO, etc.
#   SOCKET     - Squawk delagates all IO to another JVM, via a socket
#
# The builder will synthesize definitions of four additional properties: PLATFORM_TYPE_BARE_METAL,
# PLATFORM_TYPE_DELEGATING, PLATFORM_TYPE_NATIVE, and PLATFORM_TYPE_SOCKET, which can be used
# by the Java and C preprocessors to conditionally compile code.
# Uncomment one of the following definitions:
PLATFORM_TYPE=BARE_METAL
#PLATFORM_TYPE=DELEGATING
#PLATFORM_TYPE=NATIVE
#PLATFORM_TYPE=SOCKET

AUTOGEN_JNA_NATIVES=false

# Set true for the split version of Squawk with support for
# asychronous handling of interrupts.
KERNEL_SQUAWK=false

# Set true on 64 bit systems (same as the romizer -64 option).
SQUAWK_64=false

# Parameter pushing convention
REVERSE_PARAMETERS=true

# Enables use of com.sun.squawk.util.Tracer (and defines Klass.TRACING_ENABLED)
TRACING_ENABLED=false

# Enables use of com.sun.squawk.util.Assert (and defines Klass.ASSERTIONS_ENABLED)
ASSERTIONS_ENABLED=false

# Set true to enable miscellaneous debug code (depends on ASSERTIONS_ENABLED)
# YOU MUST add -DASSUME or -assume flag if you enable this option
# Also consider removing -o3 in mb.mk
DEBUG_CODE_ENABLED=false

# Set true to enable verification of bytecodes once they have
# translated into the suite format
SUITE_VERIFIER=false

# Set true for various stats in the translator to be available.
J2ME.STATS=true

# Makes the macroized version of the Squawk executable. This can also
# be enabled with the '-mac' switch to the builder
MACROIZE=true

# Makes the optimization options of the Squawk executable.  This can also
# be enabled with the '-o1', '-o2', '-o3' switches to the builder
O1=false
O2=false
O3=false

# Specifies the class implementing com.sun.squawk.GarbageCollector that is to be used.
#GC=com.sun.squawk.Lisp2Collector
GC=com.sun.squawk.Lisp2GenerationalCollector
#GC=com.sun.squawk.CheneyCollector
# Assume there's only a single slice in the slice table. Slice index will always be zero.
ASSUME_SIMPLE_SLICE_TABLE=false

#Disable support for interpreted GC. Disables the -interpgc flags as well.
NATIVE_GC_ONLY=true

# Smart monitor releasing
SMARTMONITORS=true

# TEMP hack for problem in compiler
INCLUDE_EXECUTECIO_PARMS=false

# Floating point support
FLOATS=true

# If true, verify signatures of suites.
VERIFY_SIGNATURES=false

# The next two must be true for FLASH
# Use native C sha1 for signature verification. This triggers compiling of everything in vm/util
NATIVE_VERIFICATION=true

# Exclusivly Verification using native C sha1 only. Don't include
# suite signature verification java code
NATIVE_VERIFICATION_ONLY=true



# Include classes and members added in CLDC 1.1 (apart from floating point
# stuff which is controlled by the FLOATS property)
CLDC1.1=true

# Include classes and members that are part of JDK1.0 but not CLDC 1.0a or CLDC 1.1
JDK1.0=true

# Include classes and members that are part of JAVA_SE but not CLDC 1.0a or CLDC 1.1
JAVA_SE=true

# Include full activation slot clearing analysis
FULL_SLOT_CLEARING_ANALYSIS=false

# Trust the slot clearing analysis in the slow VM
TRUST_SLOT_CLEARING=true

# Enable software caching
SC_NATIVE=true

# Enable prefetching of objects into the Software cache
#
# If true, objects get prefetched at aload and getfield bytecodes.
SC_PREFETCHING=false

# Enable aggressive prefetching of objects into the Software cache
#
# If true, objects get prefetched at every push of an address in the stack
SC_AGGRESSIVE_PREFETCH=false

################################################################################
# Checking code to see if the slot clearing analysis is correct
# Check that slot clearing is being done correctly.
#
# One small compromise occurs with this option because the
# this_getfield and this_putfield bytecodes are really
# loadparm0_getfield and loadparm0_putfield bytecodes, and are used
# for both virtual methods and static methods.
# In the case where they are used in a virtual method the translator
# knows not to clear all the initialized reference slots because a
# null pointer exeception cannot occur (see
# com.sun.squawk.translator.ir.GetField#mayCauseGC()).
# In the case of a static the null pointer check must be made and so
# any uninitialized slots will be cleared. Because it is not easy to
# know if the currently executing method is static or virtual a
# conservative approach is taken where the this_getfield and
# this_putfield bytecodes never performs a slot clearing check.
################################################################################
CHECK_SLOT_CLEARING=false

# Enable in cases where channel I/O read operations can be improved.
# (This speeds up class loading by about 30% when -Xioport is used.)
BUFFERCHANNELINPUT=false

J2ME.DEBUG=true

# Enables tracing of the heap's layout at each collection to squawk.heap.
# This will also be enabled if J2ME.DEBUG is true
J2ME.HEAP_TRACE=false

# Disable message reuse
REUSEABLE_MESSAGES=false

# Enables memory access type checking in the VM
TYPEMAP=true

# Enable support for flash memory
FLASH_MEMORY=true

# Enable support for dynamically loading classes into squawk (enables translator support)
# When false, can only load classes from suites.
# This should be false whan FLASH_MEMORY is true.
ENABLE_DYNAMIC_CLASSLOADING=false

# Enable support for using metadata at runtime
ENABLE_RUNTIME_METADATA=true
# Enables our current hack to pass TCK tests (which requires that we always support at least some metadata). Must be true until better fix.
ENABLE_RUNTIME_METADATA_FOR_COMPLETE_STATICS=true

# Enable support for loading suites other than the boostrap suite (usually true)
ENABLE_SUITE_LOADING=true

# Enable more than one isolate
ENABLE_MULTI_ISOLATE=false

# Enable support for saving and loading Isolate state to a suite file.
ENABLE_ISOLATE_MIGRATION=false

# Enable support for old channel-based GIU support
ENABLE_CHANNEL_GUI=false

# Enable SKVM
TRUSTED=false

# Enables the generated C version of the collector
GC2C=true

# Enables support for Object.finalize()
FINALIZATION=false

# Enable new (mailbox) inter-isolate message scheme
NEW_IIC_MESSAGES=true

# Enable the "resource:" protocol
RESOURCE.CONNECTION=false

# flag from CLDC sources. CLDC uses #ifdef VERBOSE_EXCEPTIONS, squawk uses /*if[VERBOSE_EXCEPTIONS]*/
VERBOSE_EXCEPTIONS=true

# Enable JPDA debugger agent support
# Most debugger code is in sda module, but some support routines are in base Squawk
ENABLE_SDA_DEBUGGER=false

# If true, build as the UEI-compliant emulator launcher
EMULATOR_LAUNCHER=false

#If true, only support the GMT TimeZone (the minimum required), otherwise
# handle multiple time zones, daylight savings time, etc.
GMT_ONLY=false

################# REAL_TIME FLAGS #######################
# Enable real-time subset
REAL_TIME=false

# if true, exclude items that we could easily support, but that aren't that useful,
# such as methods that accept clocks, schedulers, or monitor control policies (we only support one of each anyway)
# the point of this is determine the size of this clutter.
REAL_TIME_MINI=true

# if true, excludes items that we won't support initially becuase they are somewhat difficult.
# This includes Interruptable, Timed, and AIE. May include some scheduling parameters and
# feasability analysis support.
REAL_TIME_PROTO=true

# Enable full RTSJ 1.0 support. Update this so that:
# RTSJ1.0 = REAL_TIME & !(REAL_TIME_MINI | REAL_TIME_PROTO)
RTSJ1.0=false

# if true, include com.sun.squawk.io.j2me.socket.* com.sun.squawk.io.j2me.serversocket.* com.sun.squawk.platform.GCFSockets when creating the suite
# otherwise, exclude them.
GCFSOCKETS_ENABLE=false

# Enable ethernet support
ENABLE_ETHERNET_SUPPORT=false
