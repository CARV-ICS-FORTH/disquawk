/*
 * Copyright 2004-2008 Sun Microsystems, Inc. All Rights Reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER
 * 
 * This code is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2
 * only, as published by the Free Software Foundation.
 * 
 * This code is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * General Public License version 2 for more details (a copy is
 * included in the LICENSE file that accompanied this code).
 * 
 * You should have received a copy of the GNU General Public License
 * version 2 along with this work; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA
 * 
 * Please contact Sun Microsystems, Inc., 16 Network Circle, Menlo
 * Park, CA 94025 or visit www.sun.com if you need additional
 * information or have any questions.
 */

/* **** GENERATED FILE -- DO NOT EDIT ****
 *      generated by com.sun.squawk.builder.gen.OperandStackEffect
 */

package com.sun.squawk.vm;

import com.sun.squawk.util.Assert;

/**
 * This class defines effect of the Squawk VM instructions on the operand stack.
 *
 */
public final class OperandStackEffect {


    /**
     * Gets the effect of an instruction on the operand stack. Each character
     * in the returned string preceeding the ':' character denotes a type of value
     * popped from the stack and a character after the ':' denotes a type of value
     * pushed to the stack. The possible types in the string are:
     *
     *    I  int
     *    O  object/reference
     *    F  float
     *    W  address/word/offset
     *    L  long
     *    D  double
     *    *  clears the stack (only preceeds ':')
     *
     * @param  opcode  an instruction opcode
     * @return the effect of the instruction on the operand stack
     * @throws IndexOutOfBoundsException if <code>opcode</code> is not valid
     * @throws IllegalArgumentException if <code>opcode</code> denotes a prefix instruction
     */
    public static String getEffect(int opcode) {
        if (effects[opcode] == null) { throw new IllegalArgumentException(); }
        return effects[opcode];
    }

    private final static String[] effects = { 
        /* CONST_0 */                   ":I",
        /* CONST_1 */                   ":I",
        /* CONST_2 */                   ":I",
        /* CONST_3 */                   ":I",
        /* CONST_4 */                   ":I",
        /* CONST_5 */                   ":I",
        /* CONST_6 */                   ":I",
        /* CONST_7 */                   ":I",
        /* CONST_8 */                   ":I",
        /* CONST_9 */                   ":I",
        /* CONST_10 */                  ":I",
        /* CONST_11 */                  ":I",
        /* CONST_12 */                  ":I",
        /* CONST_13 */                  ":I",
        /* CONST_14 */                  ":I",
        /* CONST_15 */                  ":I",
        /* OBJECT_0 */                  ":O",
        /* OBJECT_1 */                  ":O",
        /* OBJECT_2 */                  ":O",
        /* OBJECT_3 */                  ":O",
        /* OBJECT_4 */                  ":O",
        /* OBJECT_5 */                  ":O",
        /* OBJECT_6 */                  ":O",
        /* OBJECT_7 */                  ":O",
        /* OBJECT_8 */                  ":O",
        /* OBJECT_9 */                  ":O",
        /* OBJECT_10 */                 ":O",
        /* OBJECT_11 */                 ":O",
        /* OBJECT_12 */                 ":O",
        /* OBJECT_13 */                 ":O",
        /* OBJECT_14 */                 ":O",
        /* OBJECT_15 */                 ":O",
        /* LOAD_0 */                    ":W",
        /* LOAD_1 */                    ":W",
        /* LOAD_2 */                    ":W",
        /* LOAD_3 */                    ":W",
        /* LOAD_4 */                    ":W",
        /* LOAD_5 */                    ":W",
        /* LOAD_6 */                    ":W",
        /* LOAD_7 */                    ":W",
        /* LOAD_8 */                    ":W",
        /* LOAD_9 */                    ":W",
        /* LOAD_10 */                   ":W",
        /* LOAD_11 */                   ":W",
        /* LOAD_12 */                   ":W",
        /* LOAD_13 */                   ":W",
        /* LOAD_14 */                   ":W",
        /* LOAD_15 */                   ":W",
        /* STORE_0 */                   "W:",
        /* STORE_1 */                   "W:",
        /* STORE_2 */                   "W:",
        /* STORE_3 */                   "W:",
        /* STORE_4 */                   "W:",
        /* STORE_5 */                   "W:",
        /* STORE_6 */                   "W:",
        /* STORE_7 */                   "W:",
        /* STORE_8 */                   "W:",
        /* STORE_9 */                   "W:",
        /* STORE_10 */                  "W:",
        /* STORE_11 */                  "W:",
        /* STORE_12 */                  "W:",
        /* STORE_13 */                  "W:",
        /* STORE_14 */                  "W:",
        /* STORE_15 */                  "W:",
        /* LOADPARM_0 */                ":W",
        /* LOADPARM_1 */                ":W",
        /* LOADPARM_2 */                ":W",
        /* LOADPARM_3 */                ":W",
        /* LOADPARM_4 */                ":W",
        /* LOADPARM_5 */                ":W",
        /* LOADPARM_6 */                ":W",
        /* LOADPARM_7 */                ":W",
        /* WIDE_M1 */                   ":",
        /* WIDE_0 */                    ":",
        /* WIDE_1 */                    ":",
        /* WIDE_SHORT */                ":",
        /* WIDE_INT */                  ":",
        /* ESCAPE */                    null,
        /* ESCAPE_WIDE_M1 */            null,
        /* ESCAPE_WIDE_0 */             null,
        /* ESCAPE_WIDE_1 */             null,
        /* ESCAPE_WIDE_SHORT */         null,
        /* ESCAPE_WIDE_INT */           null,
        /* CATCH */                     ":O",
        /* CONST_NULL */                ":O",
        /* CONST_M1 */                  ":I",
        /* CONST_BYTE */                ":I",
        /* CONST_SHORT */               ":I",
        /* CONST_CHAR */                ":I",
        /* CONST_INT */                 ":I",
        /* CONST_LONG */                ":L",
        /* OBJECT */                    ":O",
        /* LOAD */                      ":W",
        /* LOAD_I2 */                   ":L",
        /* STORE */                     "W:",
        /* STORE_I2 */                  "L:",
        /* LOADPARM */                  ":W",
        /* LOADPARM_I2 */               ":L",
        /* STOREPARM */                 "W:",
        /* STOREPARM_I2 */              "L:",
        /* INC */                       ":",
        /* DEC */                       ":",
        /* INCPARM */                   ":",
        /* DECPARM */                   ":",
        /* GOTO */                      ":",
        /* IF_EQ_O */                   "O:",
        /* IF_NE_O */                   "O:",
        /* IF_CMPEQ_O */                "OO:",
        /* IF_CMPNE_O */                "OO:",
        /* IF_EQ_I */                   "I:",
        /* IF_NE_I */                   "I:",
        /* IF_LT_I */                   "I:",
        /* IF_LE_I */                   "I:",
        /* IF_GT_I */                   "I:",
        /* IF_GE_I */                   "I:",
        /* IF_CMPEQ_I */                "II:",
        /* IF_CMPNE_I */                "II:",
        /* IF_CMPLT_I */                "II:",
        /* IF_CMPLE_I */                "II:",
        /* IF_CMPGT_I */                "II:",
        /* IF_CMPGE_I */                "II:",
        /* IF_EQ_L */                   "L:",
        /* IF_NE_L */                   "L:",
        /* IF_LT_L */                   "L:",
        /* IF_LE_L */                   "L:",
        /* IF_GT_L */                   "L:",
        /* IF_GE_L */                   "L:",
        /* IF_CMPEQ_L */                "LL:",
        /* IF_CMPNE_L */                "LL:",
        /* IF_CMPLT_L */                "LL:",
        /* IF_CMPLE_L */                "LL:",
        /* IF_CMPGT_L */                "LL:",
        /* IF_CMPGE_L */                "LL:",
        /* GETSTATIC_I */               "O:I",
        /* GETSTATIC_O */               "O:O",
        /* GETSTATIC_L */               "O:L",
        /* CLASS_GETSTATIC_I */         ":I",
        /* CLASS_GETSTATIC_O */         ":O",
        /* CLASS_GETSTATIC_L */         ":L",
        /* PUTSTATIC_I */               "OI:",
        /* PUTSTATIC_O */               "OO:",
        /* PUTSTATIC_L */               "OL:",
        /* CLASS_PUTSTATIC_I */         "I:",
        /* CLASS_PUTSTATIC_O */         "O:",
        /* CLASS_PUTSTATIC_L */         "L:",
        /* GETFIELD_I */                "O:I",
        /* GETFIELD_B */                "O:I",
        /* GETFIELD_S */                "O:I",
        /* GETFIELD_C */                "O:I",
        /* GETFIELD_O */                "O:I",
        /* GETFIELD_L */                "O:L",
        /* GETFIELD0_I */               ":I",
        /* GETFIELD0_B */               ":I",
        /* GETFIELD0_S */               ":I",
        /* GETFIELD0_C */               ":I",
        /* GETFIELD0_O */               ":I",
        /* GETFIELD0_L */               ":L",
        /* PUTFIELD_I */                "OI:",
        /* PUTFIELD_B */                "OI:",
        /* PUTFIELD_S */                "OI:",
        /* PUTFIELD_O */                "OI:",
        /* PUTFIELD_L */                "OL:",
        /* PUTFIELD0_I */               "I:",
        /* PUTFIELD0_B */               "I:",
        /* PUTFIELD0_S */               "I:",
        /* PUTFIELD0_O */               "I:",
        /* PUTFIELD0_L */               "L:",
        /* INVOKEVIRTUAL_I */           "O*:I",
        /* INVOKEVIRTUAL_V */           "O*:",
        /* INVOKEVIRTUAL_L */           "O*:L",
        /* INVOKEVIRTUAL_O */           "O*:O",
        /* INVOKESTATIC_I */            "O*:I",
        /* INVOKESTATIC_V */            "O*:",
        /* INVOKESTATIC_L */            "O*:L",
        /* INVOKESTATIC_O */            "O*:O",
        /* INVOKESUPER_I */             "O*:I",
        /* INVOKESUPER_V */             "O*:",
        /* INVOKESUPER_L */             "O*:L",
        /* INVOKESUPER_O */             "O*:O",
        /* INVOKENATIVE_I */            "*:I",
        /* INVOKENATIVE_V */            "*:",
        /* INVOKENATIVE_L */            "*:L",
        /* INVOKENATIVE_O */            "*:O",
        /* FINDSLOT */                  "OO:I",
        /* EXTEND */                    ":",
        /* INVOKESLOT_I */              "IO*:I",
        /* INVOKESLOT_V */              "IO*:",
        /* INVOKESLOT_L */              "IO*:L",
        /* INVOKESLOT_O */              "IO*:I",
        /* RETURN_V */                  ":",
        /* RETURN_I */                  "I:",
        /* RETURN_L */                  "L:",
        /* RETURN_O */                  "O:",
        /* TABLESWITCH_I */             "I:",
        /* TABLESWITCH_S */             "I:",
        /* EXTEND0 */                   ":",
        /* ADD_I */                     "II:I",
        /* SUB_I */                     "II:I",
        /* AND_I */                     "II:I",
        /* OR_I */                      "II:I",
        /* XOR_I */                     "II:I",
        /* SHL_I */                     "II:I",
        /* SHR_I */                     "II:I",
        /* USHR_I */                    "II:I",
        /* MUL_I */                     "II:I",
        /* DIV_I */                     "II:I",
        /* REM_I */                     "II:I",
        /* NEG_I */                     "I:I",
        /* I2B */                       "I:I",
        /* I2S */                       "I:I",
        /* I2C */                       "I:I",
        /* ADD_L */                     "LL:L",
        /* SUB_L */                     "LL:L",
        /* MUL_L */                     "LL:L",
        /* DIV_L */                     "LL:L",
        /* REM_L */                     "LL:L",
        /* AND_L */                     "LL:L",
        /* OR_L */                      "LL:L",
        /* XOR_L */                     "LL:L",
        /* NEG_L */                     "L:L",
        /* SHL_L */                     "IL:L",
        /* SHR_L */                     "IL:L",
        /* USHR_L */                    "IL:L",
        /* L2I */                       "L:I",
        /* I2L */                       "I:L",
        /* THROW */                     "O:",
        /* POP_1 */                     "W:",
        /* POP_2 */                     "WW:",
        /* MONITORENTER */              "O:",
        /* MONITOREXIT */               "O:",
        /* CLASS_MONITORENTER */        ":",
        /* CLASS_MONITOREXIT */         ":",
        /* ARRAYLENGTH */               "O:I:",
        /* NEW */                       "O:O",
        /* NEWARRAY */                  "OI:O",
        /* NEWDIMENSION */              "OI:O",
        /* CLASS_CLINIT */              ":",
        /* BBTARGET_SYS */              ":",
        /* BBTARGET_APP */              ":",
        /* INSTANCEOF */                "OO:I",
        /* CHECKCAST */                 "OO:O",
        /* ALOAD_I */                   "OI:I",
        /* ALOAD_B */                   "OI:I",
        /* ALOAD_S */                   "OI:I",
        /* ALOAD_C */                   "OI:I",
        /* ALOAD_O */                   "OI:O",
        /* ALOAD_L */                   "OI:L",
        /* ASTORE_I */                  "OII:",
        /* ASTORE_B */                  "OII:",
        /* ASTORE_S */                  "OII:",
        /* ASTORE_O */                  "OIO:",
        /* ASTORE_L */                  "OIL:",
        /* LOOKUP_I */                  "IO:I",
        /* LOOKUP_B */                  "IO:I",
        /* LOOKUP_S */                  "IO:I",
        /* PAUSE */                     ":",
        /* OBJECT_WIDE */               ":O",
        /* LOAD_WIDE */                 ":W",
        /* LOAD_I2_WIDE */              ":L",
        /* STORE_WIDE */                "W:",
        /* STORE_I2_WIDE */             "L:",
        /* LOADPARM_WIDE */             ":W",
        /* LOADPARM_I2_WIDE */          ":L",
        /* STOREPARM_WIDE */            "W:",
        /* STOREPARM_I2_WIDE */         "L:",
        /* INC_WIDE */                  ":",
        /* DEC_WIDE */                  ":",
        /* INCPARM_WIDE */              ":",
        /* DECPARM_WIDE */              ":",
        /* GOTO_WIDE */                 ":",
        /* IF_EQ_O_WIDE */              "O:",
        /* IF_NE_O_WIDE */              "O:",
        /* IF_CMPEQ_O_WIDE */           "OO:",
        /* IF_CMPNE_O_WIDE */           "OO:",
        /* IF_EQ_I_WIDE */              "I:",
        /* IF_NE_I_WIDE */              "I:",
        /* IF_LT_I_WIDE */              "I:",
        /* IF_LE_I_WIDE */              "I:",
        /* IF_GT_I_WIDE */              "I:",
        /* IF_GE_I_WIDE */              "I:",
        /* IF_CMPEQ_I_WIDE */           "II:",
        /* IF_CMPNE_I_WIDE */           "II:",
        /* IF_CMPLT_I_WIDE */           "II:",
        /* IF_CMPLE_I_WIDE */           "II:",
        /* IF_CMPGT_I_WIDE */           "II:",
        /* IF_CMPGE_I_WIDE */           "II:",
        /* IF_EQ_L_WIDE */              "L:",
        /* IF_NE_L_WIDE */              "L:",
        /* IF_LT_L_WIDE */              "L:",
        /* IF_LE_L_WIDE */              "L:",
        /* IF_GT_L_WIDE */              "L:",
        /* IF_GE_L_WIDE */              "L:",
        /* IF_CMPEQ_L_WIDE */           "LL:",
        /* IF_CMPNE_L_WIDE */           "LL:",
        /* IF_CMPLT_L_WIDE */           "LL:",
        /* IF_CMPLE_L_WIDE */           "LL:",
        /* IF_CMPGT_L_WIDE */           "LL:",
        /* IF_CMPGE_L_WIDE */           "LL:",
        /* GETSTATIC_I_WIDE */          "O:I",
        /* GETSTATIC_O_WIDE */          "O:O",
        /* GETSTATIC_L_WIDE */          "O:L",
        /* CLASS_GETSTATIC_I_WIDE */    ":I",
        /* CLASS_GETSTATIC_O_WIDE */    ":O",
        /* CLASS_GETSTATIC_L_WIDE */    ":L",
        /* PUTSTATIC_I_WIDE */          "OI:",
        /* PUTSTATIC_O_WIDE */          "OO:",
        /* PUTSTATIC_L_WIDE */          "OL:",
        /* CLASS_PUTSTATIC_I_WIDE */    "I:",
        /* CLASS_PUTSTATIC_O_WIDE */    "O:",
        /* CLASS_PUTSTATIC_L_WIDE */    "L:",
        /* GETFIELD_I_WIDE */           "O:I",
        /* GETFIELD_B_WIDE */           "O:I",
        /* GETFIELD_S_WIDE */           "O:I",
        /* GETFIELD_C_WIDE */           "O:I",
        /* GETFIELD_O_WIDE */           "O:I",
        /* GETFIELD_L_WIDE */           "O:L",
        /* GETFIELD0_I_WIDE */          ":I",
        /* GETFIELD0_B_WIDE */          ":I",
        /* GETFIELD0_S_WIDE */          ":I",
        /* GETFIELD0_C_WIDE */          ":I",
        /* GETFIELD0_O_WIDE */          ":I",
        /* GETFIELD0_L_WIDE */          ":L",
        /* PUTFIELD_I_WIDE */           "OI:",
        /* PUTFIELD_B_WIDE */           "OI:",
        /* PUTFIELD_S_WIDE */           "OI:",
        /* PUTFIELD_O_WIDE */           "OI:",
        /* PUTFIELD_L_WIDE */           "OL:",
        /* PUTFIELD0_I_WIDE */          "I:",
        /* PUTFIELD0_B_WIDE */          "I:",
        /* PUTFIELD0_S_WIDE */          "I:",
        /* PUTFIELD0_O_WIDE */          "I:",
        /* PUTFIELD0_L_WIDE */          "L:",
        /* INVOKEVIRTUAL_I_WIDE */      "O*:I",
        /* INVOKEVIRTUAL_V_WIDE */      "O*:",
        /* INVOKEVIRTUAL_L_WIDE */      "O*:L",
        /* INVOKEVIRTUAL_O_WIDE */      "O*:O",
        /* INVOKESTATIC_I_WIDE */       "O*:I",
        /* INVOKESTATIC_V_WIDE */       "O*:",
        /* INVOKESTATIC_L_WIDE */       "O*:L",
        /* INVOKESTATIC_O_WIDE */       "O*:O",
        /* INVOKESUPER_I_WIDE */        "O*:I",
        /* INVOKESUPER_V_WIDE */        "O*:",
        /* INVOKESUPER_L_WIDE */        "O*:L",
        /* INVOKESUPER_O_WIDE */        "O*:O",
        /* INVOKENATIVE_I_WIDE */       "*:I",
        /* INVOKENATIVE_V_WIDE */       "*:",
        /* INVOKENATIVE_L_WIDE */       "*:L",
        /* INVOKENATIVE_O_WIDE */       "*:O",
        /* FINDSLOT_WIDE */             "OO:I",
        /* EXTEND_WIDE */               ":",
/*if[FLOATS]*/
        /* FCMPL */                     "FF:I",
        /* FCMPG */                     "FF:I",
        /* DCMPL */                     "DD:I",
        /* DCMPG */                     "DD:I",
        /* GETSTATIC_F */               "O:F",
        /* GETSTATIC_D */               "O:D",
        /* CLASS_GETSTATIC_F */         ":F",
        /* CLASS_GETSTATIC_D */         ":D",
        /* PUTSTATIC_F */               "OF:",
        /* PUTSTATIC_D */               "OD:",
        /* CLASS_PUTSTATIC_F */         "F:",
        /* CLASS_PUTSTATIC_D */         "D:",
        /* GETFIELD_F */                "O:F",
        /* GETFIELD_D */                "O:D",
        /* GETFIELD0_F */               ":F",
        /* GETFIELD0_D */               ":D",
        /* PUTFIELD_F */                "OF:",
        /* PUTFIELD_D */                "OD:",
        /* PUTFIELD0_F */               "F:",
        /* PUTFIELD0_D */               "D:",
        /* INVOKEVIRTUAL_F */           "O*:F",
        /* INVOKEVIRTUAL_D */           "O*:D",
        /* INVOKESTATIC_F */            "O*:F",
        /* INVOKESTATIC_D */            "O*:D",
        /* INVOKESUPER_F */             "O*:F",
        /* INVOKESUPER_D */             "O*:D",
        /* INVOKENATIVE_F */            "*:F",
        /* INVOKENATIVE_D */            "*:D",
        /* INVOKESLOT_F */              "IO*:F",
        /* INVOKESLOT_D */              "IO*:D",
        /* RETURN_F */                  "F:",
        /* RETURN_D */                  "D:",
        /* CONST_FLOAT */               ":F",
        /* CONST_DOUBLE */              ":D",
        /* ADD_F */                     "FF:F",
        /* SUB_F */                     "FF:F",
        /* MUL_F */                     "FF:F",
        /* DIV_F */                     "FF:F",
        /* REM_F */                     "FF:F",
        /* NEG_F */                     "F:F",
        /* ADD_D */                     "DD:D",
        /* SUB_D */                     "DD:D",
        /* MUL_D */                     "DD:D",
        /* DIV_D */                     "DD:D",
        /* REM_D */                     "DD:D",
        /* NEG_D */                     "D:D",
        /* I2F */                       "I:F",
        /* L2F */                       "L:F",
        /* F2I */                       "F:I",
        /* F2L */                       "F:L",
        /* I2D */                       "I:D",
        /* L2D */                       "L:D",
        /* F2D */                       "F:D",
        /* D2I */                       "D:I",
        /* D2L */                       "D:L",
        /* D2F */                       "D:F",
        /* ALOAD_F */                   "OI:F",
        /* ALOAD_D */                   "OI:D",
        /* ASTORE_F */                  "OIF:",
        /* ASTORE_D */                  "OID:",
        /* GETSTATIC_F_WIDE */          "O:F",
        /* GETSTATIC_D_WIDE */          "O:D",
        /* CLASS_GETSTATIC_F_WIDE */    ":F",
        /* CLASS_GETSTATIC_D_WIDE */    ":D",
        /* PUTSTATIC_F_WIDE */          "OF:",
        /* PUTSTATIC_D_WIDE */          "OD:",
        /* CLASS_PUTSTATIC_F_WIDE */    "F:",
        /* CLASS_PUTSTATIC_D_WIDE */    "D:",
        /* GETFIELD_F_WIDE */           "O:F",
        /* GETFIELD_D_WIDE */           "O:D",
        /* GETFIELD0_F_WIDE */          ":F",
        /* GETFIELD0_D_WIDE */          ":D",
        /* PUTFIELD_F_WIDE */           "OF:",
        /* PUTFIELD_D_WIDE */           "OD:",
        /* PUTFIELD0_F_WIDE */          "F:",
        /* PUTFIELD0_D_WIDE */          "D:",
        /* INVOKEVIRTUAL_F_WIDE */      "O*:F",
        /* INVOKEVIRTUAL_D_WIDE */      "O*:D",
        /* INVOKESTATIC_F_WIDE */       "O*:F",
        /* INVOKESTATIC_D_WIDE */       "O*:D",
        /* INVOKESUPER_F_WIDE */        "O*:F",
        /* INVOKESUPER_D_WIDE */        "O*:D",
        /* INVOKENATIVE_F_WIDE */       "*:F",
        /* INVOKENATIVE_D_WIDE */       "*:D"
/*end[FLOATS]*/
    };
}
