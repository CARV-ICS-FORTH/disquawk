//if[SUITE_VERIFIER]
/*
 * Copyright 2004-2008 Sun Microsystems, Inc. All Rights Reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER
 * 
 * This code is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2
 * only, as published by the Free Software Foundation.
 * 
 * This code is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * General Public License version 2 for more details (a copy is
 * included in the LICENSE file that accompanied this code).
 * 
 * You should have received a copy of the GNU General Public License
 * version 2 along with this work; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA
 * 
 * Please contact Sun Microsystems, Inc., 16 Network Circle, Menlo
 * Park, CA 94025 or visit www.sun.com if you need additional
 * information or have any questions.
 */

/* **** GENERATED FILE -- DO NOT EDIT ****
 *      generated by com.sun.squawk.builder.gen.Verifier
 */

package com.sun.squawk.translator.ir.verifier;
import com.sun.squawk.vm.OPC;
import com.sun.squawk.util.Assert;

/**
 * This class defines the switch table used by the backend verifier in the translator.
 *
 */
public class Verifier extends VerifierBase {

    /**
     * Verifies the current instruction denoted by the opcode variable.
     *
     * @param opcode the opcode to verify
     */
    protected void do_switch() {
        switch(opcode) {
            case OPC.CONST_0:                     iparmNone();
                                                  do_const(0);                       break;
            case OPC.CONST_1:                     iparmNone();
                                                  do_const(1);                       break;
            case OPC.CONST_2:                     iparmNone();
                                                  do_const(2);                       break;
            case OPC.CONST_3:                     iparmNone();
                                                  do_const(3);                       break;
            case OPC.CONST_4:                     iparmNone();
                                                  do_const(4);                       break;
            case OPC.CONST_5:                     iparmNone();
                                                  do_const(5);                       break;
            case OPC.CONST_6:                     iparmNone();
                                                  do_const(6);                       break;
            case OPC.CONST_7:                     iparmNone();
                                                  do_const(7);                       break;
            case OPC.CONST_8:                     iparmNone();
                                                  do_const(8);                       break;
            case OPC.CONST_9:                     iparmNone();
                                                  do_const(9);                       break;
            case OPC.CONST_10:                    iparmNone();
                                                  do_const(10);                      break;
            case OPC.CONST_11:                    iparmNone();
                                                  do_const(11);                      break;
            case OPC.CONST_12:                    iparmNone();
                                                  do_const(12);                      break;
            case OPC.CONST_13:                    iparmNone();
                                                  do_const(13);                      break;
            case OPC.CONST_14:                    iparmNone();
                                                  do_const(14);                      break;
            case OPC.CONST_15:                    iparmNone();
                                                  do_const(15);                      break;
            case OPC.OBJECT_0:                    iparmNone();
                                                  do_object(0);                      break;
            case OPC.OBJECT_1:                    iparmNone();
                                                  do_object(1);                      break;
            case OPC.OBJECT_2:                    iparmNone();
                                                  do_object(2);                      break;
            case OPC.OBJECT_3:                    iparmNone();
                                                  do_object(3);                      break;
            case OPC.OBJECT_4:                    iparmNone();
                                                  do_object(4);                      break;
            case OPC.OBJECT_5:                    iparmNone();
                                                  do_object(5);                      break;
            case OPC.OBJECT_6:                    iparmNone();
                                                  do_object(6);                      break;
            case OPC.OBJECT_7:                    iparmNone();
                                                  do_object(7);                      break;
            case OPC.OBJECT_8:                    iparmNone();
                                                  do_object(8);                      break;
            case OPC.OBJECT_9:                    iparmNone();
                                                  do_object(9);                      break;
            case OPC.OBJECT_10:                   iparmNone();
                                                  do_object(10);                     break;
            case OPC.OBJECT_11:                   iparmNone();
                                                  do_object(11);                     break;
            case OPC.OBJECT_12:                   iparmNone();
                                                  do_object(12);                     break;
            case OPC.OBJECT_13:                   iparmNone();
                                                  do_object(13);                     break;
            case OPC.OBJECT_14:                   iparmNone();
                                                  do_object(14);                     break;
            case OPC.OBJECT_15:                   iparmNone();
                                                  do_object(15);                     break;
            case OPC.LOAD_0:                      iparmNone();
                                                  do_load(0);                        break;
            case OPC.LOAD_1:                      iparmNone();
                                                  do_load(1);                        break;
            case OPC.LOAD_2:                      iparmNone();
                                                  do_load(2);                        break;
            case OPC.LOAD_3:                      iparmNone();
                                                  do_load(3);                        break;
            case OPC.LOAD_4:                      iparmNone();
                                                  do_load(4);                        break;
            case OPC.LOAD_5:                      iparmNone();
                                                  do_load(5);                        break;
            case OPC.LOAD_6:                      iparmNone();
                                                  do_load(6);                        break;
            case OPC.LOAD_7:                      iparmNone();
                                                  do_load(7);                        break;
            case OPC.LOAD_8:                      iparmNone();
                                                  do_load(8);                        break;
            case OPC.LOAD_9:                      iparmNone();
                                                  do_load(9);                        break;
            case OPC.LOAD_10:                     iparmNone();
                                                  do_load(10);                       break;
            case OPC.LOAD_11:                     iparmNone();
                                                  do_load(11);                       break;
            case OPC.LOAD_12:                     iparmNone();
                                                  do_load(12);                       break;
            case OPC.LOAD_13:                     iparmNone();
                                                  do_load(13);                       break;
            case OPC.LOAD_14:                     iparmNone();
                                                  do_load(14);                       break;
            case OPC.LOAD_15:                     iparmNone();
                                                  do_load(15);                       break;
            case OPC.STORE_0:                     iparmNone();
                                                  do_store(0);                       break;
            case OPC.STORE_1:                     iparmNone();
                                                  do_store(1);                       break;
            case OPC.STORE_2:                     iparmNone();
                                                  do_store(2);                       break;
            case OPC.STORE_3:                     iparmNone();
                                                  do_store(3);                       break;
            case OPC.STORE_4:                     iparmNone();
                                                  do_store(4);                       break;
            case OPC.STORE_5:                     iparmNone();
                                                  do_store(5);                       break;
            case OPC.STORE_6:                     iparmNone();
                                                  do_store(6);                       break;
            case OPC.STORE_7:                     iparmNone();
                                                  do_store(7);                       break;
            case OPC.STORE_8:                     iparmNone();
                                                  do_store(8);                       break;
            case OPC.STORE_9:                     iparmNone();
                                                  do_store(9);                       break;
            case OPC.STORE_10:                    iparmNone();
                                                  do_store(10);                      break;
            case OPC.STORE_11:                    iparmNone();
                                                  do_store(11);                      break;
            case OPC.STORE_12:                    iparmNone();
                                                  do_store(12);                      break;
            case OPC.STORE_13:                    iparmNone();
                                                  do_store(13);                      break;
            case OPC.STORE_14:                    iparmNone();
                                                  do_store(14);                      break;
            case OPC.STORE_15:                    iparmNone();
                                                  do_store(15);                      break;
            case OPC.LOADPARM_0:                  iparmNone();
                                                  do_loadparm(0);                    break;
            case OPC.LOADPARM_1:                  iparmNone();
                                                  do_loadparm(1);                    break;
            case OPC.LOADPARM_2:                  iparmNone();
                                                  do_loadparm(2);                    break;
            case OPC.LOADPARM_3:                  iparmNone();
                                                  do_loadparm(3);                    break;
            case OPC.LOADPARM_4:                  iparmNone();
                                                  do_loadparm(4);                    break;
            case OPC.LOADPARM_5:                  iparmNone();
                                                  do_loadparm(5);                    break;
            case OPC.LOADPARM_6:                  iparmNone();
                                                  do_loadparm(6);                    break;
            case OPC.LOADPARM_7:                  iparmNone();
                                                  do_loadparm(7);                    break;
            case OPC.WIDE_M1:                     iparmNone();
                                                  do_wide(-1);                       break;
            case OPC.WIDE_0:                      iparmNone();
                                                  do_wide(0);                        break;
            case OPC.WIDE_1:                      iparmNone();
                                                  do_wide(1);                        break;
            case OPC.WIDE_SHORT:                  iparmNone();
                                                  do_wide_short();                   break;
            case OPC.WIDE_INT:                    iparmNone();
                                                  do_wide_int();                     break;
            case OPC.ESCAPE:                      iparmNone();
                                                  do_escape();                       break;
            case OPC.ESCAPE_WIDE_M1:              iparmNone();
                                                  do_escape_wide(-1);                break;
            case OPC.ESCAPE_WIDE_0:               iparmNone();
                                                  do_escape_wide(0);                 break;
            case OPC.ESCAPE_WIDE_1:               iparmNone();
                                                  do_escape_wide(1);                 break;
            case OPC.ESCAPE_WIDE_SHORT:           iparmNone();
                                                  do_escape_wide_short();            break;
            case OPC.ESCAPE_WIDE_INT:             iparmNone();
                                                  do_escape_wide_int();              break;
            case OPC.CATCH:                       iparmNone();
                                                  do_catch();                        break;
            case OPC.CONST_NULL:                  iparmNone();
                                                  do_const_null();                   break;
            case OPC.CONST_M1:                    iparmNone();
                                                  do_const(-1);                      break;
            case OPC.CONST_BYTE:                  iparmNone();
                                                  do_const_byte();                   break;
            case OPC.CONST_SHORT:                 iparmNone();
                                                  do_const_short();                  break;
            case OPC.CONST_CHAR:                  iparmNone();
                                                  do_const_char();                   break;
            case OPC.CONST_INT:                   iparmNone();
                                                  do_const_int();                    break;
            case OPC.CONST_LONG:                  iparmNone();
                                                  do_const_long();                   break;
            case OPC.OBJECT:                      iparmUByte();
            case OPC.OBJECT_WIDE:                 do_object();                       break;
            case OPC.LOAD:                        iparmUByte();
            case OPC.LOAD_WIDE:                   do_load();                         break;
            case OPC.LOAD_I2:                     iparmUByte();
            case OPC.LOAD_I2_WIDE:                do_load_i2();                      break;
            case OPC.STORE:                       iparmUByte();
            case OPC.STORE_WIDE:                  do_store();                        break;
            case OPC.STORE_I2:                    iparmUByte();
            case OPC.STORE_I2_WIDE:               do_store_i2();                     break;
            case OPC.LOADPARM:                    iparmUByte();
            case OPC.LOADPARM_WIDE:               do_loadparm();                     break;
            case OPC.LOADPARM_I2:                 iparmUByte();
            case OPC.LOADPARM_I2_WIDE:            do_loadparm_i2();                  break;
            case OPC.STOREPARM:                   iparmUByte();
            case OPC.STOREPARM_WIDE:              do_storeparm();                    break;
            case OPC.STOREPARM_I2:                iparmUByte();
            case OPC.STOREPARM_I2_WIDE:           do_storeparm_i2();                 break;
            case OPC.INC:                         iparmUByte();
            case OPC.INC_WIDE:                    do_inc();                          break;
            case OPC.DEC:                         iparmUByte();
            case OPC.DEC_WIDE:                    do_dec();                          break;
            case OPC.INCPARM:                     iparmUByte();
            case OPC.INCPARM_WIDE:                do_incparm();                      break;
            case OPC.DECPARM:                     iparmUByte();
            case OPC.DECPARM_WIDE:                do_decparm();                      break;
            case OPC.GOTO:                        iparmByte();
            case OPC.GOTO_WIDE:                   do_goto();                         break;
            case OPC.IF_EQ_O:                     iparmByte();
            case OPC.IF_EQ_O_WIDE:                do_if(1, EQ, OOP);                 break;
            case OPC.IF_NE_O:                     iparmByte();
            case OPC.IF_NE_O_WIDE:                do_if(1, NE, OOP);                 break;
            case OPC.IF_CMPEQ_O:                  iparmByte();
            case OPC.IF_CMPEQ_O_WIDE:             do_if(2, EQ, OOP);                 break;
            case OPC.IF_CMPNE_O:                  iparmByte();
            case OPC.IF_CMPNE_O_WIDE:             do_if(2, NE, OOP);                 break;
            case OPC.IF_EQ_I:                     iparmByte();
            case OPC.IF_EQ_I_WIDE:                do_if(1, EQ, INT);                 break;
            case OPC.IF_NE_I:                     iparmByte();
            case OPC.IF_NE_I_WIDE:                do_if(1, NE, INT);                 break;
            case OPC.IF_LT_I:                     iparmByte();
            case OPC.IF_LT_I_WIDE:                do_if(1, LT, INT);                 break;
            case OPC.IF_LE_I:                     iparmByte();
            case OPC.IF_LE_I_WIDE:                do_if(1, LE, INT);                 break;
            case OPC.IF_GT_I:                     iparmByte();
            case OPC.IF_GT_I_WIDE:                do_if(1, GT, INT);                 break;
            case OPC.IF_GE_I:                     iparmByte();
            case OPC.IF_GE_I_WIDE:                do_if(1, GE, INT);                 break;
            case OPC.IF_CMPEQ_I:                  iparmByte();
            case OPC.IF_CMPEQ_I_WIDE:             do_if(2, EQ, INT);                 break;
            case OPC.IF_CMPNE_I:                  iparmByte();
            case OPC.IF_CMPNE_I_WIDE:             do_if(2, NE, INT);                 break;
            case OPC.IF_CMPLT_I:                  iparmByte();
            case OPC.IF_CMPLT_I_WIDE:             do_if(2, LT, INT);                 break;
            case OPC.IF_CMPLE_I:                  iparmByte();
            case OPC.IF_CMPLE_I_WIDE:             do_if(2, LE, INT);                 break;
            case OPC.IF_CMPGT_I:                  iparmByte();
            case OPC.IF_CMPGT_I_WIDE:             do_if(2, GT, INT);                 break;
            case OPC.IF_CMPGE_I:                  iparmByte();
            case OPC.IF_CMPGE_I_WIDE:             do_if(2, GE, INT);                 break;
            case OPC.IF_EQ_L:                     iparmByte();
            case OPC.IF_EQ_L_WIDE:                do_if(1, EQ, LONG);                break;
            case OPC.IF_NE_L:                     iparmByte();
            case OPC.IF_NE_L_WIDE:                do_if(1, NE, LONG);                break;
            case OPC.IF_LT_L:                     iparmByte();
            case OPC.IF_LT_L_WIDE:                do_if(1, LT, LONG);                break;
            case OPC.IF_LE_L:                     iparmByte();
            case OPC.IF_LE_L_WIDE:                do_if(1, LE, LONG);                break;
            case OPC.IF_GT_L:                     iparmByte();
            case OPC.IF_GT_L_WIDE:                do_if(1, GT, LONG);                break;
            case OPC.IF_GE_L:                     iparmByte();
            case OPC.IF_GE_L_WIDE:                do_if(1, GE, LONG);                break;
            case OPC.IF_CMPEQ_L:                  iparmByte();
            case OPC.IF_CMPEQ_L_WIDE:             do_if(2, EQ, LONG);                break;
            case OPC.IF_CMPNE_L:                  iparmByte();
            case OPC.IF_CMPNE_L_WIDE:             do_if(2, NE, LONG);                break;
            case OPC.IF_CMPLT_L:                  iparmByte();
            case OPC.IF_CMPLT_L_WIDE:             do_if(2, LT, LONG);                break;
            case OPC.IF_CMPLE_L:                  iparmByte();
            case OPC.IF_CMPLE_L_WIDE:             do_if(2, LE, LONG);                break;
            case OPC.IF_CMPGT_L:                  iparmByte();
            case OPC.IF_CMPGT_L_WIDE:             do_if(2, GT, LONG);                break;
            case OPC.IF_CMPGE_L:                  iparmByte();
            case OPC.IF_CMPGE_L_WIDE:             do_if(2, GE, LONG);                break;
            case OPC.GETSTATIC_I:                 iparmUByte();
            case OPC.GETSTATIC_I_WIDE:            do_getstatic(INT);                 break;
            case OPC.GETSTATIC_O:                 iparmUByte();
            case OPC.GETSTATIC_O_WIDE:            do_getstatic(OOP);                 break;
            case OPC.GETSTATIC_L:                 iparmUByte();
            case OPC.GETSTATIC_L_WIDE:            do_getstatic(LONG);                break;
            case OPC.CLASS_GETSTATIC_I:           iparmUByte();
            case OPC.CLASS_GETSTATIC_I_WIDE:      do_class_getstatic(INT);           break;
            case OPC.CLASS_GETSTATIC_O:           iparmUByte();
            case OPC.CLASS_GETSTATIC_O_WIDE:      do_class_getstatic(OOP);           break;
            case OPC.CLASS_GETSTATIC_L:           iparmUByte();
            case OPC.CLASS_GETSTATIC_L_WIDE:      do_class_getstatic(LONG);          break;
            case OPC.PUTSTATIC_I:                 iparmUByte();
            case OPC.PUTSTATIC_I_WIDE:            do_putstatic(INT);                 break;
            case OPC.PUTSTATIC_O:                 iparmUByte();
            case OPC.PUTSTATIC_O_WIDE:            do_putstatic(OOP);                 break;
            case OPC.PUTSTATIC_L:                 iparmUByte();
            case OPC.PUTSTATIC_L_WIDE:            do_putstatic(LONG);                break;
            case OPC.CLASS_PUTSTATIC_I:           iparmUByte();
            case OPC.CLASS_PUTSTATIC_I_WIDE:      do_class_putstatic(INT);           break;
            case OPC.CLASS_PUTSTATIC_O:           iparmUByte();
            case OPC.CLASS_PUTSTATIC_O_WIDE:      do_class_putstatic(OOP);           break;
            case OPC.CLASS_PUTSTATIC_L:           iparmUByte();
            case OPC.CLASS_PUTSTATIC_L_WIDE:      do_class_putstatic(LONG);          break;
            case OPC.GETFIELD_I:                  iparmUByte();
            case OPC.GETFIELD_I_WIDE:             do_getfield(INT);                  break;
            case OPC.GETFIELD_B:                  iparmUByte();
            case OPC.GETFIELD_B_WIDE:             do_getfield(BYTE);                 break;
            case OPC.GETFIELD_S:                  iparmUByte();
            case OPC.GETFIELD_S_WIDE:             do_getfield(SHORT);                break;
            case OPC.GETFIELD_C:                  iparmUByte();
            case OPC.GETFIELD_C_WIDE:             do_getfield(USHORT);               break;
            case OPC.GETFIELD_O:                  iparmUByte();
            case OPC.GETFIELD_O_WIDE:             do_getfield(OOP);                  break;
            case OPC.GETFIELD_L:                  iparmUByte();
            case OPC.GETFIELD_L_WIDE:             do_getfield(LONG);                 break;
            case OPC.GETFIELD0_I:                 iparmUByte();
            case OPC.GETFIELD0_I_WIDE:            do_getfield0(INT);                 break;
            case OPC.GETFIELD0_B:                 iparmUByte();
            case OPC.GETFIELD0_B_WIDE:            do_getfield0(BYTE);                break;
            case OPC.GETFIELD0_S:                 iparmUByte();
            case OPC.GETFIELD0_S_WIDE:            do_getfield0(SHORT);               break;
            case OPC.GETFIELD0_C:                 iparmUByte();
            case OPC.GETFIELD0_C_WIDE:            do_getfield0(USHORT);              break;
            case OPC.GETFIELD0_O:                 iparmUByte();
            case OPC.GETFIELD0_O_WIDE:            do_getfield0(OOP);                 break;
            case OPC.GETFIELD0_L:                 iparmUByte();
            case OPC.GETFIELD0_L_WIDE:            do_getfield0(LONG);                break;
            case OPC.PUTFIELD_I:                  iparmUByte();
            case OPC.PUTFIELD_I_WIDE:             do_putfield(INT);                  break;
            case OPC.PUTFIELD_B:                  iparmUByte();
            case OPC.PUTFIELD_B_WIDE:             do_putfield(BYTE);                 break;
            case OPC.PUTFIELD_S:                  iparmUByte();
            case OPC.PUTFIELD_S_WIDE:             do_putfield(SHORT);                break;
            case OPC.PUTFIELD_O:                  iparmUByte();
            case OPC.PUTFIELD_O_WIDE:             do_putfield(OOP);                  break;
            case OPC.PUTFIELD_L:                  iparmUByte();
            case OPC.PUTFIELD_L_WIDE:             do_putfield(LONG);                 break;
            case OPC.PUTFIELD0_I:                 iparmUByte();
            case OPC.PUTFIELD0_I_WIDE:            do_putfield0(INT);                 break;
            case OPC.PUTFIELD0_B:                 iparmUByte();
            case OPC.PUTFIELD0_B_WIDE:            do_putfield0(BYTE);                break;
            case OPC.PUTFIELD0_S:                 iparmUByte();
            case OPC.PUTFIELD0_S_WIDE:            do_putfield0(SHORT);               break;
            case OPC.PUTFIELD0_O:                 iparmUByte();
            case OPC.PUTFIELD0_O_WIDE:            do_putfield0(OOP);                 break;
            case OPC.PUTFIELD0_L:                 iparmUByte();
            case OPC.PUTFIELD0_L_WIDE:            do_putfield0(LONG);                break;
            case OPC.INVOKEVIRTUAL_I:             iparmUByte();
            case OPC.INVOKEVIRTUAL_I_WIDE:        do_invokevirtual(INT);             break;
            case OPC.INVOKEVIRTUAL_V:             iparmUByte();
            case OPC.INVOKEVIRTUAL_V_WIDE:        do_invokevirtual(VOID);            break;
            case OPC.INVOKEVIRTUAL_L:             iparmUByte();
            case OPC.INVOKEVIRTUAL_L_WIDE:        do_invokevirtual(LONG);            break;
            case OPC.INVOKEVIRTUAL_O:             iparmUByte();
            case OPC.INVOKEVIRTUAL_O_WIDE:        do_invokevirtual(OOP);             break;
            case OPC.INVOKESTATIC_I:              iparmUByte();
            case OPC.INVOKESTATIC_I_WIDE:         do_invokestatic(INT);              break;
            case OPC.INVOKESTATIC_V:              iparmUByte();
            case OPC.INVOKESTATIC_V_WIDE:         do_invokestatic(VOID);             break;
            case OPC.INVOKESTATIC_L:              iparmUByte();
            case OPC.INVOKESTATIC_L_WIDE:         do_invokestatic(LONG);             break;
            case OPC.INVOKESTATIC_O:              iparmUByte();
            case OPC.INVOKESTATIC_O_WIDE:         do_invokestatic(OOP);              break;
            case OPC.INVOKESUPER_I:               iparmUByte();
            case OPC.INVOKESUPER_I_WIDE:          do_invokesuper(INT);               break;
            case OPC.INVOKESUPER_V:               iparmUByte();
            case OPC.INVOKESUPER_V_WIDE:          do_invokesuper(VOID);              break;
            case OPC.INVOKESUPER_L:               iparmUByte();
            case OPC.INVOKESUPER_L_WIDE:          do_invokesuper(LONG);              break;
            case OPC.INVOKESUPER_O:               iparmUByte();
            case OPC.INVOKESUPER_O_WIDE:          do_invokesuper(OOP);               break;
            case OPC.INVOKENATIVE_I:              iparmUByte();
            case OPC.INVOKENATIVE_I_WIDE:         do_invokenative(INT);              break;
            case OPC.INVOKENATIVE_V:              iparmUByte();
            case OPC.INVOKENATIVE_V_WIDE:         do_invokenative(VOID);             break;
            case OPC.INVOKENATIVE_L:              iparmUByte();
            case OPC.INVOKENATIVE_L_WIDE:         do_invokenative(LONG);             break;
            case OPC.INVOKENATIVE_O:              iparmUByte();
            case OPC.INVOKENATIVE_O_WIDE:         do_invokenative(OOP);              break;
            case OPC.FINDSLOT:                    iparmUByte();
            case OPC.FINDSLOT_WIDE:               do_findslot();                     break;
            case OPC.EXTEND:                      iparmUByte();
            case OPC.EXTEND_WIDE:                 do_extend();                       break;
            case OPC.INVOKESLOT_I:                iparmNone();
                                                  do_invokeslot(INT);                break;
            case OPC.INVOKESLOT_V:                iparmNone();
                                                  do_invokeslot(VOID);               break;
            case OPC.INVOKESLOT_L:                iparmNone();
                                                  do_invokeslot(LONG);               break;
            case OPC.INVOKESLOT_O:                iparmNone();
                                                  do_invokeslot(OOP);                break;
            case OPC.RETURN_V:                    iparmNone();
                                                  do_return(VOID);                   break;
            case OPC.RETURN_I:                    iparmNone();
                                                  do_return(INT);                    break;
            case OPC.RETURN_L:                    iparmNone();
                                                  do_return(LONG);                   break;
            case OPC.RETURN_O:                    iparmNone();
                                                  do_return(OOP);                    break;
            case OPC.TABLESWITCH_I:               iparmNone();
                                                  do_tableswitch(INT);               break;
            case OPC.TABLESWITCH_S:               iparmNone();
                                                  do_tableswitch(SHORT);             break;
            case OPC.EXTEND0:                     iparmNone();
                                                  do_extend0();                      break;
            case OPC.ADD_I:                       iparmNone();
                                                  do_add(INT);                       break;
            case OPC.SUB_I:                       iparmNone();
                                                  do_sub(INT);                       break;
            case OPC.AND_I:                       iparmNone();
                                                  do_and(INT);                       break;
            case OPC.OR_I:                        iparmNone();
                                                  do_or(INT);                        break;
            case OPC.XOR_I:                       iparmNone();
                                                  do_xor(INT);                       break;
            case OPC.SHL_I:                       iparmNone();
                                                  do_shl(INT);                       break;
            case OPC.SHR_I:                       iparmNone();
                                                  do_shr(INT);                       break;
            case OPC.USHR_I:                      iparmNone();
                                                  do_ushr(INT);                      break;
            case OPC.MUL_I:                       iparmNone();
                                                  do_mul(INT);                       break;
            case OPC.DIV_I:                       iparmNone();
                                                  do_div(INT);                       break;
            case OPC.REM_I:                       iparmNone();
                                                  do_rem(INT);                       break;
            case OPC.NEG_I:                       iparmNone();
                                                  do_neg(INT);                       break;
            case OPC.I2B:                         iparmNone();
                                                  do_i2b();                          break;
            case OPC.I2S:                         iparmNone();
                                                  do_i2s();                          break;
            case OPC.I2C:                         iparmNone();
                                                  do_i2c();                          break;
            case OPC.ADD_L:                       iparmNone();
                                                  do_add(LONG);                      break;
            case OPC.SUB_L:                       iparmNone();
                                                  do_sub(LONG);                      break;
            case OPC.MUL_L:                       iparmNone();
                                                  do_mul(LONG);                      break;
            case OPC.DIV_L:                       iparmNone();
                                                  do_div(LONG);                      break;
            case OPC.REM_L:                       iparmNone();
                                                  do_rem(LONG);                      break;
            case OPC.AND_L:                       iparmNone();
                                                  do_and(LONG);                      break;
            case OPC.OR_L:                        iparmNone();
                                                  do_or(LONG);                       break;
            case OPC.XOR_L:                       iparmNone();
                                                  do_xor(LONG);                      break;
            case OPC.NEG_L:                       iparmNone();
                                                  do_neg(LONG);                      break;
            case OPC.SHL_L:                       iparmNone();
                                                  do_shl(LONG);                      break;
            case OPC.SHR_L:                       iparmNone();
                                                  do_shr(LONG);                      break;
            case OPC.USHR_L:                      iparmNone();
                                                  do_ushr(LONG);                     break;
            case OPC.L2I:                         iparmNone();
                                                  do_l2i();                          break;
            case OPC.I2L:                         iparmNone();
                                                  do_i2l();                          break;
            case OPC.THROW:                       iparmNone();
                                                  do_throw();                        break;
            case OPC.POP_1:                       iparmNone();
                                                  do_pop(1);                         break;
            case OPC.POP_2:                       iparmNone();
                                                  do_pop(2);                         break;
            case OPC.MONITORENTER:                iparmNone();
                                                  do_monitorenter();                 break;
            case OPC.MONITOREXIT:                 iparmNone();
                                                  do_monitorexit();                  break;
            case OPC.CLASS_MONITORENTER:          iparmNone();
                                                  do_class_monitorenter();           break;
            case OPC.CLASS_MONITOREXIT:           iparmNone();
                                                  do_class_monitorexit();            break;
            case OPC.ARRAYLENGTH:                 iparmNone();
                                                  do_arraylength();                  break;
            case OPC.NEW:                         iparmNone();
                                                  do_new();                          break;
            case OPC.NEWARRAY:                    iparmNone();
                                                  do_newarray();                     break;
            case OPC.NEWDIMENSION:                iparmNone();
                                                  do_newdimension();                 break;
            case OPC.CLASS_CLINIT:                iparmNone();
                                                  do_class_clinit();                 break;
            case OPC.BBTARGET_SYS:                iparmNone();
                                                  do_bbtarget_sys();                 break;
            case OPC.BBTARGET_APP:                iparmNone();
                                                  do_bbtarget_app();                 break;
            case OPC.INSTANCEOF:                  iparmNone();
                                                  do_instanceof();                   break;
            case OPC.CHECKCAST:                   iparmNone();
                                                  do_checkcast();                    break;
            case OPC.ALOAD_I:                     iparmNone();
                                                  do_aload(INT);                     break;
            case OPC.ALOAD_B:                     iparmNone();
                                                  do_aload(BYTE);                    break;
            case OPC.ALOAD_S:                     iparmNone();
                                                  do_aload(SHORT);                   break;
            case OPC.ALOAD_C:                     iparmNone();
                                                  do_aload(USHORT);                  break;
            case OPC.ALOAD_O:                     iparmNone();
                                                  do_aload(OOP);                     break;
            case OPC.ALOAD_L:                     iparmNone();
                                                  do_aload(LONG);                    break;
            case OPC.ASTORE_I:                    iparmNone();
                                                  do_astore(INT);                    break;
            case OPC.ASTORE_B:                    iparmNone();
                                                  do_astore(BYTE);                   break;
            case OPC.ASTORE_S:                    iparmNone();
                                                  do_astore(SHORT);                  break;
            case OPC.ASTORE_O:                    iparmNone();
                                                  do_astore(OOP);                    break;
            case OPC.ASTORE_L:                    iparmNone();
                                                  do_astore(LONG);                   break;
            case OPC.LOOKUP_I:                    iparmNone();
                                                  do_lookup(INT);                    break;
            case OPC.LOOKUP_B:                    iparmNone();
                                                  do_lookup(BYTE);                   break;
            case OPC.LOOKUP_S:                    iparmNone();
                                                  do_lookup(SHORT);                  break;
            case OPC.PAUSE:                       iparmNone();
                                                  do_pause();                        break;

/*if[FLOATS]*/
            case OPC.FCMPL:                       iparmNone();
                                                  do_fcmpl();                        break;
            case OPC.FCMPG:                       iparmNone();
                                                  do_fcmpg();                        break;
            case OPC.DCMPL:                       iparmNone();
                                                  do_dcmpl();                        break;
            case OPC.DCMPG:                       iparmNone();
                                                  do_dcmpg();                        break;
            case OPC.GETSTATIC_F:                 iparmUByte();
            case OPC.GETSTATIC_F_WIDE:            do_getstatic(FLOAT);               break;
            case OPC.GETSTATIC_D:                 iparmUByte();
            case OPC.GETSTATIC_D_WIDE:            do_getstatic(DOUBLE);              break;
            case OPC.CLASS_GETSTATIC_F:           iparmUByte();
            case OPC.CLASS_GETSTATIC_F_WIDE:      do_class_getstatic(FLOAT);         break;
            case OPC.CLASS_GETSTATIC_D:           iparmUByte();
            case OPC.CLASS_GETSTATIC_D_WIDE:      do_class_getstatic(DOUBLE);        break;
            case OPC.PUTSTATIC_F:                 iparmUByte();
            case OPC.PUTSTATIC_F_WIDE:            do_putstatic(FLOAT);               break;
            case OPC.PUTSTATIC_D:                 iparmUByte();
            case OPC.PUTSTATIC_D_WIDE:            do_putstatic(DOUBLE);              break;
            case OPC.CLASS_PUTSTATIC_F:           iparmUByte();
            case OPC.CLASS_PUTSTATIC_F_WIDE:      do_class_putstatic(FLOAT);         break;
            case OPC.CLASS_PUTSTATIC_D:           iparmUByte();
            case OPC.CLASS_PUTSTATIC_D_WIDE:      do_class_putstatic(DOUBLE);        break;
            case OPC.GETFIELD_F:                  iparmUByte();
            case OPC.GETFIELD_F_WIDE:             do_getfield(FLOAT);                break;
            case OPC.GETFIELD_D:                  iparmUByte();
            case OPC.GETFIELD_D_WIDE:             do_getfield(DOUBLE);               break;
            case OPC.GETFIELD0_F:                 iparmUByte();
            case OPC.GETFIELD0_F_WIDE:            do_getfield0(FLOAT);               break;
            case OPC.GETFIELD0_D:                 iparmUByte();
            case OPC.GETFIELD0_D_WIDE:            do_getfield0(DOUBLE);              break;
            case OPC.PUTFIELD_F:                  iparmUByte();
            case OPC.PUTFIELD_F_WIDE:             do_putfield(FLOAT);                break;
            case OPC.PUTFIELD_D:                  iparmUByte();
            case OPC.PUTFIELD_D_WIDE:             do_putfield(DOUBLE);               break;
            case OPC.PUTFIELD0_F:                 iparmUByte();
            case OPC.PUTFIELD0_F_WIDE:            do_putfield0(FLOAT);               break;
            case OPC.PUTFIELD0_D:                 iparmUByte();
            case OPC.PUTFIELD0_D_WIDE:            do_putfield0(DOUBLE);              break;
            case OPC.INVOKEVIRTUAL_F:             iparmUByte();
            case OPC.INVOKEVIRTUAL_F_WIDE:        do_invokevirtual(FLOAT);           break;
            case OPC.INVOKEVIRTUAL_D:             iparmUByte();
            case OPC.INVOKEVIRTUAL_D_WIDE:        do_invokevirtual(DOUBLE);          break;
            case OPC.INVOKESTATIC_F:              iparmUByte();
            case OPC.INVOKESTATIC_F_WIDE:         do_invokestatic(FLOAT);            break;
            case OPC.INVOKESTATIC_D:              iparmUByte();
            case OPC.INVOKESTATIC_D_WIDE:         do_invokestatic(DOUBLE);           break;
            case OPC.INVOKESUPER_F:               iparmUByte();
            case OPC.INVOKESUPER_F_WIDE:          do_invokesuper(FLOAT);             break;
            case OPC.INVOKESUPER_D:               iparmUByte();
            case OPC.INVOKESUPER_D_WIDE:          do_invokesuper(DOUBLE);            break;
            case OPC.INVOKENATIVE_F:              iparmUByte();
            case OPC.INVOKENATIVE_F_WIDE:         do_invokenative(FLOAT);            break;
            case OPC.INVOKENATIVE_D:              iparmUByte();
            case OPC.INVOKENATIVE_D_WIDE:         do_invokenative(DOUBLE);           break;
            case OPC.INVOKESLOT_F:                iparmNone();
                                                  do_invokeslot(FLOAT);              break;
            case OPC.INVOKESLOT_D:                iparmNone();
                                                  do_invokeslot(DOUBLE);             break;
            case OPC.RETURN_F:                    iparmNone();
                                                  do_return(FLOAT);                  break;
            case OPC.RETURN_D:                    iparmNone();
                                                  do_return(DOUBLE);                 break;
            case OPC.CONST_FLOAT:                 iparmNone();
                                                  do_const_float();                  break;
            case OPC.CONST_DOUBLE:                iparmNone();
                                                  do_const_double();                 break;
            case OPC.ADD_F:                       iparmNone();
                                                  do_add(FLOAT);                     break;
            case OPC.SUB_F:                       iparmNone();
                                                  do_sub(FLOAT);                     break;
            case OPC.MUL_F:                       iparmNone();
                                                  do_mul(FLOAT);                     break;
            case OPC.DIV_F:                       iparmNone();
                                                  do_div(FLOAT);                     break;
            case OPC.REM_F:                       iparmNone();
                                                  do_rem(FLOAT);                     break;
            case OPC.NEG_F:                       iparmNone();
                                                  do_neg(FLOAT);                     break;
            case OPC.ADD_D:                       iparmNone();
                                                  do_add(DOUBLE);                    break;
            case OPC.SUB_D:                       iparmNone();
                                                  do_sub(DOUBLE);                    break;
            case OPC.MUL_D:                       iparmNone();
                                                  do_mul(DOUBLE);                    break;
            case OPC.DIV_D:                       iparmNone();
                                                  do_div(DOUBLE);                    break;
            case OPC.REM_D:                       iparmNone();
                                                  do_rem(DOUBLE);                    break;
            case OPC.NEG_D:                       iparmNone();
                                                  do_neg(DOUBLE);                    break;
            case OPC.I2F:                         iparmNone();
                                                  do_i2f();                          break;
            case OPC.L2F:                         iparmNone();
                                                  do_l2f();                          break;
            case OPC.F2I:                         iparmNone();
                                                  do_f2i();                          break;
            case OPC.F2L:                         iparmNone();
                                                  do_f2l();                          break;
            case OPC.I2D:                         iparmNone();
                                                  do_i2d();                          break;
            case OPC.L2D:                         iparmNone();
                                                  do_l2d();                          break;
            case OPC.F2D:                         iparmNone();
                                                  do_f2d();                          break;
            case OPC.D2I:                         iparmNone();
                                                  do_d2i();                          break;
            case OPC.D2L:                         iparmNone();
                                                  do_d2l();                          break;
            case OPC.D2F:                         iparmNone();
                                                  do_d2f();                          break;
            case OPC.ALOAD_F:                     iparmNone();
                                                  do_aload(FLOAT);                   break;
            case OPC.ALOAD_D:                     iparmNone();
                                                  do_aload(DOUBLE);                  break;
            case OPC.ASTORE_F:                    iparmNone();
                                                  do_astore(FLOAT);                  break;
            case OPC.ASTORE_D:                    iparmNone();
                                                  do_astore(DOUBLE);                 break;
/*end[FLOATS]*/
        }
    }
}
