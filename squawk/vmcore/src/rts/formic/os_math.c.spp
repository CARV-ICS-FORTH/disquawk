#ifndef __OS_MAIN_H__
#define __OS_MAIN_H__

#ifdef UNIT_TEST
#include "jni_md.h"
#endif  /* UNIT_TEST */

/*if[!MICROBLAZE32_BUILD]*/
/* Include math gcc intrinsics from the compiler-rt lib to support
 * 64bit types */

/* This is needed by the compiler-rt to understand that this is a
 * little endian platform */
#define _YUGA_LITTLE_ENDIAN 1
#define _YUGA_BIG_ENDIAN    0

/* Limits for integral types. We have to redefine it because we don't
 * use stdint.h */
#undef INT64_C
#undef UINT32_C
#undef UINT64_C
#define INT64_C(c)  c ## LL
#define UINT32_C(c) c
#define UINT64_C(c) c ## ULL
#undef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#undef INT32_MAX
#define INT32_MAX              (2147483647)
#undef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#undef INT64_MIN
#define INT64_MIN              (-__INT64_C(9223372036854775807)-1)
#undef INT64_MAX
#define INT64_MAX              (__INT64_C(9223372036854775807))
#undef UINT64_MAX
#define UINT64_MAX             (__UINT64_C(18446744073709551615))

#include "lib/fixsfdi.c"
#include "lib/clzsi2.c"
#include "lib/clzdi2.c"
#include "lib/cmpdi2.c"
#include "lib/ucmpdi2.c"
#include "lib/floatdisf.c"
#include "lib/muldi3.c"
#include "lib/ctzsi2.c"
#include "lib/udivmoddi4.c"
#include "lib/divdi3.c"
#include "lib/moddi3.c"
#include "lib/truncdfsf2.c"
#include "lib/extendsfdf2.c"

/*end[MICROBLAZE32_BUILD]*/

#ifdef UNIT_TEST
#define STRINGIFY(x) #x
#define TOSTRING(x) STRINGIFY(x)
#define assert(x) \
  if (!(x)) {\
    printf("Assert failed: ");               \
    printf(TOSTRING(x)); \
    printf("\n"); \
  }

int main()
{
  long long a = 0xAAAAAAAAAAAAAAAALL;
  long long b = 0x00000000BBBBBBBBLL;
  long long c = 0x000000000000BBBBLL;
  long long d = 0x000000BBBBBBBBBBLL;
  long long e = 0x1122334455667788LL;
  long long f = 0x0000004455667788LL;
  long long g = 0x1122330000000000LL;

  assert(e==e && "64bit equality T");
  assert(e!=f && "64bit equality F");
  assert(e!=g && "64bit equality F2");
  assert(f!=g && "64bit equality F3");

  long long mod_ll = __moddi3(a, b);
  assert(mod_ll==0xFFFFFFFFCCCCCCCCLL && "mod LL");

  long div_l = (long)__divdi3(a,b);
  assert(div_l==0XFFFFFFFF8BA2E8BALL && "div b L");

  long long div_ll = __divdi3(a,c);
  assert(div_ll==0xFFFF8BA2745CA2E9LL && "div c LL");

  mod_ll = __moddi3(a,c);
  assert(mod_ll==0xFFFFFFFFFFFF7777LL && "mod c LL");

  long mul_ll = __muldi3(c, d);
  assert(mul_ll==0x89AB444443BA99LL && "mul c d LL");

  int ia = 0xF000;
  int trailing = __ctzsi2(ia);
  assert(trailing==12 && "Trailing zero bits");

  return 0;
}

#endif  /* UNIT_TEST */

#endif /* __OS_MAIN_H__ */
