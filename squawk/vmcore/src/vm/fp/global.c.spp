//if[MICROBLAZE_BUILD]
/*
 * Copyright 2006-2008 Sun Microsystems, Inc. All Rights Reserved.
 * Copyright 2014      FORTH-ICS.             All Rights Reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER
 *
 * This code is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2
 * only, as published by the Free Software Foundation.
 *
 * This code is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * General Public License version 2 for more details (a copy is
 * included in the LICENSE file that accompanied this code).
 *
 * You should have received a copy of the GNU General Public License
 * version 2 along with this work; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA
 *
 * Please contact Sun Microsystems, Inc., 16 Network Circle, Menlo
 * Park, CA 94025 or visit www.sun.com if you need additional
 * information or have any questions.
 */
#include "global.h"

INLINE float ib2f(int i)                { union  uu1 x; x.i = i; return x.f;         }
INLINE int   f2ib(float f)              { union  uu1 x; x.f = f; return x.i;         }

#if ARM_FPA
INLINE double lb2d(jlong l)                { union uu2 x; x.lParts[0] = (unsigned int)((ujlong)l >> 32); x.lParts[1] = l; return x.d;         }

INLINE jlong  d2lb(const double d) {
	union uu2 x;
    unsigned int y;
	x.d = d; y = x.lParts[0]; x.lParts[0]= x.lParts[1]; x.lParts[1] = y;
    return x.l;
}
#else /* ARM_FPA */
INLINE double lb2d(jlong l)                { union uu2 x; x.l = l; return x.d;         }
INLINE jlong  d2lb(double d)               { union uu2 x; x.d = d; return x.l;         }
#endif /* ARM_FPA */

#if !PROCESSOR_ARCHITECTURE_X86 || defined(__SSE2_MATH__ )
// x86 requires a much more complicated solution. See fp_bytecodes.c.
INLINE double  JFP_lib_muld(double x, double y)       { return x * y;      }
INLINE double  JFP_lib_divd(double x, double y)       { return x / y;      }
INLINE double  JFP_lib_remd(double x, double y)       { return fmod(x, y);}
INLINE float   JFP_lib_remf(float x, float y)         { return fmodf(x, y);}

#endif
