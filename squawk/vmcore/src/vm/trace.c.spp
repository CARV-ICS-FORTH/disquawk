/*
 * Copyright 2004-2008 Sun Microsystems, Inc. All Rights Reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER
 *
 * This code is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2
 * only, as published by the Free Software Foundation.
 *
 * This code is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * General Public License version 2 for more details (a copy is
 * included in the LICENSE file that accompanied this code).
 *
 * You should have received a copy of the GNU General Public License
 * version 2 along with this work; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA
 *
 * Please contact Sun Microsystems, Inc., 16 Network Circle, Menlo
 * Park, CA 94025 or visit www.sun.com if you need additional
 * information or have any questions.
 */

#if TRACE

int lastThreadID = -2;

/**
 * Open the trace file if not already opened.
 *
 * @return true if the trace file was opened by this call, false if it
 *         was already open
 */
boolean openTraceFile() {
    if (!traceFileOpen) {
/*if[!MICROBLAZE_BUILD]*/
        if (traceFile == NULL) {
            traceFile = fopen(inKernelMode() ? "ktrace" : "trace", "w");
        }
/*end[MICROBLAZE_BUILD]*/
        traceFileOpen = true;
        fprintf(traceFile, format("*TRACE*:*ROM*:%A:%A:*NVM*:%A:%A:*%d*\n"),
                com_sun_squawk_VM_romStart, com_sun_squawk_VM_romEnd, com_sun_squawk_GC_nvmStart, com_sun_squawk_GC_nvmEnd,
                SQUAWK_64 ? 64 : 32);
        return true;
    } else {
        return false;
    }
}

/**
 * A struct for storing a decoded instruction.
 */
typedef struct {

    /**
     * Specifies if the instruction has no operands (0), an int operand (1), a long operand (2), a float operand(3) or a double operand (4)
     */
    int tag;

    /**
     * The WIDE_* or ESCAPE_* prefix of the instruction or -1 if neither applies.
     */
    int prefix;

    /**
     * The opcode of the instruction.
     */
    int opcode;

    /**
     * The int/float/long/double operand.
     */
    union {
        int i;
        jlong l;
    } operand;

#if TYPEMAP
    /**
     * The mutation type of the instruction.
     */
    char mutationType;
#endif /* TYPEMAP */

} DecodedInstruction;

/**
 * Decodes an instruction.
 *
 * @param instruction  the structure in which the decoded information is returned
 * @param traceIP      the instruction pointer which is currently at the start of an instruction
 */
void decodeInstruction(DecodedInstruction *instruction, ByteAddress traceIP) {
    int opcode;
#ifdef MACROIZE
    ByteAddress ip;  // local version of IP
#endif /* MACROIZE */
    ip = traceIP;
    opcode = fetchUByte();

    // Initialize the return struct for the common case
    (*instruction).tag = 1;
    (*instruction).prefix = -1;
#if TYPEMAP
    (*instruction).mutationType = getMutationType();
#endif /* TYPEMAP */

    // Sanity
    (*instruction).opcode = -1;

    switch (opcode) {
        case OPC_WIDE_M1: {
            (*instruction).prefix = opcode;
            (*instruction).opcode = fetchUByte();
            (*instruction).operand.i =  0xFFFFFF00|fetchUByte();
            break;
        }
        case OPC_WIDE_0: {
            (*instruction).prefix = opcode;
            (*instruction).opcode = fetchUByte();
            (*instruction).operand.i = fetchUByte();
            break;
        }
        case OPC_WIDE_1: {
            (*instruction).prefix = opcode;
            (*instruction).opcode = fetchUByte();
            (*instruction).operand.i = 0x100|fetchUByte();
            break;
        }
        case OPC_WIDE_SHORT: {
            int fparm;
            (*instruction).prefix = opcode;
            (*instruction).opcode = fetchUByte();
            fetchShort();
            (*instruction).operand.i = fparm;
            break;
        }
        case OPC_WIDE_INT: {
            int fparm;
            (*instruction).prefix = opcode;
            (*instruction).opcode = fetchUByte();
            fetchInt();
            (*instruction).operand.i = fparm;
            break;
        }
        case OPC_ESCAPE: {
            int eopcode = fetchUByte()+256;
            (*instruction).opcode = eopcode;
            switch (eopcode) {
/*if[FLOATS]*/
                case OPC_CONST_FLOAT: {
                    int fparm;
                    fetchInt();
                    (*instruction).tag = 3;
                    (*instruction).operand.i = fparm;
                    break;
                }
                case OPC_CONST_DOUBLE: {
                    jlong flparm;
                    fetchLong();
                    (*instruction).tag = 4;
                    (*instruction).operand.l = flparm;
                    break;
                }
/*end[FLOATS]*/
                default: {
                    (*instruction).prefix = opcode;
                    if (opcodeHasWide(eopcode)) {
                        (*instruction).operand.i = fetchUByte();
                    } else {
                        (*instruction).tag = 0;
                    }
                    break;
                }
            }
            break;
        }
        case OPC_ESCAPE_WIDE_M1: {
            (*instruction).prefix = opcode;
            (*instruction).opcode = fetchUByte()+256;
            (*instruction).operand.i =  0xFFFFFF00|fetchUByte();
            break;
        }
        case OPC_ESCAPE_WIDE_0: {
            (*instruction).prefix = opcode;
            (*instruction).opcode = fetchUByte()+256;
            (*instruction).operand.i = fetchUByte();
            break;
            break;
        }
        case OPC_ESCAPE_WIDE_1: {
            (*instruction).prefix = opcode;
            (*instruction).opcode = fetchUByte()+256;
            (*instruction).operand.i = 0x100|fetchUByte();
            break;
        }
        case OPC_ESCAPE_WIDE_SHORT: {
            int fparm;
            (*instruction).prefix = opcode;
            (*instruction).opcode = fetchUByte()+256;
            fetchShort();
            (*instruction).operand.i = fparm;
            break;
        }
        case OPC_ESCAPE_WIDE_INT: {
            int fparm;
            (*instruction).prefix = opcode;
            (*instruction).opcode = fetchUByte()+256;
            fetchInt();
            (*instruction).operand.i = fparm;
            break;
        }
        case OPC_CONST_BYTE: {
            (*instruction).opcode = opcode;
            (*instruction).operand.i = fetchByte();
            break;
        }
        case OPC_CONST_SHORT: {
            int fparm;
            fetchShort();
            (*instruction).opcode = opcode;
            (*instruction).operand.i = fparm;
            break;
        }
        case OPC_CONST_CHAR: {
            int fparm;
            fetchUShort();
            (*instruction).opcode = opcode;
            (*instruction).operand.i = fparm;
            break;
        }
        case OPC_CONST_INT: {
            int fparm;
            fetchInt();
            (*instruction).opcode = opcode;
            (*instruction).operand.i = fparm;
            break;
        }
        case OPC_CONST_LONG: {
            jlong flparm;
            fetchLong();
            (*instruction).tag = 2;
            (*instruction).opcode = opcode;
            (*instruction).operand.l = flparm;
            break;
        }
        default: {
            (*instruction).opcode = opcode;
            if (opcodeHasWide(opcode)) {
                (*instruction).operand.i = fetchUByte();
            } else {
                (*instruction).tag = 0;
            }
            break;
        }
    }

    assume((*instruction).opcode != -1);
}

/**
 * Calculates the call depth based on a given frame pointer.
 *
 * @param traceFP  a frame pointer within a call stack
 * @return the number of frames (inclusive) between top of the stack and the frame denoted by traceFP
 */
int calculateCallDepth(UWordAddress traceFP) {
    // Determine the call depth level
    int depth = 0;
    while (traceFP != 0) {
        ++depth;
        traceFP = (UWordAddress)getObject(traceFP, FP_returnFP);
    }
    if (depth > 10000) {
        fprintf(stderr, "**Call depth suspiciously deep [%d] - infinite recursion?**\n", depth);
    }
    return depth;
}

/**
 * Writes the values in the local variable slots and on the operand stack.
 *
 * @param opcode    the opcode of the instruction being traced
 * @param traceFP   the current frame pointer which will not be valid if opcode at 'traceIP' is OPC_EXTEND
 * @param traceSP   the current operand stack pointer
 */
void traceLocalsAndStack(int opcode, ByteAddress traceMP, UWordAddress traceFP, UWordAddress traceSP) {
    int nlocals = getLocalCount(traceMP);
    int nstack = getStackCount(traceMP);
    if (opcode == OPC_EXTEND || opcode == OPC_EXTEND0) {
        fprintf(traceFile, format("%d:%d,%d:"), nlocals, nstack, (traceSP - sl));
    } else {
        UWordAddress p   = traceFP;
        UWordAddress sp0 = traceFP - nlocals;
#if ROM_REVERSE_PARAMETERS
        UWordAddress xsp = traceSP;
#else
        UWordAddress xsp = traceFP - nlocals - getStackCount(traceMP) + 1;
#endif

        while (p >= xsp) {
#if TYPEMAP
            UWord value = getUWordTyped(p, 0, getType(p));
#else
            UWord value = getUWordTyped(p, 0, 0);
#endif
            if (value == DEADBEEF) {
                fprintf(traceFile, "X");
            } else {
                fprintf(traceFile, format("%A"), value);
            }
#if TYPEMAP
            fprintf(traceFile, "#%d", getType(p));
#endif /* TYPEMAP */
            --p;
            if (p == sp0) {
                fprintf(traceFile, ":");
#if !ROM_REVERSE_PARAMETERS
                p = traceSP - 1;
#endif
            } else if (p >= xsp) {
                fprintf(traceFile, ",");
            }
        }
        fprintf(traceFile, ":");
    }
}

typedef struct {
    ByteAddress MP;
    int PC;
} TraceFrame;

/**
 * Walks the frames in a call stack from an inner frame to the top most frame, printing a
 * record to the trace file for each frame.
 *
 * @param  opcode    the opcode of the instruction about to be executed or -1 if in the middle of an instruction
 * @param  traceIP   the address of 'opcode' or the current IP if opcode == -1
 * @param  traceFP   the current frame pointer which will not be valid if opcode is OPC_EXTEND
 * @param  forThreadSwitch specifies if this is called for a *THREADSWITCH* trace line
 */
void traceFrames(int opcode, ByteAddress traceIP, UWordAddress traceFP, boolean forThreadSwitch) {
    int recursionGuard = 0;

    TraceFrame previousFrame = { 0, 0 };
    int repetitions = 0;

    while (traceFP != 0) {
        TraceFrame frame;

        // Initialize the method pointer
        if (opcode == OPC_EXTEND || opcode == OPC_EXTEND0) {
            // The frame pointer will not be setup before the extend is executed.
            frame.MP = traceIP;

            // From now on, the frame pointer is valid
            opcode = -1;
        } else {
            frame.MP = (ByteAddress)getObject(traceFP, FP_method);
        }

        // Get the bytecode offset relative to the start of the method
        frame.PC = (int)(traceIP - frame.MP);
//        assume(frame.PC >= 0);

        if (forThreadSwitch) {
            if (previousFrame.MP == frame.MP && previousFrame.PC == frame.PC) {
                repetitions++;
            } else {
                if (repetitions != 0) {
                    fprintf(traceFile, format(":\"%d"), repetitions);
                    repetitions = 0;
                }
                fprintf(traceFile, format(":%A@%d"), frame.MP, frame.PC);
            }
        } else {
            if (previousFrame.MP == frame.MP && previousFrame.PC == frame.PC) {
                repetitions++;
            } else {
                if (repetitions != 0) {
                    fprintf(traceFile, format("*STACKTRACE*:\"%d\n"), repetitions);
                    repetitions = 0;
                }
/*if[MICROBLAZE_BUILD]*/
                fprintf(traceFile, format("*STACKTRACE*:%A:%d\n"), (uint32_t)frame.MP-(uint32_t)com_sun_squawk_VM_bootstrapStart, frame.PC);
/*else[MICROBLAZE_BUILD]*/
                fprintf(traceFile, format("*STACKTRACE*:%A:%d\n"), frame.MP, frame.PC);
/*end[MICROBLAZE_BUILD]*/
            }
        }

        recursionGuard++;
        if (recursionGuard != 0 && (recursionGuard % 100) == 0) {
            fprintf(stderr, "**Call depth suspiciously deep [%d] - infinite recursion?**\n", recursionGuard);
        }

        traceIP = (ByteAddress)getObject(traceFP, FP_returnIP);
        traceFP = (UWordAddress)getObject(traceFP, FP_returnFP);

        previousFrame = frame;
    }

    if (repetitions != 0) {
        if (forThreadSwitch) {
            fprintf(traceFile, format(":\"%d"), repetitions);
        } else {
            fprintf(traceFile, format("*STACKTRACE*:\"%d\n"), repetitions);
        }
    }
}

/**
 * Writes a trace record.
 *
 * @param  traceIP   the address of instruction about to be executed
 * @param  traceFP   the current frame pointer which will not be valid if opcode at 'traceIP' is OPC_EXTEND
 * @param  traceSP   the current operand stack pointer
 */
/*if[MICROBLAZE_BUILD]*/
void trace(ByteAddress traceIP, UWordAddress traceFP,
           UWordAddress traceSP, unsigned char opcode) {
/*else[MICROBLAZE_BUILD]*/
void trace(ByteAddress traceIP, UWordAddress traceFP, UWordAddress traceSP) {
/*end[MICROBLAZE_BUILD]*/
#ifndef MACROIZE
    ByteAddress saveIP = ip;   // save the global IP
#endif /* MACROIZE */
    DecodedInstruction instruction;
    int pc;                    // bytecode offset from start of method
    int level;                 // current call depth level
    ByteAddress traceMP;       // current method pointer
    int threadID;              // numerical thread ID

    // Initialize the thread ID
    if (com_sun_squawk_VMThread_currentThread != 0) {
        threadID = currentThreadID;
    } else {
        // System thread
        threadID = -1;
    }

    // Don't trace the service thread if requested not to
    if (threadID == 0 && !traceServiceThread) {
        return;
    }

    // Write THREADSWITCH line
    if (openTraceFile() || threadID != lastThreadID) {
        lastThreadID = threadID;

        fprintf(traceFile, "*THREADSWITCH*:%d", threadID);
        traceFrames(-1, traceIP, traceFP, true);
        fprintf(traceFile, "\n");
    }

    // Decode the next instruction
    decodeInstruction(&instruction, traceIP);

    // Set up the method pointer
    if (instruction.opcode == OPC_EXTEND || instruction.opcode == OPC_EXTEND0) {
        // The frame pointer will not be setup before the extend is executed.
        traceMP = traceIP;
        level = 0;
    } else {
        assume(traceFP != null);
        level = -1;
        traceMP = (ByteAddress)getObject(traceFP, FP_method);
    }

    // Calculate the bytecode offset
    pc = (int)(traceIP - traceMP);

    // Determine the call depth level
    level += calculateCallDepth(traceFP);

    // Write out the first part of the trace line which has the following ':' separated components:
/*if[MICROBLAZE_BUILD]*/
    fprintf(traceFile, format("*TRACE*:%d:%d:%A:%d:%x:"), threadID, level,
            traceMP-(uint32_t)com_sun_squawk_VM_bootstrapStart, pc, opcode);
/*else[MICROBLAZE_BUILD]*/
    fprintf(traceFile, format("*TRACE*:%d:%d:%A:%d:"), threadID, level, traceMP, pc);
/*end[MICROBLAZE_BUILD]*/

    // Write out the decoded instruction
#if TYPEMAP
        fprintf(traceFile, "%d#%d,%d", instruction.opcode, instruction.mutationType, instruction.prefix);
#else
        fprintf(traceFile, "%d,%d", instruction.opcode, instruction.prefix);
#endif /* TYPEMAP */
    switch (instruction.tag) {
        case 0: fprintf(traceFile, ":");                                        break;
        case 1: fprintf(traceFile, ",%d:", instruction.operand.i);              break;
        case 2: fprintf(traceFile, format(",%L:"), instruction.operand.l);      break;
/*if[FLOATS]*/
        case 3: fprintf(traceFile, ",%f:" , ib2f(instruction.operand.i));       break;
        case 4: fprintf(traceFile, format(",%D:"), lb2d(instruction.operand.l));break;
/*end[FLOATS]*/
        default: shouldNotReachHere();
    }

    // Write out the local and stack values
    traceLocalsAndStack(instruction.opcode, traceMP, traceFP, traceSP);

    // Write out the stack pointer, branch count, and remaining number of stack words and complete the trace line
    fprintf(traceFile, format("%A:%L:%d\n"), traceSP, getBranchCount(), (traceSP - sl));
    fflush(traceFile);

#ifndef MACROIZE
    // Restore the value of the global IP
    ip = saveIP;
#endif /* MACROIZE */
}

//void closeTraceFile(void) {
//    if(traceFileOpen) {
//        fprintf(traceFile, "\n+++ Trace file closed +++\n");
//        traceFileOpen = false;
//        fclose(traceFile);
//    }
//}


/**
 * Prints a stack trace to the trace file.
 *
 * @param  opcode    the opcode of the instruction about to be executed or -1 if in the middle of an instruction
 * @param  traceIP   the address of 'opcode' or the current IP if opcode == -1
 * @param  traceFP   the current frame pointer which will not be valid if opcode is OPC_EXTEND
 * @param  msg       some message to append to the first stack trace line
 * @param  mnemonic  the mnemonic for the last executed instruction or null if this is not known
 * @param  msg       the trace message
 */
void printStackTracePrim(int opcode, ByteAddress traceIP, UWordAddress traceFP, const char* msg, const char* mnemonic) {
    openTraceFile();

    // Print the first line of the trace
    assume(msg != null);
    fprintf(traceFile, format("*STACKTRACESTART*:%L:%s"), getBranchCount(), msg);
    if (mnemonic != null) {
        fprintf(traceFile, ":%s\n", mnemonic);
    } else {
        fprintf(traceFile, "\n");
    }

    // Print the frames
    traceFrames(opcode, traceIP, traceFP, false);

    fprintf(traceFile, "*STACKTRACEEND*\n");
    fflush(traceFile);
}

/**
 * Prints a profile stack trace to the trace file.
 *
 * @param  traceIP     the address of the instruction about to be executed
 * @param  traceFP     the current frame pointer which will not be valid if the opcode at traceIP is OPC_EXTEND*
 * @param  lastOpcode  the opcode of previously executed instruction
 */
void printProfileStackTrace(ByteAddress traceIP, UWordAddress traceFP, int lastOpcode) {
    int opcode = getUByteTyped(traceIP, 0, AddressType_BYTECODE);
    printStackTracePrim(opcode, traceIP, traceFP, "*PROFILE TRACE*", getOpcodeName(lastOpcode));
}

/**
 * Prints a stack trace to the trace file.
 *
 * @param msg the trace message
 */
void printStackTrace(const char *msg) {
#ifndef MACROIZE
    ByteAddress lastIP = ip;
    UWordAddress lastFP = fp;
#endif /* MACROIZE */
    printStackTracePrim(-1, lastIP, lastFP, msg, null);
}

#endif /* TRACE */
