/*
 * Copyright 2013-2014 FORTH-ICS / CARV
 *                     (Foundation for Research & Technology -- Hellas,
 *                      Institute of Computer Science,
 *                      Computer Architecture & VLSI Systems Laboratory)
 * Copyright 2004-2010 Sun Microsystems, Inc. All Rights Reserved.
 * Copyright 2011 Oracle Corporation. All Rights Reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER
 *
 * This code is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2
 * only, as published by the Free Software Foundation.
 *
 * This code is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * General Public License version 2 for more details (a copy is
 * included in the LICENSE file that accompanied this code).
 *
 * You should have received a copy of the GNU General Public License
 * version 2 along with this work; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA
 *
 * Please contact Oracle Corporation, 500 Oracle Parkway, Redwood
 * Shores, CA 94065 or visit www.oracle.com if you need additional
 * information or have any questions.
 */

#include <os.h>

#include "util.h"
#include "globals.h"
#include "squawk.h"

/*---------------------------------------------------------------------------*\
 *                                  Errors                                   *
\*---------------------------------------------------------------------------*/

/**
 * Exits the VM with an error message.
 */
NORETURN void fatalVMError0(char *msg, boolean cleanup) {
	NORETURN void stopVM0(int, boolean);

	if (msg == null) {
		msg = "fatal VM error";
	}
	if (inFatalVMError_g) {
		fprintf(stderr, "Recursive call to fatalVMError(%s)\n", msg);
		fflush(stderr);
		exit(1);
	} else {
		fprintf(stderr, "%s\n", msg);
		fflush(stderr);
		inFatalVMError_g = true;
#if TRACE
		printStackTrace(msg);
#endif
	}
#ifdef FORMIC
	ar_backtrace();
#endif
	stopVM0(-1, false);
}

/**
 * Exits the VM with an error message.
 */
NORETURN void fatalVMError(char *msg) {
    fatalVMError0(msg, true);
}

/*---------------------------------------------------------------------------* \
 *                            Low level operations                           *
\*---------------------------------------------------------------------------*/

/*if[FLOATS]*/

#if !INLINE_JAVA_FP

int    addf(int l, int r)           { return f2ib(ib2f(l) + ib2f(r));           }
int    subf(int l, int r)           { return f2ib(ib2f(l) - ib2f(r));           }
int    mulf(int l, int r)           { return f2ib(ib2f(l) * ib2f(r));           }
int    divf(int l, int r)           { return f2ib(ib2f(l) / ib2f(r));           }
int    remf(int l, int r)           { return f2ib(JFP_lib_remf(ib2f(l), ib2f(r))); }
int    negf(int l)                  { return f2ib( - ib2f(l));        }
jlong  addd(jlong l, jlong r)       { return d2lb(lb2d(l) + lb2d(r));           }
jlong  subd(jlong l, jlong r)       { return d2lb(lb2d(l) - lb2d(r));           }
jlong  muld(jlong l, jlong r)       { return d2lb(JFP_lib_muld(lb2d(l), lb2d(r))); }
jlong  divd(jlong l, jlong r)       { return d2lb(JFP_lib_divd(lb2d(l), lb2d(r))); }
jlong  remd(jlong l, jlong r)       { return d2lb(JFP_lib_remd(lb2d(l), lb2d(r))); }
jlong  negd(jlong l)                { return d2lb(- lb2d(l));       }

int    i2f(int i)                   { return f2ib((float)i);                    }
jlong  i2d(int i)                   { return d2lb((double)i);                   }
int    l2f(jlong l)                 { return f2ib((float)l);                    }
jlong  l2d(jlong l)                 { return d2lb((double)l);                   }
int    f2i(int f)                   { return (int)float2l(ib2f(f));             }
jlong  f2l(int f)                   { return (jlong)float2ll(ib2f(f));          }
jlong  f2d(int f)                   { return d2lb((double)ib2f(f));             }
int    d2i(jlong l)                 { return (int)double2l(lb2d(l));            }
jlong  d2l(jlong l)                 { return (jlong)double2ll(lb2d(l));         }
int    d2f(jlong l)                 { return f2ib((float)lb2d(l));              }
#endif /* ! INLINE_JAVA_FP */

/*---------------------------------------------------------------------------*\
 *                                Math functions                             *
\*---------------------------------------------------------------------------*/

jlong math(int op, jlong rs1_l, jlong rs2_l) {
	double rs1 = lb2d(rs1_l);
	double rs2 __attribute__((unused)) = lb2d(rs2_l);
	double res = 0.0;
	switch (op) {
	case MathOpcodes_SIN:      res = JFP_lib_sin(rs1);               break;
	case MathOpcodes_COS:      res = JFP_lib_cos(rs1);               break;
	case MathOpcodes_TAN:      res = JFP_lib_tan(rs1);               break;
	case MathOpcodes_SQRT:     res = JFP_lib_sqrt(rs1);              break;
	case MathOpcodes_CEIL:     res = JFP_lib_ceil(rs1);              break;
	case MathOpcodes_FLOOR:    res = JFP_lib_floor(rs1);             break;
/*if[JDK1.0]*/
/*if[MICROBLAZE_BUILD]*/
	case MathOpcodes_ASIN:     res = __ieee754_asin(rs1);            break;
	case MathOpcodes_ACOS:     res = __ieee754_acos(rs1);            break;
	case MathOpcodes_ATAN:     res = atan(rs1);                      break;
	case MathOpcodes_EXP:      res = __ieee754_exp(rs1);             break;
	case MathOpcodes_LOG:      res = __ieee754_log(rs1);             break;
	case MathOpcodes_ATAN2:    res = __ieee754_atan2(rs1, rs2);      break;
	case MathOpcodes_POW:      res = __ieee754_pow(rs1, rs2);        break;
/*else[MICROBLAZE_BUILD]*/
//	case MathOpcodes_ASIN:     res = asin(rs1);                      break;
//	case MathOpcodes_ACOS:     res = acos(rs1);                      break;
//	case MathOpcodes_ATAN:     res = atan(rs1);                      break;
//	case MathOpcodes_EXP:      res = exp(rs1);                       break;
//	case MathOpcodes_LOG:      res = log(rs1);                       break;
//	case MathOpcodes_ATAN2:    res = atan2(rs1, rs2);                break;
//	case MathOpcodes_POW:      res = pow(rs1, rs2);                  break;
/*end[MICROBLAZE_BUILD]*/
	case MathOpcodes_IEEE_REMAINDER: {
		double q = fmod(rs1, rs2);
		double d = JFP_lib_fabs(rs2);
		if (q < 0) {
			if (-q > d / 2) {
				q += d;
			}
		} else {
			if (q > d / 2) {
				q -= d;
			}
		}
		res = q;
		break;
	}
/*end[JDK1.0]*/
	default:
		shouldNotReachHere();
	}
	return d2lb(res);
}
/*end[FLOATS]*/
