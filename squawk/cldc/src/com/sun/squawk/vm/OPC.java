/*
 * Copyright     2015, FORTH-ICS / CARV
 *                    (Foundation for Research & Technology -- Hellas,
 *                     Institute of Computer Science,
 *                     Computer Architecture & VLSI Systems Laboratory)
 * Copyright 2004-2008 Sun Microsystems, Inc. All Rights Reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER
 * 
 * This code is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2
 * only, as published by the Free Software Foundation.
 * 
 * This code is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * General Public License version 2 for more details (a copy is
 * included in the LICENSE file that accompanied this code).
 * 
 * You should have received a copy of the GNU General Public License
 * version 2 along with this work; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA
 * 
 * Please contact Sun Microsystems, Inc., 16 Network Circle, Menlo
 * Park, CA 94025 or visit www.sun.com if you need additional
 * information or have any questions.
 */

/* **** GENERATED FILE -- DO NOT EDIT ****
 *      generated by com.sun.squawk.builder.gen.OPC
 */

package com.sun.squawk.vm;

/**
 * This class defines the bytecodes used in the Squawk system.
 *
 */
public final class OPC {

    /** Non-floating point instructions. */
    public final static int
        CONST_0                = 0,
        CONST_1                = 1,
        CONST_2                = 2,
        CONST_3                = 3,
        CONST_4                = 4,
        CONST_5                = 5,
        CONST_6                = 6,
        CONST_7                = 7,
        CONST_8                = 8,
        CONST_9                = 9,
        CONST_10               = 10,
        CONST_11               = 11,
        CONST_12               = 12,
        CONST_13               = 13,
        CONST_14               = 14,
        CONST_15               = 15,
        OBJECT_0               = 16,
        OBJECT_1               = 17,
        OBJECT_2               = 18,
        OBJECT_3               = 19,
        OBJECT_4               = 20,
        OBJECT_5               = 21,
        OBJECT_6               = 22,
        OBJECT_7               = 23,
        OBJECT_8               = 24,
        OBJECT_9               = 25,
        OBJECT_10              = 26,
        OBJECT_11              = 27,
        OBJECT_12              = 28,
        OBJECT_13              = 29,
        OBJECT_14              = 30,
        OBJECT_15              = 31,
        LOAD_0                 = 32,
        LOAD_1                 = 33,
        LOAD_2                 = 34,
        LOAD_3                 = 35,
        LOAD_4                 = 36,
        LOAD_5                 = 37,
        LOAD_6                 = 38,
        LOAD_7                 = 39,
        LOAD_8                 = 40,
        LOAD_9                 = 41,
        LOAD_10                = 42,
        LOAD_11                = 43,
        LOAD_12                = 44,
        LOAD_13                = 45,
        LOAD_14                = 46,
        LOAD_15                = 47,
        STORE_0                = 48,
        STORE_1                = 49,
        STORE_2                = 50,
        STORE_3                = 51,
        STORE_4                = 52,
        STORE_5                = 53,
        STORE_6                = 54,
        STORE_7                = 55,
        STORE_8                = 56,
        STORE_9                = 57,
        STORE_10               = 58,
        STORE_11               = 59,
        STORE_12               = 60,
        STORE_13               = 61,
        STORE_14               = 62,
        STORE_15               = 63,
        LOADPARM_0             = 64,
        LOADPARM_1             = 65,
        LOADPARM_2             = 66,
        LOADPARM_3             = 67,
        LOADPARM_4             = 68,
        LOADPARM_5             = 69,
        LOADPARM_6             = 70,
        LOADPARM_7             = 71,
        WIDE_M1                = 72,
        WIDE_0                 = 73,
        WIDE_1                 = 74,
        WIDE_SHORT             = 75,
        WIDE_INT               = 76,
        ESCAPE                 = 77,
        ESCAPE_WIDE_M1         = 78,
        ESCAPE_WIDE_0          = 79,
        ESCAPE_WIDE_1          = 80,
        ESCAPE_WIDE_SHORT      = 81,
        ESCAPE_WIDE_INT        = 82,
        CATCH                  = 83,
        CONST_NULL             = 84,
        CONST_M1               = 85,
        CONST_BYTE             = 86,
        CONST_SHORT            = 87,
        CONST_CHAR             = 88,
        CONST_INT              = 89,
        CONST_LONG             = 90,
        OBJECT                 = 91,
        LOAD                   = 92,
        LOAD_I2                = 93,
        STORE                  = 94,
        STORE_I2               = 95,
        LOADPARM               = 96,
        LOADPARM_I2            = 97,
        STOREPARM              = 98,
        STOREPARM_I2           = 99,
        INC                    = 100,
        DEC                    = 101,
        INCPARM                = 102,
        DECPARM                = 103,
        GOTO                   = 104,
        IF_EQ_O                = 105,
        IF_NE_O                = 106,
        IF_CMPEQ_O             = 107,
        IF_CMPNE_O             = 108,
        IF_EQ_I                = 109,
        IF_NE_I                = 110,
        IF_LT_I                = 111,
        IF_LE_I                = 112,
        IF_GT_I                = 113,
        IF_GE_I                = 114,
        IF_CMPEQ_I             = 115,
        IF_CMPNE_I             = 116,
        IF_CMPLT_I             = 117,
        IF_CMPLE_I             = 118,
        IF_CMPGT_I             = 119,
        IF_CMPGE_I             = 120,
        IF_EQ_L                = 121,
        IF_NE_L                = 122,
        IF_LT_L                = 123,
        IF_LE_L                = 124,
        IF_GT_L                = 125,
        IF_GE_L                = 126,
        IF_CMPEQ_L             = 127,
        IF_CMPNE_L             = 128,
        IF_CMPLT_L             = 129,
        IF_CMPLE_L             = 130,
        IF_CMPGT_L             = 131,
        IF_CMPGE_L             = 132,
        GETSTATIC_I            = 133,
        GETSTATIC_O            = 134,
        GETSTATIC_L            = 135,
        CLASS_GETSTATIC_I      = 136,
        CLASS_GETSTATIC_O      = 137,
        CLASS_GETSTATIC_L      = 138,
        PUTSTATIC_I            = 139,
        PUTSTATIC_O            = 140,
        PUTSTATIC_L            = 141,
        CLASS_PUTSTATIC_I      = 142,
        CLASS_PUTSTATIC_O      = 143,
        CLASS_PUTSTATIC_L      = 144,
        GETFIELD_I             = 145,
        GETFIELD_B             = 146,
        GETFIELD_S             = 147,
        GETFIELD_C             = 148,
        GETFIELD_O             = 149,
        GETFIELD_L             = 150,
        GETFIELD0_I            = 151,
        GETFIELD0_B            = 152,
        GETFIELD0_S            = 153,
        GETFIELD0_C            = 154,
        GETFIELD0_O            = 155,
        GETFIELD0_L            = 156,
        PUTFIELD_I             = 157,
        PUTFIELD_B             = 158,
        PUTFIELD_S             = 159,
        PUTFIELD_O             = 160,
        PUTFIELD_L             = 161,
        PUTFIELD0_I            = 162,
        PUTFIELD0_B            = 163,
        PUTFIELD0_S            = 164,
        PUTFIELD0_O            = 165,
        PUTFIELD0_L            = 166,
        INVOKEVIRTUAL_I        = 167,
        INVOKEVIRTUAL_V        = 168,
        INVOKEVIRTUAL_L        = 169,
        INVOKEVIRTUAL_O        = 170,
        INVOKESTATIC_I         = 171,
        INVOKESTATIC_V         = 172,
        INVOKESTATIC_L         = 173,
        INVOKESTATIC_O         = 174,
        INVOKESUPER_I          = 175,
        INVOKESUPER_V          = 176,
        INVOKESUPER_L          = 177,
        INVOKESUPER_O          = 178,
        INVOKENATIVE_I         = 179,
        INVOKENATIVE_V         = 180,
        INVOKENATIVE_L         = 181,
        INVOKENATIVE_O         = 182,
        FINDSLOT               = 183,
        EXTEND                 = 184,
        INVOKESLOT_I           = 185,
        INVOKESLOT_V           = 186,
        INVOKESLOT_L           = 187,
        INVOKESLOT_O           = 188,
        RETURN_V               = 189,
        RETURN_I               = 190,
        RETURN_L               = 191,
        RETURN_O               = 192,
        TABLESWITCH_I          = 193,
        TABLESWITCH_S          = 194,
        EXTEND0                = 195,
        ADD_I                  = 196,
        SUB_I                  = 197,
        AND_I                  = 198,
        OR_I                   = 199,
        XOR_I                  = 200,
        SHL_I                  = 201,
        SHR_I                  = 202,
        USHR_I                 = 203,
        MUL_I                  = 204,
        DIV_I                  = 205,
        REM_I                  = 206,
        NEG_I                  = 207,
        I2B                    = 208,
        I2S                    = 209,
        I2C                    = 210,
        ADD_L                  = 211,
        SUB_L                  = 212,
        MUL_L                  = 213,
        DIV_L                  = 214,
        REM_L                  = 215,
        AND_L                  = 216,
        OR_L                   = 217,
        XOR_L                  = 218,
        NEG_L                  = 219,
        SHL_L                  = 220,
        SHR_L                  = 221,
        USHR_L                 = 222,
        L2I                    = 223,
        I2L                    = 224,
        THROW                  = 225,
        POP_1                  = 226,
        POP_2                  = 227,
        MONITORENTER           = 228,
        MONITOREXIT            = 229,
        CLASS_MONITORENTER     = 230,
        CLASS_MONITOREXIT      = 231,
        ARRAYLENGTH            = 232,
        NEW                    = 233,
        NEWARRAY               = 234,
        NEWDIMENSION           = 235,
        CLASS_CLINIT           = 236,
        BBTARGET_SYS           = 237,
        BBTARGET_APP           = 238,
        INSTANCEOF             = 239,
        CHECKCAST              = 240,
        ALOAD_I                = 241,
        ALOAD_B                = 242,
        ALOAD_S                = 243,
        ALOAD_C                = 244,
        ALOAD_O                = 245,
        ALOAD_L                = 246,
        ASTORE_I               = 247,
        ASTORE_B               = 248,
        ASTORE_S               = 249,
        ASTORE_O               = 250,
        ASTORE_L               = 251,
        LOOKUP_I               = 252,
        LOOKUP_B               = 253,
        LOOKUP_S               = 254,
        PAUSE                  = 255,
        OBJECT_WIDE            = 256,
        LOAD_WIDE              = 257,
        LOAD_I2_WIDE           = 258,
        STORE_WIDE             = 259,
        STORE_I2_WIDE          = 260,
        LOADPARM_WIDE          = 261,
        LOADPARM_I2_WIDE       = 262,
        STOREPARM_WIDE         = 263,
        STOREPARM_I2_WIDE      = 264,
        INC_WIDE               = 265,
        DEC_WIDE               = 266,
        INCPARM_WIDE           = 267,
        DECPARM_WIDE           = 268,
        GOTO_WIDE              = 269,
        IF_EQ_O_WIDE           = 270,
        IF_NE_O_WIDE           = 271,
        IF_CMPEQ_O_WIDE        = 272,
        IF_CMPNE_O_WIDE        = 273,
        IF_EQ_I_WIDE           = 274,
        IF_NE_I_WIDE           = 275,
        IF_LT_I_WIDE           = 276,
        IF_LE_I_WIDE           = 277,
        IF_GT_I_WIDE           = 278,
        IF_GE_I_WIDE           = 279,
        IF_CMPEQ_I_WIDE        = 280,
        IF_CMPNE_I_WIDE        = 281,
        IF_CMPLT_I_WIDE        = 282,
        IF_CMPLE_I_WIDE        = 283,
        IF_CMPGT_I_WIDE        = 284,
        IF_CMPGE_I_WIDE        = 285,
        IF_EQ_L_WIDE           = 286,
        IF_NE_L_WIDE           = 287,
        IF_LT_L_WIDE           = 288,
        IF_LE_L_WIDE           = 289,
        IF_GT_L_WIDE           = 290,
        IF_GE_L_WIDE           = 291,
        IF_CMPEQ_L_WIDE        = 292,
        IF_CMPNE_L_WIDE        = 293,
        IF_CMPLT_L_WIDE        = 294,
        IF_CMPLE_L_WIDE        = 295,
        IF_CMPGT_L_WIDE        = 296,
        IF_CMPGE_L_WIDE        = 297,
        GETSTATIC_I_WIDE       = 298,
        GETSTATIC_O_WIDE       = 299,
        GETSTATIC_L_WIDE       = 300,
        CLASS_GETSTATIC_I_WIDE = 301,
        CLASS_GETSTATIC_O_WIDE = 302,
        CLASS_GETSTATIC_L_WIDE = 303,
        PUTSTATIC_I_WIDE       = 304,
        PUTSTATIC_O_WIDE       = 305,
        PUTSTATIC_L_WIDE       = 306,
        CLASS_PUTSTATIC_I_WIDE = 307,
        CLASS_PUTSTATIC_O_WIDE = 308,
        CLASS_PUTSTATIC_L_WIDE = 309,
        GETFIELD_I_WIDE        = 310,
        GETFIELD_B_WIDE        = 311,
        GETFIELD_S_WIDE        = 312,
        GETFIELD_C_WIDE        = 313,
        GETFIELD_O_WIDE        = 314,
        GETFIELD_L_WIDE        = 315,
        GETFIELD0_I_WIDE       = 316,
        GETFIELD0_B_WIDE       = 317,
        GETFIELD0_S_WIDE       = 318,
        GETFIELD0_C_WIDE       = 319,
        GETFIELD0_O_WIDE       = 320,
        GETFIELD0_L_WIDE       = 321,
        PUTFIELD_I_WIDE        = 322,
        PUTFIELD_B_WIDE        = 323,
        PUTFIELD_S_WIDE        = 324,
        PUTFIELD_O_WIDE        = 325,
        PUTFIELD_L_WIDE        = 326,
        PUTFIELD0_I_WIDE       = 327,
        PUTFIELD0_B_WIDE       = 328,
        PUTFIELD0_S_WIDE       = 329,
        PUTFIELD0_O_WIDE       = 330,
        PUTFIELD0_L_WIDE       = 331,
        INVOKEVIRTUAL_I_WIDE   = 332,
        INVOKEVIRTUAL_V_WIDE   = 333,
        INVOKEVIRTUAL_L_WIDE   = 334,
        INVOKEVIRTUAL_O_WIDE   = 335,
        INVOKESTATIC_I_WIDE    = 336,
        INVOKESTATIC_V_WIDE    = 337,
        INVOKESTATIC_L_WIDE    = 338,
        INVOKESTATIC_O_WIDE    = 339,
        INVOKESUPER_I_WIDE     = 340,
        INVOKESUPER_V_WIDE     = 341,
        INVOKESUPER_L_WIDE     = 342,
        INVOKESUPER_O_WIDE     = 343,
        INVOKENATIVE_I_WIDE    = 344,
        INVOKENATIVE_V_WIDE    = 345,
        INVOKENATIVE_L_WIDE    = 346,
        INVOKENATIVE_O_WIDE    = 347,
        FINDSLOT_WIDE          = 348,
        EXTEND_WIDE            = 349;

/*if[FLOATS]*/
    /** Floating point instructions. */
    public final static int
        FCMPL                  = 350,
        FCMPG                  = 351,
        DCMPL                  = 352,
        DCMPG                  = 353,
        GETSTATIC_F            = 354,
        GETSTATIC_D            = 355,
        CLASS_GETSTATIC_F      = 356,
        CLASS_GETSTATIC_D      = 357,
        PUTSTATIC_F            = 358,
        PUTSTATIC_D            = 359,
        CLASS_PUTSTATIC_F      = 360,
        CLASS_PUTSTATIC_D      = 361,
        GETFIELD_F             = 362,
        GETFIELD_D             = 363,
        GETFIELD0_F            = 364,
        GETFIELD0_D            = 365,
        PUTFIELD_F             = 366,
        PUTFIELD_D             = 367,
        PUTFIELD0_F            = 368,
        PUTFIELD0_D            = 369,
        INVOKEVIRTUAL_F        = 370,
        INVOKEVIRTUAL_D        = 371,
        INVOKESTATIC_F         = 372,
        INVOKESTATIC_D         = 373,
        INVOKESUPER_F          = 374,
        INVOKESUPER_D          = 375,
        INVOKENATIVE_F         = 376,
        INVOKENATIVE_D         = 377,
        INVOKESLOT_F           = 378,
        INVOKESLOT_D           = 379,
        RETURN_F               = 380,
        RETURN_D               = 381,
        CONST_FLOAT            = 382,
        CONST_DOUBLE           = 383,
        ADD_F                  = 384,
        SUB_F                  = 385,
        MUL_F                  = 386,
        DIV_F                  = 387,
        REM_F                  = 388,
        NEG_F                  = 389,
        ADD_D                  = 390,
        SUB_D                  = 391,
        MUL_D                  = 392,
        DIV_D                  = 393,
        REM_D                  = 394,
        NEG_D                  = 395,
        I2F                    = 396,
        L2F                    = 397,
        F2I                    = 398,
        F2L                    = 399,
        I2D                    = 400,
        L2D                    = 401,
        F2D                    = 402,
        D2I                    = 403,
        D2L                    = 404,
        D2F                    = 405,
        ALOAD_F                = 406,
        ALOAD_D                = 407,
        ASTORE_F               = 408,
        ASTORE_D               = 409,
        GETSTATIC_F_WIDE       = 410,
        GETSTATIC_D_WIDE       = 411,
        CLASS_GETSTATIC_F_WIDE = 412,
        CLASS_GETSTATIC_D_WIDE = 413,
        PUTSTATIC_F_WIDE       = 414,
        PUTSTATIC_D_WIDE       = 415,
        CLASS_PUTSTATIC_F_WIDE = 416,
        CLASS_PUTSTATIC_D_WIDE = 417,
        GETFIELD_F_WIDE        = 418,
        GETFIELD_D_WIDE        = 419,
        GETFIELD0_F_WIDE       = 420,
        GETFIELD0_D_WIDE       = 421,
        PUTFIELD_F_WIDE        = 422,
        PUTFIELD_D_WIDE        = 423,
        PUTFIELD0_F_WIDE       = 424,
        PUTFIELD0_D_WIDE       = 425,
        INVOKEVIRTUAL_F_WIDE   = 426,
        INVOKEVIRTUAL_D_WIDE   = 427,
        INVOKESTATIC_F_WIDE    = 428,
        INVOKESTATIC_D_WIDE    = 429,
        INVOKESUPER_F_WIDE     = 430,
        INVOKESUPER_D_WIDE     = 431,
        INVOKENATIVE_F_WIDE    = 432,
        INVOKENATIVE_D_WIDE    = 433;
/*end[FLOATS]*/

    /**
     * Gets the size (in bytes) of an instruction based on a given opcode.
     *
     * @param  opcode  an instruction opcode
     * @return the size of the instruction
     * @throws IndexOutOfBoundsException if <code>opcode</code> is not valid
     * @throws IllegalArgumentException if <code>opcode</code> denotes a prefix or variable size instruction
     */
    public static int getSize(int opcode) {
        int size = (byte)sizes.charAt(opcode);
        if (size < 1) {
            throw new IllegalArgumentException();
        }
        return size;
    }

    private final static String sizes =
        /* CONST_0 */                   "\u0001" +
        /* CONST_1 */                   "\u0001" +
        /* CONST_2 */                   "\u0001" +
        /* CONST_3 */                   "\u0001" +
        /* CONST_4 */                   "\u0001" +
        /* CONST_5 */                   "\u0001" +
        /* CONST_6 */                   "\u0001" +
        /* CONST_7 */                   "\u0001" +
        /* CONST_8 */                   "\u0001" +
        /* CONST_9 */                   "\u0001" +
        /* CONST_10 */                  "\u0001" +
        /* CONST_11 */                  "\u0001" +
        /* CONST_12 */                  "\u0001" +
        /* CONST_13 */                  "\u0001" +
        /* CONST_14 */                  "\u0001" +
        /* CONST_15 */                  "\u0001" +
        /* OBJECT_0 */                  "\u0001" +
        /* OBJECT_1 */                  "\u0001" +
        /* OBJECT_2 */                  "\u0001" +
        /* OBJECT_3 */                  "\u0001" +
        /* OBJECT_4 */                  "\u0001" +
        /* OBJECT_5 */                  "\u0001" +
        /* OBJECT_6 */                  "\u0001" +
        /* OBJECT_7 */                  "\u0001" +
        /* OBJECT_8 */                  "\u0001" +
        /* OBJECT_9 */                  "\u0001" +
        /* OBJECT_10 */                 "\u0001" +
        /* OBJECT_11 */                 "\u0001" +
        /* OBJECT_12 */                 "\u0001" +
        /* OBJECT_13 */                 "\u0001" +
        /* OBJECT_14 */                 "\u0001" +
        /* OBJECT_15 */                 "\u0001" +
        /* LOAD_0 */                    "\u0001" +
        /* LOAD_1 */                    "\u0001" +
        /* LOAD_2 */                    "\u0001" +
        /* LOAD_3 */                    "\u0001" +
        /* LOAD_4 */                    "\u0001" +
        /* LOAD_5 */                    "\u0001" +
        /* LOAD_6 */                    "\u0001" +
        /* LOAD_7 */                    "\u0001" +
        /* LOAD_8 */                    "\u0001" +
        /* LOAD_9 */                    "\u0001" +
        /* LOAD_10 */                   "\u0001" +
        /* LOAD_11 */                   "\u0001" +
        /* LOAD_12 */                   "\u0001" +
        /* LOAD_13 */                   "\u0001" +
        /* LOAD_14 */                   "\u0001" +
        /* LOAD_15 */                   "\u0001" +
        /* STORE_0 */                   "\u0001" +
        /* STORE_1 */                   "\u0001" +
        /* STORE_2 */                   "\u0001" +
        /* STORE_3 */                   "\u0001" +
        /* STORE_4 */                   "\u0001" +
        /* STORE_5 */                   "\u0001" +
        /* STORE_6 */                   "\u0001" +
        /* STORE_7 */                   "\u0001" +
        /* STORE_8 */                   "\u0001" +
        /* STORE_9 */                   "\u0001" +
        /* STORE_10 */                  "\u0001" +
        /* STORE_11 */                  "\u0001" +
        /* STORE_12 */                  "\u0001" +
        /* STORE_13 */                  "\u0001" +
        /* STORE_14 */                  "\u0001" +
        /* STORE_15 */                  "\u0001" +
        /* LOADPARM_0 */                "\u0001" +
        /* LOADPARM_1 */                "\u0001" +
        /* LOADPARM_2 */                "\u0001" +
        /* LOADPARM_3 */                "\u0001" +
        /* LOADPARM_4 */                "\u0001" +
        /* LOADPARM_5 */                "\u0001" +
        /* LOADPARM_6 */                "\u0001" +
        /* LOADPARM_7 */                "\u0001" +
        /* WIDE_M1 */                   "\u0000" +
        /* WIDE_0 */                    "\u0000" +
        /* WIDE_1 */                    "\u0000" +
        /* WIDE_SHORT */                "\u0000" +
        /* WIDE_INT */                  "\u0000" +
        /* ESCAPE */                    "\u0000" +
        /* ESCAPE_WIDE_M1 */            "\u0000" +
        /* ESCAPE_WIDE_0 */             "\u0000" +
        /* ESCAPE_WIDE_1 */             "\u0000" +
        /* ESCAPE_WIDE_SHORT */         "\u0000" +
        /* ESCAPE_WIDE_INT */           "\u0000" +
        /* CATCH */                     "\u0001" +
        /* CONST_NULL */                "\u0001" +
        /* CONST_M1 */                  "\u0001" +
        /* CONST_BYTE */                "\u0002" +
        /* CONST_SHORT */               "\u0003" +
        /* CONST_CHAR */                "\u0003" +
        /* CONST_INT */                 "\u0005" +
        /* CONST_LONG */                "\u0009" +
        /* OBJECT */                    "\u0002" +
        /* LOAD */                      "\u0002" +
        /* LOAD_I2 */                   "\u0002" +
        /* STORE */                     "\u0002" +
        /* STORE_I2 */                  "\u0002" +
        /* LOADPARM */                  "\u0002" +
        /* LOADPARM_I2 */               "\u0002" +
        /* STOREPARM */                 "\u0002" +
        /* STOREPARM_I2 */              "\u0002" +
        /* INC */                       "\u0002" +
        /* DEC */                       "\u0002" +
        /* INCPARM */                   "\u0002" +
        /* DECPARM */                   "\u0002" +
        /* GOTO */                      "\u0002" +
        /* IF_EQ_O */                   "\u0002" +
        /* IF_NE_O */                   "\u0002" +
        /* IF_CMPEQ_O */                "\u0002" +
        /* IF_CMPNE_O */                "\u0002" +
        /* IF_EQ_I */                   "\u0002" +
        /* IF_NE_I */                   "\u0002" +
        /* IF_LT_I */                   "\u0002" +
        /* IF_LE_I */                   "\u0002" +
        /* IF_GT_I */                   "\u0002" +
        /* IF_GE_I */                   "\u0002" +
        /* IF_CMPEQ_I */                "\u0002" +
        /* IF_CMPNE_I */                "\u0002" +
        /* IF_CMPLT_I */                "\u0002" +
        /* IF_CMPLE_I */                "\u0002" +
        /* IF_CMPGT_I */                "\u0002" +
        /* IF_CMPGE_I */                "\u0002" +
        /* IF_EQ_L */                   "\u0002" +
        /* IF_NE_L */                   "\u0002" +
        /* IF_LT_L */                   "\u0002" +
        /* IF_LE_L */                   "\u0002" +
        /* IF_GT_L */                   "\u0002" +
        /* IF_GE_L */                   "\u0002" +
        /* IF_CMPEQ_L */                "\u0002" +
        /* IF_CMPNE_L */                "\u0002" +
        /* IF_CMPLT_L */                "\u0002" +
        /* IF_CMPLE_L */                "\u0002" +
        /* IF_CMPGT_L */                "\u0002" +
        /* IF_CMPGE_L */                "\u0002" +
        /* GETSTATIC_I */               "\u0002" +
        /* GETSTATIC_O */               "\u0002" +
        /* GETSTATIC_L */               "\u0002" +
        /* CLASS_GETSTATIC_I */         "\u0002" +
        /* CLASS_GETSTATIC_O */         "\u0002" +
        /* CLASS_GETSTATIC_L */         "\u0002" +
        /* PUTSTATIC_I */               "\u0002" +
        /* PUTSTATIC_O */               "\u0002" +
        /* PUTSTATIC_L */               "\u0002" +
        /* CLASS_PUTSTATIC_I */         "\u0002" +
        /* CLASS_PUTSTATIC_O */         "\u0002" +
        /* CLASS_PUTSTATIC_L */         "\u0002" +
        /* GETFIELD_I */                "\u0002" +
        /* GETFIELD_B */                "\u0002" +
        /* GETFIELD_S */                "\u0002" +
        /* GETFIELD_C */                "\u0002" +
        /* GETFIELD_O */                "\u0002" +
        /* GETFIELD_L */                "\u0002" +
        /* GETFIELD0_I */               "\u0002" +
        /* GETFIELD0_B */               "\u0002" +
        /* GETFIELD0_S */               "\u0002" +
        /* GETFIELD0_C */               "\u0002" +
        /* GETFIELD0_O */               "\u0002" +
        /* GETFIELD0_L */               "\u0002" +
        /* PUTFIELD_I */                "\u0002" +
        /* PUTFIELD_B */                "\u0002" +
        /* PUTFIELD_S */                "\u0002" +
        /* PUTFIELD_O */                "\u0002" +
        /* PUTFIELD_L */                "\u0002" +
        /* PUTFIELD0_I */               "\u0002" +
        /* PUTFIELD0_B */               "\u0002" +
        /* PUTFIELD0_S */               "\u0002" +
        /* PUTFIELD0_O */               "\u0002" +
        /* PUTFIELD0_L */               "\u0002" +
        /* INVOKEVIRTUAL_I */           "\u0002" +
        /* INVOKEVIRTUAL_V */           "\u0002" +
        /* INVOKEVIRTUAL_L */           "\u0002" +
        /* INVOKEVIRTUAL_O */           "\u0002" +
        /* INVOKESTATIC_I */            "\u0002" +
        /* INVOKESTATIC_V */            "\u0002" +
        /* INVOKESTATIC_L */            "\u0002" +
        /* INVOKESTATIC_O */            "\u0002" +
        /* INVOKESUPER_I */             "\u0002" +
        /* INVOKESUPER_V */             "\u0002" +
        /* INVOKESUPER_L */             "\u0002" +
        /* INVOKESUPER_O */             "\u0002" +
        /* INVOKENATIVE_I */            "\u0002" +
        /* INVOKENATIVE_V */            "\u0002" +
        /* INVOKENATIVE_L */            "\u0002" +
        /* INVOKENATIVE_O */            "\u0002" +
        /* FINDSLOT */                  "\u0002" +
        /* EXTEND */                    "\u0002" +
        /* INVOKESLOT_I */              "\u0001" +
        /* INVOKESLOT_V */              "\u0001" +
        /* INVOKESLOT_L */              "\u0001" +
        /* INVOKESLOT_O */              "\u0001" +
        /* RETURN_V */                  "\u0001" +
        /* RETURN_I */                  "\u0001" +
        /* RETURN_L */                  "\u0001" +
        /* RETURN_O */                  "\u0001" +
        /* TABLESWITCH_I */             "\u00ff" +
        /* TABLESWITCH_S */             "\u00ff" +
        /* EXTEND0 */                   "\u0001" +
        /* ADD_I */                     "\u0001" +
        /* SUB_I */                     "\u0001" +
        /* AND_I */                     "\u0001" +
        /* OR_I */                      "\u0001" +
        /* XOR_I */                     "\u0001" +
        /* SHL_I */                     "\u0001" +
        /* SHR_I */                     "\u0001" +
        /* USHR_I */                    "\u0001" +
        /* MUL_I */                     "\u0001" +
        /* DIV_I */                     "\u0001" +
        /* REM_I */                     "\u0001" +
        /* NEG_I */                     "\u0001" +
        /* I2B */                       "\u0001" +
        /* I2S */                       "\u0001" +
        /* I2C */                       "\u0001" +
        /* ADD_L */                     "\u0001" +
        /* SUB_L */                     "\u0001" +
        /* MUL_L */                     "\u0001" +
        /* DIV_L */                     "\u0001" +
        /* REM_L */                     "\u0001" +
        /* AND_L */                     "\u0001" +
        /* OR_L */                      "\u0001" +
        /* XOR_L */                     "\u0001" +
        /* NEG_L */                     "\u0001" +
        /* SHL_L */                     "\u0001" +
        /* SHR_L */                     "\u0001" +
        /* USHR_L */                    "\u0001" +
        /* L2I */                       "\u0001" +
        /* I2L */                       "\u0001" +
        /* THROW */                     "\u0001" +
        /* POP_1 */                     "\u0001" +
        /* POP_2 */                     "\u0001" +
        /* MONITORENTER */              "\u0001" +
        /* MONITOREXIT */               "\u0001" +
        /* CLASS_MONITORENTER */        "\u0001" +
        /* CLASS_MONITOREXIT */         "\u0001" +
        /* ARRAYLENGTH */               "\u0001" +
        /* NEW */                       "\u0001" +
        /* NEWARRAY */                  "\u0001" +
        /* NEWDIMENSION */              "\u0001" +
        /* CLASS_CLINIT */              "\u0001" +
        /* BBTARGET_SYS */              "\u0001" +
        /* BBTARGET_APP */              "\u0001" +
        /* INSTANCEOF */                "\u0001" +
        /* CHECKCAST */                 "\u0001" +
        /* ALOAD_I */                   "\u0001" +
        /* ALOAD_B */                   "\u0001" +
        /* ALOAD_S */                   "\u0001" +
        /* ALOAD_C */                   "\u0001" +
        /* ALOAD_O */                   "\u0001" +
        /* ALOAD_L */                   "\u0001" +
        /* ASTORE_I */                  "\u0001" +
        /* ASTORE_B */                  "\u0001" +
        /* ASTORE_S */                  "\u0001" +
        /* ASTORE_O */                  "\u0001" +
        /* ASTORE_L */                  "\u0001" +
        /* LOOKUP_I */                  "\u0001" +
        /* LOOKUP_B */                  "\u0001" +
        /* LOOKUP_S */                  "\u0001" +
        /* PAUSE */                     "\u0001" +
        /* OBJECT_WIDE */               "\u0002" +
        /* LOAD_WIDE */                 "\u0002" +
        /* LOAD_I2_WIDE */              "\u0002" +
        /* STORE_WIDE */                "\u0002" +
        /* STORE_I2_WIDE */             "\u0002" +
        /* LOADPARM_WIDE */             "\u0002" +
        /* LOADPARM_I2_WIDE */          "\u0002" +
        /* STOREPARM_WIDE */            "\u0002" +
        /* STOREPARM_I2_WIDE */         "\u0002" +
        /* INC_WIDE */                  "\u0002" +
        /* DEC_WIDE */                  "\u0002" +
        /* INCPARM_WIDE */              "\u0002" +
        /* DECPARM_WIDE */              "\u0002" +
        /* GOTO_WIDE */                 "\u0002" +
        /* IF_EQ_O_WIDE */              "\u0002" +
        /* IF_NE_O_WIDE */              "\u0002" +
        /* IF_CMPEQ_O_WIDE */           "\u0002" +
        /* IF_CMPNE_O_WIDE */           "\u0002" +
        /* IF_EQ_I_WIDE */              "\u0002" +
        /* IF_NE_I_WIDE */              "\u0002" +
        /* IF_LT_I_WIDE */              "\u0002" +
        /* IF_LE_I_WIDE */              "\u0002" +
        /* IF_GT_I_WIDE */              "\u0002" +
        /* IF_GE_I_WIDE */              "\u0002" +
        /* IF_CMPEQ_I_WIDE */           "\u0002" +
        /* IF_CMPNE_I_WIDE */           "\u0002" +
        /* IF_CMPLT_I_WIDE */           "\u0002" +
        /* IF_CMPLE_I_WIDE */           "\u0002" +
        /* IF_CMPGT_I_WIDE */           "\u0002" +
        /* IF_CMPGE_I_WIDE */           "\u0002" +
        /* IF_EQ_L_WIDE */              "\u0002" +
        /* IF_NE_L_WIDE */              "\u0002" +
        /* IF_LT_L_WIDE */              "\u0002" +
        /* IF_LE_L_WIDE */              "\u0002" +
        /* IF_GT_L_WIDE */              "\u0002" +
        /* IF_GE_L_WIDE */              "\u0002" +
        /* IF_CMPEQ_L_WIDE */           "\u0002" +
        /* IF_CMPNE_L_WIDE */           "\u0002" +
        /* IF_CMPLT_L_WIDE */           "\u0002" +
        /* IF_CMPLE_L_WIDE */           "\u0002" +
        /* IF_CMPGT_L_WIDE */           "\u0002" +
        /* IF_CMPGE_L_WIDE */           "\u0002" +
        /* GETSTATIC_I_WIDE */          "\u0002" +
        /* GETSTATIC_O_WIDE */          "\u0002" +
        /* GETSTATIC_L_WIDE */          "\u0002" +
        /* CLASS_GETSTATIC_I_WIDE */    "\u0002" +
        /* CLASS_GETSTATIC_O_WIDE */    "\u0002" +
        /* CLASS_GETSTATIC_L_WIDE */    "\u0002" +
        /* PUTSTATIC_I_WIDE */          "\u0002" +
        /* PUTSTATIC_O_WIDE */          "\u0002" +
        /* PUTSTATIC_L_WIDE */          "\u0002" +
        /* CLASS_PUTSTATIC_I_WIDE */    "\u0002" +
        /* CLASS_PUTSTATIC_O_WIDE */    "\u0002" +
        /* CLASS_PUTSTATIC_L_WIDE */    "\u0002" +
        /* GETFIELD_I_WIDE */           "\u0002" +
        /* GETFIELD_B_WIDE */           "\u0002" +
        /* GETFIELD_S_WIDE */           "\u0002" +
        /* GETFIELD_C_WIDE */           "\u0002" +
        /* GETFIELD_O_WIDE */           "\u0002" +
        /* GETFIELD_L_WIDE */           "\u0002" +
        /* GETFIELD0_I_WIDE */          "\u0002" +
        /* GETFIELD0_B_WIDE */          "\u0002" +
        /* GETFIELD0_S_WIDE */          "\u0002" +
        /* GETFIELD0_C_WIDE */          "\u0002" +
        /* GETFIELD0_O_WIDE */          "\u0002" +
        /* GETFIELD0_L_WIDE */          "\u0002" +
        /* PUTFIELD_I_WIDE */           "\u0002" +
        /* PUTFIELD_B_WIDE */           "\u0002" +
        /* PUTFIELD_S_WIDE */           "\u0002" +
        /* PUTFIELD_O_WIDE */           "\u0002" +
        /* PUTFIELD_L_WIDE */           "\u0002" +
        /* PUTFIELD0_I_WIDE */          "\u0002" +
        /* PUTFIELD0_B_WIDE */          "\u0002" +
        /* PUTFIELD0_S_WIDE */          "\u0002" +
        /* PUTFIELD0_O_WIDE */          "\u0002" +
        /* PUTFIELD0_L_WIDE */          "\u0002" +
        /* INVOKEVIRTUAL_I_WIDE */      "\u0002" +
        /* INVOKEVIRTUAL_V_WIDE */      "\u0002" +
        /* INVOKEVIRTUAL_L_WIDE */      "\u0002" +
        /* INVOKEVIRTUAL_O_WIDE */      "\u0002" +
        /* INVOKESTATIC_I_WIDE */       "\u0002" +
        /* INVOKESTATIC_V_WIDE */       "\u0002" +
        /* INVOKESTATIC_L_WIDE */       "\u0002" +
        /* INVOKESTATIC_O_WIDE */       "\u0002" +
        /* INVOKESUPER_I_WIDE */        "\u0002" +
        /* INVOKESUPER_V_WIDE */        "\u0002" +
        /* INVOKESUPER_L_WIDE */        "\u0002" +
        /* INVOKESUPER_O_WIDE */        "\u0002" +
        /* INVOKENATIVE_I_WIDE */       "\u0002" +
        /* INVOKENATIVE_V_WIDE */       "\u0002" +
        /* INVOKENATIVE_L_WIDE */       "\u0002" +
        /* INVOKENATIVE_O_WIDE */       "\u0002" +
        /* FINDSLOT_WIDE */             "\u0002" +
        /* EXTEND_WIDE */               "\u0002" +
/*if[FLOATS]*/
        /* FCMPL */                     "\u0001" +
        /* FCMPG */                     "\u0001" +
        /* DCMPL */                     "\u0001" +
        /* DCMPG */                     "\u0001" +
        /* GETSTATIC_F */               "\u0002" +
        /* GETSTATIC_D */               "\u0002" +
        /* CLASS_GETSTATIC_F */         "\u0002" +
        /* CLASS_GETSTATIC_D */         "\u0002" +
        /* PUTSTATIC_F */               "\u0002" +
        /* PUTSTATIC_D */               "\u0002" +
        /* CLASS_PUTSTATIC_F */         "\u0002" +
        /* CLASS_PUTSTATIC_D */         "\u0002" +
        /* GETFIELD_F */                "\u0002" +
        /* GETFIELD_D */                "\u0002" +
        /* GETFIELD0_F */               "\u0002" +
        /* GETFIELD0_D */               "\u0002" +
        /* PUTFIELD_F */                "\u0002" +
        /* PUTFIELD_D */                "\u0002" +
        /* PUTFIELD0_F */               "\u0002" +
        /* PUTFIELD0_D */               "\u0002" +
        /* INVOKEVIRTUAL_F */           "\u0002" +
        /* INVOKEVIRTUAL_D */           "\u0002" +
        /* INVOKESTATIC_F */            "\u0002" +
        /* INVOKESTATIC_D */            "\u0002" +
        /* INVOKESUPER_F */             "\u0002" +
        /* INVOKESUPER_D */             "\u0002" +
        /* INVOKENATIVE_F */            "\u0002" +
        /* INVOKENATIVE_D */            "\u0002" +
        /* INVOKESLOT_F */              "\u0001" +
        /* INVOKESLOT_D */              "\u0001" +
        /* RETURN_F */                  "\u0001" +
        /* RETURN_D */                  "\u0001" +
        /* CONST_FLOAT */               "\u0005" +
        /* CONST_DOUBLE */              "\u0009" +
        /* ADD_F */                     "\u0001" +
        /* SUB_F */                     "\u0001" +
        /* MUL_F */                     "\u0001" +
        /* DIV_F */                     "\u0001" +
        /* REM_F */                     "\u0001" +
        /* NEG_F */                     "\u0001" +
        /* ADD_D */                     "\u0001" +
        /* SUB_D */                     "\u0001" +
        /* MUL_D */                     "\u0001" +
        /* DIV_D */                     "\u0001" +
        /* REM_D */                     "\u0001" +
        /* NEG_D */                     "\u0001" +
        /* I2F */                       "\u0001" +
        /* L2F */                       "\u0001" +
        /* F2I */                       "\u0001" +
        /* F2L */                       "\u0001" +
        /* I2D */                       "\u0001" +
        /* L2D */                       "\u0001" +
        /* F2D */                       "\u0001" +
        /* D2I */                       "\u0001" +
        /* D2L */                       "\u0001" +
        /* D2F */                       "\u0001" +
        /* ALOAD_F */                   "\u0001" +
        /* ALOAD_D */                   "\u0001" +
        /* ASTORE_F */                  "\u0001" +
        /* ASTORE_D */                  "\u0001" +
        /* GETSTATIC_F_WIDE */          "\u0002" +
        /* GETSTATIC_D_WIDE */          "\u0002" +
        /* CLASS_GETSTATIC_F_WIDE */    "\u0002" +
        /* CLASS_GETSTATIC_D_WIDE */    "\u0002" +
        /* PUTSTATIC_F_WIDE */          "\u0002" +
        /* PUTSTATIC_D_WIDE */          "\u0002" +
        /* CLASS_PUTSTATIC_F_WIDE */    "\u0002" +
        /* CLASS_PUTSTATIC_D_WIDE */    "\u0002" +
        /* GETFIELD_F_WIDE */           "\u0002" +
        /* GETFIELD_D_WIDE */           "\u0002" +
        /* GETFIELD0_F_WIDE */          "\u0002" +
        /* GETFIELD0_D_WIDE */          "\u0002" +
        /* PUTFIELD_F_WIDE */           "\u0002" +
        /* PUTFIELD_D_WIDE */           "\u0002" +
        /* PUTFIELD0_F_WIDE */          "\u0002" +
        /* PUTFIELD0_D_WIDE */          "\u0002" +
        /* INVOKEVIRTUAL_F_WIDE */      "\u0002" +
        /* INVOKEVIRTUAL_D_WIDE */      "\u0002" +
        /* INVOKESTATIC_F_WIDE */       "\u0002" +
        /* INVOKESTATIC_D_WIDE */       "\u0002" +
        /* INVOKESUPER_F_WIDE */        "\u0002" +
        /* INVOKESUPER_D_WIDE */        "\u0002" +
        /* INVOKENATIVE_F_WIDE */       "\u0002" +
        /* INVOKENATIVE_D_WIDE */       "\u0002" +
/*end[FLOATS]*/
       "";
    public static class Properties {
        /** The number of non-floating point instructions. */
        public static final int NON_FLOAT_BYTECODE_COUNT = 350;

        /** The number of floating point instructions. */
        public static final int FLOAT_BYTECODE_COUNT = /*VAL*/false/*FLOATS*/ ? 84 : 0;

        /** The total number of instructions. */
        public static final int BYTECODE_COUNT = NON_FLOAT_BYTECODE_COUNT + FLOAT_BYTECODE_COUNT;

        /** The delta that is applied to an opcode < 256 to get the widened version of the opcode. */
        public static final int WIDE_DELTA = 165;

        /** The delta that is applied to an opcode >= 256 to get the widened version of the opcode. */
        public static final int ESCAPE_WIDE_DELTA = 56;
    }

    /**
     * Determines if a given opcode has a wide version.
     *
     * @param  opcode  an instruction opcode
     * @return true if there is a wide version of <code>opcode</code>
     * @throws IndexOutOfBoundsException if <code>opcode</code> is not valid
     */
    public static boolean hasWide(int opcode) {
        int unit = wideTable.charAt(opcode / 8);
        return (unit & (1 << (opcode % 8))) != 0;
    }

    private final static String wideTable = "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u00f8\u00ff\u00ff\u00ff\u00ff\u00ff\u00ff\u00ff\u00ff\u00ff\u00ff\u00ff\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u00fc\u00ff\u00ff\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000";
}
