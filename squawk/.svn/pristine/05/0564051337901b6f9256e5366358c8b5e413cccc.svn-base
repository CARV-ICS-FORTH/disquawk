/*
 * Copyright 2004-2008 Sun Microsystems, Inc. All Rights Reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER
 * 
 * This code is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2
 * only, as published by the Free Software Foundation.
 * 
 * This code is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * General Public License version 2 for more details (a copy is
 * included in the LICENSE file that accompanied this code).
 * 
 * You should have received a copy of the GNU General Public License
 * version 2 along with this work; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA
 * 
 * Please contact Sun Microsystems, Inc., 16 Network Circle, Menlo
 * Park, CA 94025 or visit www.sun.com if you need additional
 * information or have any questions.
 */

/* **** GENERATED FILE -- DO NOT EDIT ****
 *      generated by com.sun.squawk.builder.gen.SwitchDotC
 */


        switch(opcode) {
            case OPC_CONST_0:                     iparmNone();
                                                  do_const_n(0);                     break;
            case OPC_CONST_1:                     iparmNone();
                                                  do_const_n(1);                     break;
            case OPC_CONST_2:                     iparmNone();
                                                  do_const_n(2);                     break;
            case OPC_CONST_3:                     iparmNone();
                                                  do_const_n(3);                     break;
            case OPC_CONST_4:                     iparmNone();
                                                  do_const_n(4);                     break;
            case OPC_CONST_5:                     iparmNone();
                                                  do_const_n(5);                     break;
            case OPC_CONST_6:                     iparmNone();
                                                  do_const_n(6);                     break;
            case OPC_CONST_7:                     iparmNone();
                                                  do_const_n(7);                     break;
            case OPC_CONST_8:                     iparmNone();
                                                  do_const_n(8);                     break;
            case OPC_CONST_9:                     iparmNone();
                                                  do_const_n(9);                     break;
            case OPC_CONST_10:                    iparmNone();
                                                  do_const_n(10);                    break;
            case OPC_CONST_11:                    iparmNone();
                                                  do_const_n(11);                    break;
            case OPC_CONST_12:                    iparmNone();
                                                  do_const_n(12);                    break;
            case OPC_CONST_13:                    iparmNone();
                                                  do_const_n(13);                    break;
            case OPC_CONST_14:                    iparmNone();
                                                  do_const_n(14);                    break;
            case OPC_CONST_15:                    iparmNone();
                                                  do_const_n(15);                    break;
            case OPC_OBJECT_0:                    iparmNone();
                                                  do_object_n(0);                    break;
            case OPC_OBJECT_1:                    iparmNone();
                                                  do_object_n(1);                    break;
            case OPC_OBJECT_2:                    iparmNone();
                                                  do_object_n(2);                    break;
            case OPC_OBJECT_3:                    iparmNone();
                                                  do_object_n(3);                    break;
            case OPC_OBJECT_4:                    iparmNone();
                                                  do_object_n(4);                    break;
            case OPC_OBJECT_5:                    iparmNone();
                                                  do_object_n(5);                    break;
            case OPC_OBJECT_6:                    iparmNone();
                                                  do_object_n(6);                    break;
            case OPC_OBJECT_7:                    iparmNone();
                                                  do_object_n(7);                    break;
            case OPC_OBJECT_8:                    iparmNone();
                                                  do_object_n(8);                    break;
            case OPC_OBJECT_9:                    iparmNone();
                                                  do_object_n(9);                    break;
            case OPC_OBJECT_10:                   iparmNone();
                                                  do_object_n(10);                   break;
            case OPC_OBJECT_11:                   iparmNone();
                                                  do_object_n(11);                   break;
            case OPC_OBJECT_12:                   iparmNone();
                                                  do_object_n(12);                   break;
            case OPC_OBJECT_13:                   iparmNone();
                                                  do_object_n(13);                   break;
            case OPC_OBJECT_14:                   iparmNone();
                                                  do_object_n(14);                   break;
            case OPC_OBJECT_15:                   iparmNone();
                                                  do_object_n(15);                   break;
            case OPC_LOAD_0:                      iparmNone();
                                                  do_load_n(0);                      break;
            case OPC_LOAD_1:                      iparmNone();
                                                  do_load_n(1);                      break;
            case OPC_LOAD_2:                      iparmNone();
                                                  do_load_n(2);                      break;
            case OPC_LOAD_3:                      iparmNone();
                                                  do_load_n(3);                      break;
            case OPC_LOAD_4:                      iparmNone();
                                                  do_load_n(4);                      break;
            case OPC_LOAD_5:                      iparmNone();
                                                  do_load_n(5);                      break;
            case OPC_LOAD_6:                      iparmNone();
                                                  do_load_n(6);                      break;
            case OPC_LOAD_7:                      iparmNone();
                                                  do_load_n(7);                      break;
            case OPC_LOAD_8:                      iparmNone();
                                                  do_load_n(8);                      break;
            case OPC_LOAD_9:                      iparmNone();
                                                  do_load_n(9);                      break;
            case OPC_LOAD_10:                     iparmNone();
                                                  do_load_n(10);                     break;
            case OPC_LOAD_11:                     iparmNone();
                                                  do_load_n(11);                     break;
            case OPC_LOAD_12:                     iparmNone();
                                                  do_load_n(12);                     break;
            case OPC_LOAD_13:                     iparmNone();
                                                  do_load_n(13);                     break;
            case OPC_LOAD_14:                     iparmNone();
                                                  do_load_n(14);                     break;
            case OPC_LOAD_15:                     iparmNone();
                                                  do_load_n(15);                     break;
            case OPC_STORE_0:                     iparmNone();
                                                  do_store_n(0);                     break;
            case OPC_STORE_1:                     iparmNone();
                                                  do_store_n(1);                     break;
            case OPC_STORE_2:                     iparmNone();
                                                  do_store_n(2);                     break;
            case OPC_STORE_3:                     iparmNone();
                                                  do_store_n(3);                     break;
            case OPC_STORE_4:                     iparmNone();
                                                  do_store_n(4);                     break;
            case OPC_STORE_5:                     iparmNone();
                                                  do_store_n(5);                     break;
            case OPC_STORE_6:                     iparmNone();
                                                  do_store_n(6);                     break;
            case OPC_STORE_7:                     iparmNone();
                                                  do_store_n(7);                     break;
            case OPC_STORE_8:                     iparmNone();
                                                  do_store_n(8);                     break;
            case OPC_STORE_9:                     iparmNone();
                                                  do_store_n(9);                     break;
            case OPC_STORE_10:                    iparmNone();
                                                  do_store_n(10);                    break;
            case OPC_STORE_11:                    iparmNone();
                                                  do_store_n(11);                    break;
            case OPC_STORE_12:                    iparmNone();
                                                  do_store_n(12);                    break;
            case OPC_STORE_13:                    iparmNone();
                                                  do_store_n(13);                    break;
            case OPC_STORE_14:                    iparmNone();
                                                  do_store_n(14);                    break;
            case OPC_STORE_15:                    iparmNone();
                                                  do_store_n(15);                    break;
            case OPC_LOADPARM_0:                  iparmNone();
                                                  do_loadparm_n(0);                  break;
            case OPC_LOADPARM_1:                  iparmNone();
                                                  do_loadparm_n(1);                  break;
            case OPC_LOADPARM_2:                  iparmNone();
                                                  do_loadparm_n(2);                  break;
            case OPC_LOADPARM_3:                  iparmNone();
                                                  do_loadparm_n(3);                  break;
            case OPC_LOADPARM_4:                  iparmNone();
                                                  do_loadparm_n(4);                  break;
            case OPC_LOADPARM_5:                  iparmNone();
                                                  do_loadparm_n(5);                  break;
            case OPC_LOADPARM_6:                  iparmNone();
                                                  do_loadparm_n(6);                  break;
            case OPC_LOADPARM_7:                  iparmNone();
                                                  do_loadparm_n(7);                  break;
            case OPC_WIDE_M1:                     iparmNone();
                                                  do_wide_n(-1);                     break;
            case OPC_WIDE_0:                      iparmNone();
                                                  do_wide_n(0);                      break;
            case OPC_WIDE_1:                      iparmNone();
                                                  do_wide_n(1);                      break;
            case OPC_WIDE_SHORT:                  iparmNone();
                                                  do_wide_short();                   break;
            case OPC_WIDE_INT:                    iparmNone();
                                                  do_wide_int();                     break;
            case OPC_ESCAPE:                      iparmNone();
                                                  do_escape();                       break;
            case OPC_ESCAPE_WIDE_M1:              iparmNone();
                                                  do_escape_wide_n(-1);              break;
            case OPC_ESCAPE_WIDE_0:               iparmNone();
                                                  do_escape_wide_n(0);               break;
            case OPC_ESCAPE_WIDE_1:               iparmNone();
                                                  do_escape_wide_n(1);               break;
            case OPC_ESCAPE_WIDE_SHORT:           iparmNone();
                                                  do_escape_wide_short();            break;
            case OPC_ESCAPE_WIDE_INT:             iparmNone();
                                                  do_escape_wide_int();              break;
            case OPC_CATCH:                       iparmNone();
                                                  do_catch();                        break;
            case OPC_CONST_NULL:                  iparmNone();
                                                  do_const_null();                   break;
            case OPC_CONST_M1:                    iparmNone();
                                                  do_const_n(-1);                    break;
            case OPC_CONST_BYTE:                  iparmNone();
                                                  do_const_byte();                   break;
            case OPC_CONST_SHORT:                 iparmNone();
                                                  do_const_short();                  break;
            case OPC_CONST_CHAR:                  iparmNone();
                                                  do_const_char();                   break;
            case OPC_CONST_INT:                   iparmNone();
                                                  do_const_int();                    break;
            case OPC_CONST_LONG:                  iparmNone();
                                                  do_const_long();                   break;
            case OPC_OBJECT:                      iparmUByte();
            case OPC_OBJECT_WIDE:                 do_object();                       break;
            case OPC_LOAD:                        iparmUByte();
            case OPC_LOAD_WIDE:                   do_load();                         break;
            case OPC_LOAD_I2:                     iparmUByte();
            case OPC_LOAD_I2_WIDE:                do_load_i2();                      break;
            case OPC_STORE:                       iparmUByte();
            case OPC_STORE_WIDE:                  do_store();                        break;
            case OPC_STORE_I2:                    iparmUByte();
            case OPC_STORE_I2_WIDE:               do_store_i2();                     break;
            case OPC_LOADPARM:                    iparmUByte();
            case OPC_LOADPARM_WIDE:               do_loadparm();                     break;
            case OPC_LOADPARM_I2:                 iparmUByte();
            case OPC_LOADPARM_I2_WIDE:            do_loadparm_i2();                  break;
            case OPC_STOREPARM:                   iparmUByte();
            case OPC_STOREPARM_WIDE:              do_storeparm();                    break;
            case OPC_STOREPARM_I2:                iparmUByte();
            case OPC_STOREPARM_I2_WIDE:           do_storeparm_i2();                 break;
            case OPC_INC:                         iparmUByte();
            case OPC_INC_WIDE:                    do_inc();                          break;
            case OPC_DEC:                         iparmUByte();
            case OPC_DEC_WIDE:                    do_dec();                          break;
            case OPC_INCPARM:                     iparmUByte();
            case OPC_INCPARM_WIDE:                do_incparm();                      break;
            case OPC_DECPARM:                     iparmUByte();
            case OPC_DECPARM_WIDE:                do_decparm();                      break;
            case OPC_GOTO:                        iparmByte();
            case OPC_GOTO_WIDE:                   do_goto();                         break;
            case OPC_IF_EQ_O:                     iparmByte();
            case OPC_IF_EQ_O_WIDE:                do_if_eq_o(true);                  break;
            case OPC_IF_NE_O:                     iparmByte();
            case OPC_IF_NE_O_WIDE:                do_if_ne_o(true);                  break;
            case OPC_IF_CMPEQ_O:                  iparmByte();
            case OPC_IF_CMPEQ_O_WIDE:             do_if_eq_o(false);                 break;
            case OPC_IF_CMPNE_O:                  iparmByte();
            case OPC_IF_CMPNE_O_WIDE:             do_if_ne_o(false);                 break;
            case OPC_IF_EQ_I:                     iparmByte();
            case OPC_IF_EQ_I_WIDE:                do_if_eq_i(true);                  break;
            case OPC_IF_NE_I:                     iparmByte();
            case OPC_IF_NE_I_WIDE:                do_if_ne_i(true);                  break;
            case OPC_IF_LT_I:                     iparmByte();
            case OPC_IF_LT_I_WIDE:                do_if_lt_i(true);                  break;
            case OPC_IF_LE_I:                     iparmByte();
            case OPC_IF_LE_I_WIDE:                do_if_le_i(true);                  break;
            case OPC_IF_GT_I:                     iparmByte();
            case OPC_IF_GT_I_WIDE:                do_if_gt_i(true);                  break;
            case OPC_IF_GE_I:                     iparmByte();
            case OPC_IF_GE_I_WIDE:                do_if_ge_i(true);                  break;
            case OPC_IF_CMPEQ_I:                  iparmByte();
            case OPC_IF_CMPEQ_I_WIDE:             do_if_eq_i(false);                 break;
            case OPC_IF_CMPNE_I:                  iparmByte();
            case OPC_IF_CMPNE_I_WIDE:             do_if_ne_i(false);                 break;
            case OPC_IF_CMPLT_I:                  iparmByte();
            case OPC_IF_CMPLT_I_WIDE:             do_if_lt_i(false);                 break;
            case OPC_IF_CMPLE_I:                  iparmByte();
            case OPC_IF_CMPLE_I_WIDE:             do_if_le_i(false);                 break;
            case OPC_IF_CMPGT_I:                  iparmByte();
            case OPC_IF_CMPGT_I_WIDE:             do_if_gt_i(false);                 break;
            case OPC_IF_CMPGE_I:                  iparmByte();
            case OPC_IF_CMPGE_I_WIDE:             do_if_ge_i(false);                 break;
            case OPC_IF_EQ_L:                     iparmByte();
            case OPC_IF_EQ_L_WIDE:                do_if_eq_l(true);                  break;
            case OPC_IF_NE_L:                     iparmByte();
            case OPC_IF_NE_L_WIDE:                do_if_ne_l(true);                  break;
            case OPC_IF_LT_L:                     iparmByte();
            case OPC_IF_LT_L_WIDE:                do_if_lt_l(true);                  break;
            case OPC_IF_LE_L:                     iparmByte();
            case OPC_IF_LE_L_WIDE:                do_if_le_l(true);                  break;
            case OPC_IF_GT_L:                     iparmByte();
            case OPC_IF_GT_L_WIDE:                do_if_gt_l(true);                  break;
            case OPC_IF_GE_L:                     iparmByte();
            case OPC_IF_GE_L_WIDE:                do_if_ge_l(true);                  break;
            case OPC_IF_CMPEQ_L:                  iparmByte();
            case OPC_IF_CMPEQ_L_WIDE:             do_if_eq_l(false);                 break;
            case OPC_IF_CMPNE_L:                  iparmByte();
            case OPC_IF_CMPNE_L_WIDE:             do_if_ne_l(false);                 break;
            case OPC_IF_CMPLT_L:                  iparmByte();
            case OPC_IF_CMPLT_L_WIDE:             do_if_lt_l(false);                 break;
            case OPC_IF_CMPLE_L:                  iparmByte();
            case OPC_IF_CMPLE_L_WIDE:             do_if_le_l(false);                 break;
            case OPC_IF_CMPGT_L:                  iparmByte();
            case OPC_IF_CMPGT_L_WIDE:             do_if_gt_l(false);                 break;
            case OPC_IF_CMPGE_L:                  iparmByte();
            case OPC_IF_CMPGE_L_WIDE:             do_if_ge_l(false);                 break;
            case OPC_GETSTATIC_I:                 iparmUByte();
            case OPC_GETSTATIC_I_WIDE:            do_getstatic_i(false);             break;
            case OPC_GETSTATIC_O:                 iparmUByte();
            case OPC_GETSTATIC_O_WIDE:            do_getstatic_o(false);             break;
            case OPC_GETSTATIC_L:                 iparmUByte();
            case OPC_GETSTATIC_L_WIDE:            do_getstatic_l(false);             break;
            case OPC_CLASS_GETSTATIC_I:           iparmUByte();
            case OPC_CLASS_GETSTATIC_I_WIDE:      do_getstatic_i(true);              break;
            case OPC_CLASS_GETSTATIC_O:           iparmUByte();
            case OPC_CLASS_GETSTATIC_O_WIDE:      do_getstatic_o(true);              break;
            case OPC_CLASS_GETSTATIC_L:           iparmUByte();
            case OPC_CLASS_GETSTATIC_L_WIDE:      do_getstatic_l(true);              break;
            case OPC_PUTSTATIC_I:                 iparmUByte();
            case OPC_PUTSTATIC_I_WIDE:            do_putstatic_i(false);             break;
            case OPC_PUTSTATIC_O:                 iparmUByte();
            case OPC_PUTSTATIC_O_WIDE:            do_putstatic_o(false);             break;
            case OPC_PUTSTATIC_L:                 iparmUByte();
            case OPC_PUTSTATIC_L_WIDE:            do_putstatic_l(false);             break;
            case OPC_CLASS_PUTSTATIC_I:           iparmUByte();
            case OPC_CLASS_PUTSTATIC_I_WIDE:      do_putstatic_i(true);              break;
            case OPC_CLASS_PUTSTATIC_O:           iparmUByte();
            case OPC_CLASS_PUTSTATIC_O_WIDE:      do_putstatic_o(true);              break;
            case OPC_CLASS_PUTSTATIC_L:           iparmUByte();
            case OPC_CLASS_PUTSTATIC_L_WIDE:      do_putstatic_l(true);              break;
            case OPC_GETFIELD_I:                  iparmUByte();
            case OPC_GETFIELD_I_WIDE:             do_getfield_i(false);              break;
            case OPC_GETFIELD_B:                  iparmUByte();
            case OPC_GETFIELD_B_WIDE:             do_getfield_b(false);              break;
            case OPC_GETFIELD_S:                  iparmUByte();
            case OPC_GETFIELD_S_WIDE:             do_getfield_s(false);              break;
            case OPC_GETFIELD_C:                  iparmUByte();
            case OPC_GETFIELD_C_WIDE:             do_getfield_c(false);              break;
            case OPC_GETFIELD_O:                  iparmUByte();
            case OPC_GETFIELD_O_WIDE:             do_getfield_o(false);              break;
            case OPC_GETFIELD_L:                  iparmUByte();
            case OPC_GETFIELD_L_WIDE:             do_getfield_l(false);              break;
            case OPC_GETFIELD0_I:                 iparmUByte();
            case OPC_GETFIELD0_I_WIDE:            do_getfield_i(true);               break;
            case OPC_GETFIELD0_B:                 iparmUByte();
            case OPC_GETFIELD0_B_WIDE:            do_getfield_b(true);               break;
            case OPC_GETFIELD0_S:                 iparmUByte();
            case OPC_GETFIELD0_S_WIDE:            do_getfield_s(true);               break;
            case OPC_GETFIELD0_C:                 iparmUByte();
            case OPC_GETFIELD0_C_WIDE:            do_getfield_c(true);               break;
            case OPC_GETFIELD0_O:                 iparmUByte();
            case OPC_GETFIELD0_O_WIDE:            do_getfield_o(true);               break;
            case OPC_GETFIELD0_L:                 iparmUByte();
            case OPC_GETFIELD0_L_WIDE:            do_getfield_l(true);               break;
            case OPC_PUTFIELD_I:                  iparmUByte();
            case OPC_PUTFIELD_I_WIDE:             do_putfield_i(false);              break;
            case OPC_PUTFIELD_B:                  iparmUByte();
            case OPC_PUTFIELD_B_WIDE:             do_putfield_b(false);              break;
            case OPC_PUTFIELD_S:                  iparmUByte();
            case OPC_PUTFIELD_S_WIDE:             do_putfield_s(false);              break;
            case OPC_PUTFIELD_O:                  iparmUByte();
            case OPC_PUTFIELD_O_WIDE:             do_putfield_o(false);              break;
            case OPC_PUTFIELD_L:                  iparmUByte();
            case OPC_PUTFIELD_L_WIDE:             do_putfield_l(false);              break;
            case OPC_PUTFIELD0_I:                 iparmUByte();
            case OPC_PUTFIELD0_I_WIDE:            do_putfield_i(true);               break;
            case OPC_PUTFIELD0_B:                 iparmUByte();
            case OPC_PUTFIELD0_B_WIDE:            do_putfield_b(true);               break;
            case OPC_PUTFIELD0_S:                 iparmUByte();
            case OPC_PUTFIELD0_S_WIDE:            do_putfield_s(true);               break;
            case OPC_PUTFIELD0_O:                 iparmUByte();
            case OPC_PUTFIELD0_O_WIDE:            do_putfield_o(true);               break;
            case OPC_PUTFIELD0_L:                 iparmUByte();
            case OPC_PUTFIELD0_L_WIDE:            do_putfield_l(true);               break;
            case OPC_INVOKEVIRTUAL_I:             iparmUByte();
            case OPC_INVOKEVIRTUAL_I_WIDE:        do_invokevirtual();                break;
            case OPC_INVOKEVIRTUAL_V:             iparmUByte();
            case OPC_INVOKEVIRTUAL_V_WIDE:        do_invokevirtual();                break;
            case OPC_INVOKEVIRTUAL_L:             iparmUByte();
            case OPC_INVOKEVIRTUAL_L_WIDE:        do_invokevirtual();                break;
            case OPC_INVOKEVIRTUAL_O:             iparmUByte();
            case OPC_INVOKEVIRTUAL_O_WIDE:        do_invokevirtual();                break;
            case OPC_INVOKESTATIC_I:              iparmUByte();
            case OPC_INVOKESTATIC_I_WIDE:         do_invokestatic();                 break;
            case OPC_INVOKESTATIC_V:              iparmUByte();
            case OPC_INVOKESTATIC_V_WIDE:         do_invokestatic();                 break;
            case OPC_INVOKESTATIC_L:              iparmUByte();
            case OPC_INVOKESTATIC_L_WIDE:         do_invokestatic();                 break;
            case OPC_INVOKESTATIC_O:              iparmUByte();
            case OPC_INVOKESTATIC_O_WIDE:         do_invokestatic();                 break;
            case OPC_INVOKESUPER_I:               iparmUByte();
            case OPC_INVOKESUPER_I_WIDE:          do_invokesuper();                  break;
            case OPC_INVOKESUPER_V:               iparmUByte();
            case OPC_INVOKESUPER_V_WIDE:          do_invokesuper();                  break;
            case OPC_INVOKESUPER_L:               iparmUByte();
            case OPC_INVOKESUPER_L_WIDE:          do_invokesuper();                  break;
            case OPC_INVOKESUPER_O:               iparmUByte();
            case OPC_INVOKESUPER_O_WIDE:          do_invokesuper();                  break;
            case OPC_INVOKENATIVE_I:              iparmUByte();
            case OPC_INVOKENATIVE_I_WIDE:         do_invokenative();                 break;
            case OPC_INVOKENATIVE_V:              iparmUByte();
            case OPC_INVOKENATIVE_V_WIDE:         do_invokenative();                 break;
            case OPC_INVOKENATIVE_L:              iparmUByte();
            case OPC_INVOKENATIVE_L_WIDE:         do_invokenative();                 break;
            case OPC_INVOKENATIVE_O:              iparmUByte();
            case OPC_INVOKENATIVE_O_WIDE:         do_invokenative();                 break;
            case OPC_FINDSLOT:                    iparmUByte();
            case OPC_FINDSLOT_WIDE:               do_findslot();                     break;
            case OPC_EXTEND:                      iparmUByte();
            case OPC_EXTEND_WIDE:                 do_extend();                       break;
            case OPC_INVOKESLOT_I:                iparmNone();
                                                  do_invokeslot();                   break;
            case OPC_INVOKESLOT_V:                iparmNone();
                                                  do_invokeslot();                   break;
            case OPC_INVOKESLOT_L:                iparmNone();
                                                  do_invokeslot();                   break;
            case OPC_INVOKESLOT_O:                iparmNone();
                                                  do_invokeslot();                   break;
            case OPC_RETURN_V:                    iparmNone();
                                                  do_return_v();                     break;
            case OPC_RETURN_I:                    iparmNone();
                                                  do_return_i();                     break;
            case OPC_RETURN_L:                    iparmNone();
                                                  do_return_l();                     break;
            case OPC_RETURN_O:                    iparmNone();
                                                  do_return_o();                     break;
            case OPC_TABLESWITCH_I:               iparmNone();
                                                  do_tableswitch(4);                 break;
            case OPC_TABLESWITCH_S:               iparmNone();
                                                  do_tableswitch(2);                 break;
            case OPC_EXTEND0:                     iparmNone();
                                                  do_extend0();                      break;
            case OPC_ADD_I:                       iparmNone();
                                                  do_add_i();                        break;
            case OPC_SUB_I:                       iparmNone();
                                                  do_sub_i();                        break;
            case OPC_AND_I:                       iparmNone();
                                                  do_and_i();                        break;
            case OPC_OR_I:                        iparmNone();
                                                  do_or_i();                         break;
            case OPC_XOR_I:                       iparmNone();
                                                  do_xor_i();                        break;
            case OPC_SHL_I:                       iparmNone();
                                                  do_shl_i();                        break;
            case OPC_SHR_I:                       iparmNone();
                                                  do_shr_i();                        break;
            case OPC_USHR_I:                      iparmNone();
                                                  do_ushr_i();                       break;
            case OPC_MUL_I:                       iparmNone();
                                                  do_mul_i();                        break;
            case OPC_DIV_I:                       iparmNone();
                                                  do_div_i();                        break;
            case OPC_REM_I:                       iparmNone();
                                                  do_rem_i();                        break;
            case OPC_NEG_I:                       iparmNone();
                                                  do_neg_i();                        break;
            case OPC_I2B:                         iparmNone();
                                                  do_i2b();                          break;
            case OPC_I2S:                         iparmNone();
                                                  do_i2s();                          break;
            case OPC_I2C:                         iparmNone();
                                                  do_i2c();                          break;
            case OPC_ADD_L:                       iparmNone();
                                                  do_add_l();                        break;
            case OPC_SUB_L:                       iparmNone();
                                                  do_sub_l();                        break;
            case OPC_MUL_L:                       iparmNone();
                                                  do_mul_l();                        break;
            case OPC_DIV_L:                       iparmNone();
                                                  do_div_l();                        break;
            case OPC_REM_L:                       iparmNone();
                                                  do_rem_l();                        break;
            case OPC_AND_L:                       iparmNone();
                                                  do_and_l();                        break;
            case OPC_OR_L:                        iparmNone();
                                                  do_or_l();                         break;
            case OPC_XOR_L:                       iparmNone();
                                                  do_xor_l();                        break;
            case OPC_NEG_L:                       iparmNone();
                                                  do_neg_l();                        break;
            case OPC_SHL_L:                       iparmNone();
                                                  do_shl_l();                        break;
            case OPC_SHR_L:                       iparmNone();
                                                  do_shr_l();                        break;
            case OPC_USHR_L:                      iparmNone();
                                                  do_ushr_l();                       break;
            case OPC_L2I:                         iparmNone();
                                                  do_l2i();                          break;
            case OPC_I2L:                         iparmNone();
                                                  do_i2l();                          break;
            case OPC_THROW:                       iparmNone();
                                                  do_throw();                        break;
            case OPC_POP_1:                       iparmNone();
                                                  do_pop_n(1);                       break;
            case OPC_POP_2:                       iparmNone();
                                                  do_pop_n(2);                       break;
            case OPC_MONITORENTER:                iparmNone();
                                                  do_monitorenter();                 break;
            case OPC_MONITOREXIT:                 iparmNone();
                                                  do_monitorexit();                  break;
            case OPC_CLASS_MONITORENTER:          iparmNone();
                                                  do_class_monitorenter();           break;
            case OPC_CLASS_MONITOREXIT:           iparmNone();
                                                  do_class_monitorexit();            break;
            case OPC_ARRAYLENGTH:                 iparmNone();
                                                  do_arraylength();                  break;
            case OPC_NEW:                         iparmNone();
                                                  do_new();                          break;
            case OPC_NEWARRAY:                    iparmNone();
                                                  do_newarray();                     break;
            case OPC_NEWDIMENSION:                iparmNone();
                                                  do_newdimension();                 break;
            case OPC_CLASS_CLINIT:                iparmNone();
                                                  do_class_clinit();                 break;
            case OPC_BBTARGET_SYS:                iparmNone();
                                                  do_bbtarget_sys();                 break;
            case OPC_BBTARGET_APP:                iparmNone();
                                                  do_bbtarget_app();                 break;
            case OPC_INSTANCEOF:                  iparmNone();
                                                  do_instanceof();                   break;
            case OPC_CHECKCAST:                   iparmNone();
                                                  do_checkcast();                    break;
            case OPC_ALOAD_I:                     iparmNone();
                                                  do_aload_i();                      break;
            case OPC_ALOAD_B:                     iparmNone();
                                                  do_aload_b();                      break;
            case OPC_ALOAD_S:                     iparmNone();
                                                  do_aload_s();                      break;
            case OPC_ALOAD_C:                     iparmNone();
                                                  do_aload_c();                      break;
            case OPC_ALOAD_O:                     iparmNone();
                                                  do_aload_o();                      break;
            case OPC_ALOAD_L:                     iparmNone();
                                                  do_aload_l();                      break;
            case OPC_ASTORE_I:                    iparmNone();
                                                  do_astore_i();                     break;
            case OPC_ASTORE_B:                    iparmNone();
                                                  do_astore_b();                     break;
            case OPC_ASTORE_S:                    iparmNone();
                                                  do_astore_s();                     break;
            case OPC_ASTORE_O:                    iparmNone();
                                                  do_astore_o();                     break;
            case OPC_ASTORE_L:                    iparmNone();
                                                  do_astore_l();                     break;
            case OPC_LOOKUP_I:                    iparmNone();
                                                  do_lookup_i();                     break;
            case OPC_LOOKUP_B:                    iparmNone();
                                                  do_lookup_b();                     break;
            case OPC_LOOKUP_S:                    iparmNone();
                                                  do_lookup_s();                     break;
            case OPC_PAUSE:                       iparmNone();
                                                  do_pause();                        break;

/*if[FLOATS]*/
            case OPC_FCMPL:                       iparmNone();
                                                  do_fcmpl();                        break;
            case OPC_FCMPG:                       iparmNone();
                                                  do_fcmpg();                        break;
            case OPC_DCMPL:                       iparmNone();
                                                  do_dcmpl();                        break;
            case OPC_DCMPG:                       iparmNone();
                                                  do_dcmpg();                        break;
            case OPC_GETSTATIC_F:                 iparmUByte();
            case OPC_GETSTATIC_F_WIDE:            do_getstatic_f(false);             break;
            case OPC_GETSTATIC_D:                 iparmUByte();
            case OPC_GETSTATIC_D_WIDE:            do_getstatic_d(false);             break;
            case OPC_CLASS_GETSTATIC_F:           iparmUByte();
            case OPC_CLASS_GETSTATIC_F_WIDE:      do_getstatic_f(true);              break;
            case OPC_CLASS_GETSTATIC_D:           iparmUByte();
            case OPC_CLASS_GETSTATIC_D_WIDE:      do_getstatic_d(true);              break;
            case OPC_PUTSTATIC_F:                 iparmUByte();
            case OPC_PUTSTATIC_F_WIDE:            do_putstatic_f(false);             break;
            case OPC_PUTSTATIC_D:                 iparmUByte();
            case OPC_PUTSTATIC_D_WIDE:            do_putstatic_d(false);             break;
            case OPC_CLASS_PUTSTATIC_F:           iparmUByte();
            case OPC_CLASS_PUTSTATIC_F_WIDE:      do_putstatic_f(true);              break;
            case OPC_CLASS_PUTSTATIC_D:           iparmUByte();
            case OPC_CLASS_PUTSTATIC_D_WIDE:      do_putstatic_d(true);              break;
            case OPC_GETFIELD_F:                  iparmUByte();
            case OPC_GETFIELD_F_WIDE:             do_getfield_f(false);              break;
            case OPC_GETFIELD_D:                  iparmUByte();
            case OPC_GETFIELD_D_WIDE:             do_getfield_d(false);              break;
            case OPC_GETFIELD0_F:                 iparmUByte();
            case OPC_GETFIELD0_F_WIDE:            do_getfield_f(true);               break;
            case OPC_GETFIELD0_D:                 iparmUByte();
            case OPC_GETFIELD0_D_WIDE:            do_getfield_d(true);               break;
            case OPC_PUTFIELD_F:                  iparmUByte();
            case OPC_PUTFIELD_F_WIDE:             do_putfield_f(false);              break;
            case OPC_PUTFIELD_D:                  iparmUByte();
            case OPC_PUTFIELD_D_WIDE:             do_putfield_d(false);              break;
            case OPC_PUTFIELD0_F:                 iparmUByte();
            case OPC_PUTFIELD0_F_WIDE:            do_putfield_f(true);               break;
            case OPC_PUTFIELD0_D:                 iparmUByte();
            case OPC_PUTFIELD0_D_WIDE:            do_putfield_d(true);               break;
            case OPC_INVOKEVIRTUAL_F:             iparmUByte();
            case OPC_INVOKEVIRTUAL_F_WIDE:        do_invokevirtual();                break;
            case OPC_INVOKEVIRTUAL_D:             iparmUByte();
            case OPC_INVOKEVIRTUAL_D_WIDE:        do_invokevirtual();                break;
            case OPC_INVOKESTATIC_F:              iparmUByte();
            case OPC_INVOKESTATIC_F_WIDE:         do_invokestatic();                 break;
            case OPC_INVOKESTATIC_D:              iparmUByte();
            case OPC_INVOKESTATIC_D_WIDE:         do_invokestatic();                 break;
            case OPC_INVOKESUPER_F:               iparmUByte();
            case OPC_INVOKESUPER_F_WIDE:          do_invokesuper();                  break;
            case OPC_INVOKESUPER_D:               iparmUByte();
            case OPC_INVOKESUPER_D_WIDE:          do_invokesuper();                  break;
            case OPC_INVOKENATIVE_F:              iparmUByte();
            case OPC_INVOKENATIVE_F_WIDE:         do_invokenative();                 break;
            case OPC_INVOKENATIVE_D:              iparmUByte();
            case OPC_INVOKENATIVE_D_WIDE:         do_invokenative();                 break;
            case OPC_INVOKESLOT_F:                iparmNone();
                                                  do_invokeslot();                   break;
            case OPC_INVOKESLOT_D:                iparmNone();
                                                  do_invokeslot();                   break;
            case OPC_RETURN_F:                    iparmNone();
                                                  do_return_f();                     break;
            case OPC_RETURN_D:                    iparmNone();
                                                  do_return_d();                     break;
            case OPC_CONST_FLOAT:                 iparmNone();
                                                  do_const_float();                  break;
            case OPC_CONST_DOUBLE:                iparmNone();
                                                  do_const_double();                 break;
            case OPC_ADD_F:                       iparmNone();
                                                  do_add_f();                        break;
            case OPC_SUB_F:                       iparmNone();
                                                  do_sub_f();                        break;
            case OPC_MUL_F:                       iparmNone();
                                                  do_mul_f();                        break;
            case OPC_DIV_F:                       iparmNone();
                                                  do_div_f();                        break;
            case OPC_REM_F:                       iparmNone();
                                                  do_rem_f();                        break;
            case OPC_NEG_F:                       iparmNone();
                                                  do_neg_f();                        break;
            case OPC_ADD_D:                       iparmNone();
                                                  do_add_d();                        break;
            case OPC_SUB_D:                       iparmNone();
                                                  do_sub_d();                        break;
            case OPC_MUL_D:                       iparmNone();
                                                  do_mul_d();                        break;
            case OPC_DIV_D:                       iparmNone();
                                                  do_div_d();                        break;
            case OPC_REM_D:                       iparmNone();
                                                  do_rem_d();                        break;
            case OPC_NEG_D:                       iparmNone();
                                                  do_neg_d();                        break;
            case OPC_I2F:                         iparmNone();
                                                  do_i2f();                          break;
            case OPC_L2F:                         iparmNone();
                                                  do_l2f();                          break;
            case OPC_F2I:                         iparmNone();
                                                  do_f2i();                          break;
            case OPC_F2L:                         iparmNone();
                                                  do_f2l();                          break;
            case OPC_I2D:                         iparmNone();
                                                  do_i2d();                          break;
            case OPC_L2D:                         iparmNone();
                                                  do_l2d();                          break;
            case OPC_F2D:                         iparmNone();
                                                  do_f2d();                          break;
            case OPC_D2I:                         iparmNone();
                                                  do_d2i();                          break;
            case OPC_D2L:                         iparmNone();
                                                  do_d2l();                          break;
            case OPC_D2F:                         iparmNone();
                                                  do_d2f();                          break;
            case OPC_ALOAD_F:                     iparmNone();
                                                  do_aload_f();                      break;
            case OPC_ALOAD_D:                     iparmNone();
                                                  do_aload_d();                      break;
            case OPC_ASTORE_F:                    iparmNone();
                                                  do_astore_f();                     break;
            case OPC_ASTORE_D:                    iparmNone();
                                                  do_astore_d();                     break;
/*end[FLOATS]*/
           default: fatalVMError("unimplemented opcode");
        }
