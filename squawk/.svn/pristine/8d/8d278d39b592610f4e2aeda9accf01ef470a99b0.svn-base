<html>
<head>
    <title>Debugging an Application on Squawk</title>
</head>

<body>

<h1>Debugging an Application on Squawk</h1>

<p><i>The architecture for Java-level debugging application running on the Squawk VM
is a slightly modified version of the architecture for debugging applications
running on the KVM. As such, this document is largely derived in parts from the
document describing the KVM debugger architecture.</i></p>

<p>The Squawk VM provides facilities for plugging the virtual machine into third-party Java
development and debugging environments that are compliant with the JPDA (Java
Platform Debug Architecture) specification supported by Java 2 Standard Edition.
Further information on the JPDA architecture is available
<a href="http://java.sun.com/products/jpda/">here</a>. Due to strict memory constraints, Squawk does not
implement support for the JVMDI  (Java Virtual Machine Debug Interface) or the full
<a href="http://java.sun.com/j2se/1.5.0/docs/guide/jpda/jdwp-spec.html">JDWP</a>
(Java Debug Wire Protocol) specification in JPDA. Instead, Squawk implements
a subset of the JDWP known as SDWP (Squawk Debug Wire Protocol).</p>

<h2>Overall architecture</h2>

<p>The SDWP was designed to be a strict subset of the JDWP,
primarily based on the  resource constraints imposed on Squawk. In order to make Squawk
run with a JPDA compatible debugger, a debug agent (debug proxy) program is interposed
between Squawk and the JPDA-compatible debugger. The debug agent allows  many of the
memory-consuming components of a JPDA-compliant debugging  environment to be located
on the development workstation instead of in Squawk,  therefore reducing the memory
overhead that the debugging interfaces have on Squawk and target devices.</p>

<p>At the high level, the Squawk debugger support consists of two parts:
<ul>
    <li>Squawk Debug Agent (SDA) - code running on the Squawk VM to support SDWP</li>
    <li>Squawk Debug Proxy (SDP) - handles requests from a JPDA debugger, communicating with the SDA if necessary</li>
</ul></p>

<p>The overall architecture for the Java-level debugging interface is illustrated below.
The topmost box represents the JPDA-compliant debugging environment ("JPDA Debugger")
running on a development workstation.  The debugger is connected to the SDP
that talks to the SDA on Squawk.</p>

<img src="debugger-architecture.gif">


<h2>Building the debugger</h2>

<p>The debugger suite must be built with the bootstrap suite as it references parts of the
core classes whose linkage information is subsequently stripped. As such, the building of
the bootstrap suite will be something like the following:</p>

<table border="1" cellspacing="0" cellpadding="5" width="100%" bgcolor="#CCCCCC"><tr><td><pre><code>
$ <b>java -jar build.jar -prod -o2 -mac rom cldc imp debugger</b>
[running rom...]
[running romize...]
...
</code></pre></td></tr></table>


<h2>Running the debugger</h2>


<p>There are three steps to starting a debug session:
<ol>
<li><a href="#start-sda">Start an application under control of the SDA in the Squawk VM.</a></li>
<li><a href="#start-sdp">Start the SDP.</a></li>
<li><a href="#start-jdb">The JPDA debugger client of your choice
(i.e. NetBeans, JBuilder, Eclipse, jdb, etc).</a></li>
</ol></p>

<h3><a name="start-sda">Starting an application to be debugged.</a></h3>

<p>The application to be debugged must be started under control of the SDA. Starting
the SDA with only the <code>-h</code> flag will cause it to list a usage message:</p>

<table border="1" cellspacing="0" cellpadding="5" width="100%" bgcolor="#CCCCCC"><tr><td><pre><code>
$ <b>squawk -suite:debugger com.sun.squawk.debugger.sda.SDA -h</b>
Usage: SDA [-options] class [args...]
where options include:

    -cp:&lt;path&gt;     specifies the class path for the application
                   (default is file://.)
    -suite:&lt;suite&gt; specifies the suite containing the application
    -uri:&lt;uri&gt;     specifies the uri of the channel that the debug agent will
                   listen on for a connection from a debugger proxy.
                   (default is serversocket://:2800)
    -log:&lt;level&gt;   sets logging level to 'none, 'info', 'verbose' or 'debug'
    -logURL:&lt;url&gt;  where messages should be logged (default is stdout)
    -outURL:&lt;url&gt;    where the debugee's output stream should be logged. If no url
                     is specified, then output is dropped. (default is stdout)
    -errURL:&lt;url&gt;    where the debugee's err stream should be logged. If no url
                     is specified, then err is dropped. (default is stderr)
    -D&lt;name&gt;=&lt;value&gt; set a system property in the application being debugged
    -h             shows this usage message
</code></pre></td></tr></table>

<p>Here's an example of how to start an application <code>com.sun.squawk.debugger.sda.TestApp</code> (which
happens to be included in the debugger's suite) under the SDA:</p>

<table border="1" cellspacing="0" cellpadding="5" width="100%" bgcolor="#CCCCCC"><tr><td><pre><code>
$ <b>squawk com.sun.squawk.debugger.sda.SDA -log:info tests.TestApp</b>
Event.createEvent() &lt;Event id: 0 kind: VM_INIT suspendPolicy: ALL modifiers: 0&gt
Event.createEvent() &lt;Event id: 0 kind: VM_DEATH suspendPolicy: NONE modifiers: 0&gt
***Waiting for proxy on channel serversocket://:2800
Waiting for proxy on channel serversocket://:2800
Opening connection: serversocket://:2800
Waiting for connection on serversocket://:2800
<i></code>more output follows once SDP and debugger start up...<code></i>
</code></pre></td></tr></table>

<p>The TestApp program sits in a loop, throwing and catching exceptions, initiating garbage collections
every now and then. Some JDB commands to try include <code>catch java.lang.Throwable</code>,
<code>stop at tests.TestApp:66</code> and <code>cont</code>.</p>


<h3><a name="start-sdp">Starting the SDP.</a></h3>

<table border="1" cellspacing="0" cellpadding="5" width="100%" bgcolor="#CCCCCC"><tr><td><pre><code>
$ <b>java -jar build.jar sdproxy -h</b>
[running sdproxy...]
Usage: SDP [-options]
where options include:

    -debugger:&lt;uri&gt; The URI of the channel that debug proxy will
                    listen on for a connection from a JPDA debugger.
                    Only specify -debugger OR -l, not both.
                    (default is serversocket://:2900).
    -l:&lt;port&gt;       local port number that the debug proxy will
                    listen on for a connection from a JPDA debugger.
    -vm:&lt;uri&gt;       The URI of the channel to the VM running the .
                    application to be debugged.
                    (default is socket://localhost:2800).
    -log:&lt;level&gt;    sets logging level to 'none, 'info', 'verbose' or 'debug'
    -logFile:&lt;file&gt; where messages should be logged (default is stdout),
    -cp:&lt;path&gt;      a list of paths separated by : where the
                    debug proxy can class files
                    (default is '.')
    -singlesession  allow only one connection from a debugger before exiting
    -sniffer        act as a JDWP packet sniffer between a JVM and a debugger,
                    logging packets as specified by -log and -logfile options.
    -quitOnError:&lt;b&gt;  If false, the proxy will try to ignore certain proxy errors.
                    (default is true).
    -h              shows this usage message
</code></pre></td></tr></table>

<p><p>The proxy needs to find squawk class files for all classes that might be running in the
application being debugged. This is done by specifying a classpath using the <code>-cp:</code>
option. In the example below, replace "samples/j2meclasses" with the
path to your application's class files.<p>

<table border="1" cellspacing="0" cellpadding="5" width="100%" bgcolor="#CCCCCC"><tr><td><pre><code>
$ <b>java -jar build.jar sdproxy -log:info -cp:cldc/j2meclasses:imp/j2meclasses:debugger/j2meclasses:samples/j2meclasses </b>
[running sdproxy...]
Connecting to socket://localhost:2800
Waiting for debugger on port serversocket://:2900
Opening connection: socket://localhost:2800
Opening connection: serversocket://:2900
Waiting for connection on serversocket://:2900
Thread[Thread-0,5,main] is waiting for state 1
</code></pre></td></tr></table>

<h3><a name="start-jdb">Starting a JPDA debugger client</a></h3>

<h4>Configuring NetBeans as a debug client</h4>
Select the “Run” menu item and the sub-item “Attach Debugger…” Enter 2900 as the port number
and 5000ms as the timeout. The connector field should be set to “socket attach”.<p>

<h4>Configuring jdb as a debug client</h4>
This step is described using <i>jdb</i> as the debugger client. It must be started by specifying
the socket that the SDP has opened for connections (2900 by default). If the SDP and
jdb are running on different machines, then you will need to specify the host running the SDP
instead of "localhost":</p>

<table border="1" cellspacing="0" cellpadding="5" width="100%" bgcolor="#CCCCCC"><tr><td><pre><code>
$ <b>jdb -connect com.sun.jdi.SocketAttach:port=2900 </b>
Set uncaught java.lang.Throwable
Set deferred uncaught java.lang.Throwable
Initializing jdb ...

VM Started: &gt; "thread=java.lang.Thread[6, 5]", java.lang.Thread.reschedule(), line=1,159 bci=8

java.lang.Thread[6, 5][1]

<i>You may now begin executing JDB commands, For example:</i>.
java.lang.Thread[6, 5][1] stop at tests.TestApp:31
Set breakpoint tests.TestApp:31
java.lang.Thread[6, 5][1] cont
>
Breakpoint hit: "thread=java.lang.Thread[6, 5]", tests.TestApp.f3(), line=31 bci=8

java.lang.Thread[6, 5][1] catch java.lang.Throwable
Set all java.lang.Throwable
java.lang.Thread[6, 5][1] clear tests.TestApp:31
Removed: breakpoint tests.TestApp:31
java.lang.Thread[6, 5][1] cont
>
Exception occurred: java.lang.RuntimeException (to be caught at: tests.TestApp.mainLoop(), line=66 bci=25)"thread=java.lang.Thread[6, 5]", tests.TestApp.f5(), line=51 bci=51

java.lang.Thread[6, 5][1] where all
java.lang.Thread[6, 5]:
  [1] tests.TestApp.f5 (TestApp.java:51)
  [2] tests.TestApp.f4 (TestApp.java:41)
  [3] tests.TestApp.f3 (TestApp.java:31)
  [4] tests.TestApp.f2 (TestApp.java:22)
  [5] tests.TestApp.f1 (TestApp.java:14)
  [6] tests.TestApp.mainLoop (TestApp.java:63)
  [7] tests.TestApp.main (TestApp.java:75)
  [8] java.lang.Class.main (Klass.java:2,640)
  [9] java.lang.Isolate.run (Isolate.java:761)
  [10] java.lang.Thread.run (Thread.java:361)
  [11] java.lang.Thread.callRun (Thread.java:1,049)
  [12] java.lang.VM.do_callRun (VM.java:205)
java.lang.Thread[6, 5][1] print java.lang.System.err
 java.lang.System.err = "java.io.PrintStream#2"
 java.lang.Thread[6, 5][1] dump java.lang.System.err
 java.lang.System.err = {
    charOut: instance of java.io.OutputStreamWriter(id=4)
    byteOut: instance of java.io.MulticastOutputStream(id=5)
    trouble: false
    closing: false
}
java.lang.Thread[6, 5][1]
</code></pre></td></tr></table>

<p>Here are a list of jdb commands that should work with Squawk:
<pre>
threads [threadgroup]     -- list threads
thread &lt;thread id&gt;        -- set default thread
suspend [thread id(s)]    -- suspend threads (default: all)
resume [thread id(s)]     -- resume threads (default: all)
where [&lt;thread id&gt; | all] -- dump a thread's stack
wherei [&lt;thread id&gt; | all]-- dump a thread's stack, with pc info
up [n frames]             -- move up a thread's stack
down [n frames]           -- move down a thread's stack

print &lt;expr&gt;              -- print value of expression
dump &lt;expr&gt;               -- print all object information
eval &lt;expr&gt;               -- evaluate expression (same as print)

classes                   -- list currently known classes
class &lt;class id&gt;          -- show details of named class
methods &lt;class id&gt;        -- list a class's methods
fields &lt;class id&gt;         -- list a class's fields


stop at &lt;class id&gt;:&lt;line&gt; -- set a breakpoint at a line
clear &lt;class id&gt;:&lt;line&gt;   -- clear a breakpoint at a line
clear                     -- list breakpoints
catch [uncaught|caught|all] &lt;class id&gt;|&lt;class pattern&gt;
                          -- break when specified exception occurs
ignore [uncaught|caught|all] &lt;class id&gt;|&lt;class pattern&gt;
                          -- cancel 'catch' for the specified exception
cont                      -- continue execution from breakpoint

list [line number|method] -- print source code
use (or sourcepath) [source file path]
                          -- display or change the source path
classpath                 -- print classpath info from target VM

monitor &lt;command&gt;         -- execute command each time the program stops
monitor                   -- list monitors
unmonitor &lt;monitor#&gt;      -- delete a monitor
read &lt;filename&gt;           -- read and execute a command file

!!                        -- repeat last command
&lt;n&gt; &lt;command&gt;             -- repeat command n times
help (or ?)               -- list commands
version                   -- print version information
exit (or quit)            -- exit debugger

&lt;class id&gt;: a full class name with package qualifiers
&lt;class pattern&gt;: a class name with a leading or trailing wildcard ('*')
&lt;thread id&gt;: thread number as reported in the 'threads' command
&lt;expr&gt;: a Java(tm) Programming Language expression.
Most common syntax is supported.
</pre>
</p>
<p>Important JDB commands that do NOT work:
<pre>
kill &lt;thread id&gt; &lt;expr&gt;   -- kill a thread with the given exception object
interrupt &lt;thread id&gt;     -- interrupt a thread

set &lt;lvalue&gt; = &lt;expr&gt;     -- assign new value to field/variable/array element
locals                    -- print all local variables in current stack frame

threadgroups              -- list threadgroups
threadgroup &lt;name&gt;        -- set current threadgroup

stop in &lt;class id&gt;.&lt;method&gt;[(argument_type,...)]
                          -- set a breakpoint in a method
clear &lt;class id&gt;.&lt;method&gt;[(argument_type,...)]
                          -- clear a breakpoint in a method

watch [access|all] &lt;class id&gt;.&lt;field name&gt;
                          -- watch access/modifications to a field
unwatch [access|all] &lt;class id&gt;.&lt;field name&gt;
                          -- discontinue watching access/modifications to a field
trace methods [thread]    -- trace method entry and exit
untrace methods [thread]  -- stop tracing method entry and exit
step                      -- execute current line
step up                   -- execute until the current method returns to its caller
stepi                     -- execute current instruction
next                      -- step one line (step OVER calls)

exclude [&lt;class pattern&gt;, ... | "none"]
                          -- do not report step or method events for specified classes

lock &lt;expr&gt;               -- print lock info for an object
threadlocks [thread id]   -- print lock info for a thread

pop                       -- pop the stack through and including the current frame
reenter                   -- same as pop, but current frame is reentered
redefine &lt;class id&gt; &lt;class file name&gt;
                          -- redefine the code for a class

disablegc &lt;expr&gt;          -- prevent garbage collection of an object
enablegc &lt;expr&gt;           -- permit garbage collection of an object

</pre>
</p>
</body>

</html>
