<html>
<head>
    <title>Squawk Preprocessor</title>
</head>

<body>

<h1>The Squawk Preprocessor</h1>

<p>
Any Java source code compiled with the Squawk builder is preprocessed before being passed to
<i>javac</i>. A guiding philosophy of the Squawk preprocessing mechanism is that any unpreprocessed
code will be a well-formed source file. This is to support editing of source files in Java
IDEs without confusing any auto-parsing feature in the IDE.
</p>

<h2>Preprocessing Directives</h2>

<p>The patterns recognized by the preprocessor and their semantics are described here.</p>

<h3>1. Conditional compilation.</h3>

<p>A block of code can be conditionally compiled by using the following pattern:</p>

<table border="1" cellspacing="0" cellpadding="5" width="100%" bgcolor="#CCCCCC"><tr><td><pre><code>
/*if[NAME]*/
    ... // code to be included if the property denoted by NAME is true
/*end[NAME]*/
</code></pre></td></tr></table>

<p>The preprocessing directives (i.e. <code>/*if[...]*/</code> and <code>/*end[PROPERTY.NAME]*/</code>)
must be at the start of the line. There is no constraint on what comes after the directive.
The property's value is taken from the set of properties given to the builder which are
typically in the file 'build.properties'. If the property is not explicity defined then an exception is thrown.
If a property is used for conditional compilation its value must be <code>true</code> or <code>false</code>.</p>

<p>As an example of conditional compilation, the following appears in j2me/src/java/lang/String.java to
conditionally support floating point code,:</p>

<table border="1" cellspacing="0" cellpadding="5" width="100%" bgcolor="#CCCCCC"><tr><td><pre><code>
/*if[FLOATS]*/
    /**
     * Returns a String object that represents the value of the specified float.
     * @param f the float
     */
    public static String valueOf(float f) {
        return Float.toString(f);
    }

    /**
     * Returns a String object that represents the value of the specified double.
     * @param d the double
     */
    public static String valueOf(double d) {
        return Double.toString(d);
    }
/*end[FLOATS]*/
</code></pre></td></tr></table>

<p>The property specified in an <code>/*if[...]*/</code> directive can be negated. For example, changing the above
   example to use <code>/*if[!FLOATS]*/</code> instead would have caused the enclosed code to be included only
   if the <code>FLOATS</code> property was <code>false</code> or not defined. Note that the
   <code>/*end[...]*/</code> directive does not accept the optional '!' character.</p>

<p>Occasionally, it is useful to have an else clause. The following example comes from define/src/com/sun/squawk/vm/AddressType.java:</p>

<table border="1" cellspacing="0" cellpadding="5" width="100%" bgcolor="#CCCCCC"><tr><td><pre><code>
    /**
     * A constant denoting a word full of {@link #UNDEFINED}s.
     */
/*if[SQUAWK_64]*/
    public final static long UNDEFINED_WORD = 0x0000000000000000L;
/*else[SQUAWK_64]*/
//  public final static long UNDEFINED_WORD = 0x00000000;
/*end[SQUAWK_64]*/
</code></pre></td></tr></table>

<p>The preprocessor will include the <code>else</code> clause in this example if the <code>SQUAWK_64</code> property is
<code>false</code>. Every line of code in the un-preprocessed else clause must start with <code>//</code>. This preserves the validity
of the un-preprocessed source file as a well formed Java file.</p>

<p>Lastly, a whole file can be conditionally excluded from compilation by placing <code>//if[NAME]</code>
as the first line of a file. For example, here are the first few lines of j2me/src/java/lang/Float.java:</p>

<table border="1" cellspacing="0" cellpadding="5" width="100%" bgcolor="#CCCCCC"><tr><td><pre><code>
//if[FLOATS]   /* This will selectively exclude the entire file from the build */
/*
 * @(#)Float.java   1.32 95/12/22
 *
 * Copyright (c) 1994 Sun Microsystems, Inc. All Rights Reserved.
</code></pre></td></tr></table>

This directive is silently ignored if it is not the first line of a file.

<h3>2. Special support for 64/32 bit abstraction.</h3>

<p>The Squawk system is built as a 32 or 64 bit system, depending on the value of the <code>SQUAWK_64</code> property.
This configurability is achieved
by abstracting machine word dependent types into special Java classes (i.e. <code>java.lang.UWord</code>,
<code>java.lang.Address</code> and <code>java.lang.Offset</code>). These classes are known to the translator
and compiler and converted to be values of the correct primitive type (i.e. <code>long</code> or <code>int</code>).
However, it is sometimes necessary to represent these values as raw primitive values. While it would be
possible to use the conditional compilation mechanism to achieve this, the readability of the code suffers. As such, there
is a special preprocessing mechanism for expressing the primitive types and values. The example below comes from
j2me/src/java/lang/Address.java:</p>

<table border="1" cellspacing="0" cellpadding="5" width="100%" bgcolor="#CCCCCC"><tr><td><pre><code>
    /**
     * Casts a word expressed as the appropriate Java primitive type for the platform (i.e. int or long)
     * into a value of type Address.
     *
     * @param  value an address expressed as an int or long
     * @return the canonical Address instance for <code>value</code>
     */
    public static Address fromPrimitive(int/*S64*/ value) {
        Assert.that(VM.isHosted());
        return new Address(value);
    }
</code></pre></td></tr></table>

<p>If the property <code>SQUAWK_64</code> is <code>true</code>, the preprocessor searches for the pattern
<code>/*S64*/</code> immediately prefixed or suffixed (without any
interleaving spaces) by <code>int</code>, <code>Int</code> or <code>INT</code> and replaces the prefix or suffix
with <code>long</code>, <code>Long</code> or <code>LONG</code> respectively. The post-processed output of the
above example would be:</p>

<table border="1" cellspacing="0" cellpadding="5" width="100%" bgcolor="#CCCCCC"><tr><td><pre><code>
    /**
     * Casts a word expressed as the appropriate Java primitive type for the platform (i.e. int or long)
     * into a value of type Address.
     *
     * @param  value an address expressed as an int or long
     * @return the canonical Address instance for <code>value</code>
     */
    public static Address fromPrimitive(long/*S64*/ value) {
        Assert.that(VM.isHosted());
        return new Address(value);
    }
</code></pre></td></tr></table>

<h3>3. Removing assertions.</h3>

<p>While version 1.4 of Java introduced assertions with the <code>assert</code> keyword, it is a mechanism that relies
on dynamic compilation to disable assertions and alleviate their runtime overhead. Given that the
Squawk system cannot rely on a JIT compiler based solution, the preprocessor is used to statically enable/disable
assertions. Assertions in the Squawk system are expressed using methods in the <code>the com.sun.squawk.util.Assert</code>
class:</p>

<table border="1" cellspacing="0" cellpadding="5" width="100%" bgcolor="#CCCCCC"><tr><td><pre><code>
package com.sun.squawk.util;

public class Assert {
    public static final boolean ASSERTS_ENABLED = /*VAL*/true/*J2ME.DEBUG*/;
    public static final boolean SHOULD_NOT_REACH_HERE_ALWAYS_ENABLED = true;

    /*---------------------------------------------------------------------------*\
     *                   Assertions that raise a RuntimeException               *
    \*---------------------------------------------------------------------------*/

    public static void that(boolean cond, String msg) { ... }
    public static void that(boolean cond)  { ... }

    public static RuntimeException shouldNotReachHere(String msg)  { ... }
    public static RuntimeException shouldNotReachHere()  { ... }

    /*---------------------------------------------------------------------------*\
     *                   Assertions that case a fatal VM error                   *
    \*---------------------------------------------------------------------------*/

    public static void thatFatal(boolean cond, String msg)  { ... }
    public static void thatFatal(boolean cond)  { ... }

    public static RuntimeException shouldNotReachHereFatal(String msg)  { ... }
    public static RuntimeException shouldNotReachHereFatal()  { ... }

    /*---------------------------------------------------------------------------*\
     *                Assertions that are ignored by the pre-processor           *
    \*---------------------------------------------------------------------------*/

    public static void always(boolean cond, String msg)  { ... }
    public static void always(boolean cond)  { ... }
}
</code></pre></td></tr></table>

<p >Assertions are disabled by setting the property <code>J2ME.DEBUG</code> to <code>false</code>. If Assertions are
disabled, the following transformations take place:</p>

<ul>
    <li>"<code>Assert.that</code>" is replaced by "<code>if (false) Assert.that</code>"</li>
    <li>"<code>throw Assert.should</code>" is replaced by "<code>throw (RuntimeException)null; // Assert.should</code>"</li>
    <li>"<code>Assert.should</code>" is prefixed by "<code>if (Assert.SHOULD_NOT_REACH_HERE_ALWAYS_ENABLED)</code>"</li>
</ul>

<p>The preprocessor does not do anything with the various <code>Assert.always(...)</code> methods. As their name suggests,
these assertions are always enabled and thus should only be used for critical assertions that are not in performance
critical loops. If assertions are enabled, then the preprocessor prepends the file name and line number to the String
constant passed as the first parameter to an assertion.</p>

<p>As can be seen above, there are assertions that cause a fatal VM error which stops the VM
without executing another Java instruction. These type of assertions are used in parts of the
system where throwing an exception may not be possible (e.g. in the garbage collector or in the code
that implements exception throwing). To simplify using these assertions, the preprocessor will transform
any use of a non-fatal assertion into the fatal version if it is preceeded by the following line somewhere
in the input file:</p>

<table border="1" cellspacing="0" cellpadding="5" width="100%" bgcolor="#CCCCCC"><tr><td><pre><code>
/*MAKE_ASSERTIONS_FATAL[true]*/
</code></pre></td></tr></table>

<p>This transformation can be disabled in the obvious way by passing <code>false</code> as the argument to the directive.
By default, this transformation is off.</p>

<h3>4. Constant value substitution.</h3>

<p>Certain components of the Squawk system may be implemented using one of many different algorithms. For example, there
are currently two garbage collector implementations. For these components, it may desirable that the choice of implementation
be statically selectable as is the case with the collector. For this reason, the preprocessor supports substitution
of constant values from via properties. The code below from j2me/src/java/lang/GC.java shows the way this mechanism is
employed to select which collector to use:</p>

<table border="1" cellspacing="0" cellpadding="5" width="100%" bgcolor="#CCCCCC"><tr><td><pre><code>
    /*
     * Allocate the collector object outside the scope of the memory that will be managed by the collector.
     */
    GarbageCollector collector = new /*VAL*/java.lang.CheneyCollector/*GC*/(ramStart, ramEnd, bootstrapSuite);
</code></pre></td></tr></table>

<p>The text between <code>/*VAL*/</code> and <code>/*J2ME.COLLECTOR*/</code> is replaced with the value of the
<code>/*J2ME.COLLECTOR*/</code> property if it exists otherwise no replacements occurs.</p>

<h2>Implementation Limitations</h2>

The Squawk preprocessor is implemented with simple pattern matching as opposed to using a grammar driven parser.
The explains why some of the required syntax may seem a little more restrictive than necessary. It also means that
it may not recognize directives or patterns that one may expect it should. The solution to solving any problems
caused by these limitations is to look at the output from the preprocessor.

</body>

</html>
