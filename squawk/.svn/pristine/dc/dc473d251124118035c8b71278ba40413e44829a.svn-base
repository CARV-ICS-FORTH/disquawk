<html>
<head>
    <title>How to build and run Squawk</title>
    <style type="text/css">
        table.console {
            border: solid 1px;
            padding: 5px;
            width: 100%;
            background-color: #CCCCCC;
        }
    </style>
</head>

<body>

<h1>How to Build and Run Squawk</h1>

<p>
    This version of the Squawk VM is very much a pre-alpha, "work in progress" release
    that is being made available to certain interested parties within Sun Microsystems.
    It contains application programs that we may legally use, but we must not distribute outside Sun.
</p>

<p>
    <b>Therefore please to not give this distribution to anybody else.
       Please refer any interested parties to <a href="mailto:doug.simon@sun.com">doug.simon@sun.com</a>
    or <a href="mailto:cristina.cifuentes@sun.com">cristina.cifuentes@sun.com</a>.
    </b>
 </p>

<p>
    The current version of Squawk uses a temporary core virtual machine called the 'Slow VM'.
    This is an interpreter for the Squawk Java virtual machine. As the name suggests it is
    not optimized for speed and runs at about the same speed as the
    <a href="http://java.sun.com/products/cldc/">CLDC 1.0.4 Reference Implementation</a>
    This is a temporary program written in C that will be replaced once
    the full Squawk architecture is complete. The full Squawk architecture will include
    an interpreter and compiler that are all written in Java and can compile itself in such
    a way that no C code will be required.
</p>

<p>
    The currently supported platforms and their requirements are:
</p>

<p>
    <b>Windows 2000 / XP</b>
    <ul>
        <li>PC computer running Windows 2000 / XP</li>
        <li>Java SDK 1.4.2</li>
        <li>Microsoft Visual C++ 6.0</li>
    </ul>

<p>
    <b>Sparc Solaris</b>
    <ul>
        <li>Solaris 9</li>
        <li>Java SDK 1.4.2</li>
        <li>cc (Sun WorkShop 6 update 2 C 5.3 2001/05/15)</li>
    </ul>

<p>
    <b>Mac OS X</b>
    <ul>
        <li>Mac OS 10.3</li>
        <li>Java SDK 1.4.2</li>
        <li>cc (Sun WorkShop 6 update 2 C 5.3 2001/05/15)</li>
    </ul>

<p>
    <b>Mercury Board</b>
    <ul>
        <li>Debian Linux (Linux 2.4.26-mercury)</li>
        <li>java-ppc-sun-1.4.2</li>
        <li>IBMJava2-ppc-142</li>
        <li>gcc version 3.3.5 (Debian 1:3.3.5-8)</li>
    </ul>

<p>
    The steps outlined in this document use Unix style command lines (e.g. using '<b>/</b>'
    as a path separator) but should be reproducible on the other platforms. There is also a
    chance that these steps may work on Linux/x86/gcc but it has not been tested.
</p>

<h2>1. Build the Java components</h2>

<p>
    This uses the standard Squawk builder to compile all the Java source code using javac
    and to preverify the classes that will be deployed on the Squawk VM. Note that it is important
    that the java executable used below is the one located in the bin directory of the JDK
    installation (as opposed to the executable that is often in a different location if you
    also have the JRE installed on your system).
</p>

<blockquote>
<p>
    <b>Special note for building on the mercury board:</b><br>
It appears that both the Sun and IBM Java implementations must be used in the build process.  The IBM "javac" must be used while all other Java binaries and libraries should use the Sun implementation.  The IBM "javac" also requires an environment variable to be set specifying the type of processor.  After the appropriate changes have been made to ensure the above, the build process procedes as usual.  The following code snippet shows how the particular requirements may be met:
</p>

<table class="console"><tr><td><pre><code>
~/work/Squawk$ export PATH=.:$PATH
~/work/Squawk$ export JITC_PROCESSOR_TYPE=6
~/work/Squawk$ ln -s /usr/local/IBMJava2-ppc-142/bin/javac javac
~/work/Squawk$ ln -s /usr/local/java-ppc-sun-1.4.2/bin/java java
~/work/Squawk$ ln -s /usr/local/java-ppc-sun-1.4.2/bin/jar jar
~/work/Squawk$
</code></pre></td></tr></table>
</p>
</blockquote>


<table class="console"><tr><td><pre><code>
~/work/Squawk$ java -jar build.jar
[building j2me...]
[building compiler...]
[building compilertests...]
[building graphics...]
[building translator...]
[building j2se...]
Note: /Users/dsimon/work/Squawk/j2se/preprocessed/com/sun/squawk/vm/GUIOutputChannel.java uses or overrides a deprecated API.
Note: Recompile with -deprecation for details.
[running squawk.jar...]
[building mapper...]
[building prototypecompiler...]
[building romizer...]
[building samples...]
[building tck...]
[building vmgen...]
~/work/Squawk$
</code></pre></td></tr></table>

<p>
    Note that an alternate debugging version can be built instead using the following command:
</p>

<table class="console"><tr><td><pre><code>
~/work/Squawk$ java -jar build.jar -DTRACING_ENABLED=true -DASSERTIONS_ENABLED=true -DDEBUG_CODE_ENABLED=true
</code></pre></td></tr></table>

<p>
    This will result in a system that is many times slower, but it can be very useful to test the system if the core
    system classes are modified.
</p>

<a name="build-the-rom">
<h2>2. Build the ROM image</h2>

<p>
    Before the Squawk VM can run, an image of the Squawk system classes must be made. A number of different possible
    system images can be made, but the following is the one we use for demonstrations. It will build an image that
    includes the system classes, the bytecode translator, and the graphics library. (Note that the term 'ROM' image
    is used because this is a read-only image of the classes and methods - you do not need any special hardware for this
    procedure.)
</p>

<table class="console"><tr><td><pre><code>
~/work/Squawk$ java -jar build.jar -prod -o2 -mac rom j2me translator graphics
[running rom...]
[running romize...]
excluding: com.sun.squawk.compiler.*
excluding: com.sun.squawk.os.*
excluding: java.lang.BytecodeTracer
excluding: java.lang.Lisp2*
[translating suite squawk ...]
Romizer processed 564 classes and generated these files:
  /Users/dsimon/work/Squawk/squawk.sym
  /Users/dsimon/work/Squawk/squawk.suite
  /Users/dsimon/work/Squawk/squawk_classes.jar
  /Users/dsimon/work/Squawk/slowvm/src/vm/rom.h
  /Users/dsimon/work/Squawk/squawk_rt.jar
[running squawk.jar...]
~/work/Squawk$
</code></pre></td></tr></table>

<h2>3. Configuring the environment for use of the embedded VM</h2>

<p>
    The Squawk system currently starts up an embedded J2SE VM (via the JNI Invocation API) to implement its I/O
    system. For this embedded VM to start properly, an environment variable may need to be set telling Squawk where
    the dynamic or shared libraries implementing the J2SE VM are. Here is the process on a Windows system:
</p>

<table class="console"><tr><td><pre><code>
C:\work\Squawk&gt; java -jar build.jar jvmenv

To configure the environment for Squawk, try the following command:

    set JVMDLL=C:\j2sdk1.4.2_01\jre\bin\server\jvm.dll

C:\work\Squawk&gt;
</code></pre></td></tr></table>

<p>
    Here's the same process on Solaris:
</p>

<table class="console"><tr><td><pre><code>
[pn13]dsimon:/home/dsimon/work/Squawk&gt;java -jar build.jar jvmenv
os=SunOS
java.home=/home/dsimon/j2sdk1.4.2_04
java.vm.version=1.4.2_04-b05
C compiler=cc

To configure the environment for Squawk, try the following command under bash:

    export LD_LIBRARY_PATH=/home/dsimon/j2sdk1.4.2_04/jre/lib/sparc:$LD_LIBRARY_PATH

or in csh/tcsh

    setenv LD_LIBRARY_PATH /home/dsimon/j2sdk1.4.2_04/jre/lib/sparc:$LD_LIBRARY_PATH

[pn13]dsimon:/home/dsimon/work/Squawk&gt;
</code></pre></td></tr></table>

<p>
    And finally on Mac OS X:
</p>

<table class="console"><tr><td><pre><code>
~/work/Squawk$ java -jar build.jar jvmenv
[running jvmenv...]

There is no need to configure the environment for Squawk on Mac OS X as the location of the
JavaVM framework is built into the executable.

~/work/Squawk$
</code></pre></td></tr></table>

<h2>3. Running squawk</h2>

<p>
    Now that the Squawk executable has been built and the relevant environment variable has been
    set, you can run squawk without any arguments to get a usage message:
</p>

<table class="console"><tr><td><pre><code>
~/work/Squawk$ squawk

Copyright (c) Sun Microsystems, Inc.   All  rights  reserved.
Unpublished - rights reserved under the Copyright Laws of the
United States. SUN PROPRIETARY/CONFIDENTIAL.  U.S. Government
Rights - Commercial software. Government users are subject to
the  Sun Microsystems,  Inc.  standard license agreement  and
applicable provisions of the FAR and its supplements.  Use is
subject to license terms. Sun, Sun Microsystems, the Sun logo
and  Java  are  trademarks  or registered  trademarks  of Sun
Microsystems, Inc. in the U.S. and other countries.

Usage: squawk [-options] class [args...]

where options include:
    -cp:&lt;directories and jar/zip files separated by ':' (Unix) or ';' (Windows)&gt;
                            paths where classes, suites and sources can be found
    -suite:&lt;name&gt;           suite name (without &quot;.suite&quot;) to load
    -imageclasses           show the classes in the boot image and exit
    -imagepackages          show the packages in the boot image and exit
    -version                print product version and exit
    -verbose                report when a class is loaded
    -veryverbose            report when a class is initialized or looked up and
                            various other output
    -egc                    enable excessive garbage collection
    -nogc                   disable application calls to Runtime.gc()
    -stats                  display execution statistics before exiting
    -h                      display this help message
    -X                      display help on native VM options


--------------------------------------------------------------------
Hits   -   Class:0.92%  Monitor:0.100%  Exit:0%  New:0.100%
GCs: 0 full, 0 partial
** VM stopped: exit code = 0 **
~/work/Squawk$
</code></pre></td></tr></table>

<p>
    Specifying the -X argument displays a usage message for the arguments that apply to the
    native (i.e. C code) part of the VM:
</p>

<table class="console"><tr><td><pre><code>
~/work/Squawk$ squawk -X
    -Xmx:&lt;size&gt;    set Squawk RAM size (default=8192Kb)
    -Xmxnvm:&lt;size&gt; set Squawk NVM size (default=8192Kb)
    -Xboot:&lt;file&gt;  load bootstrap suite from file (default=squawk.suite)
    -Xtgc:&lt;n&gt;      set GC trace flags where 'n' is the sum of:
                     1: minimal trace info of mem config and GC events
                     2: trace allocations
                     4: detailed trace of garbage collector
                     8: detailed trace of object graph copying
                    16: trace of heap before each GC
                    32: trace of heap after each GC
    -Xtgca:&lt;n&gt;     start GC tracing at the 'n'th collection (default=0)
    -Xnotrap       don't trap VM crashes
    -J&lt;flag&gt;       pass &lt;flag&gt; to the embedded Java VM. Some common usages include:
                       -J-Xdebug -J-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=9999
                                [enables debugging of embedded JVM]
                       -J-Dcio.tracing=true [enables tracing in embedded JVM]
                       -J-Dcio.logging=true [enables logging in embedded JVM]


--------------------------------------------------------------------
Hits   -   Class:0%  Monitor:0%  Exit:0%  New:0%
GCs: 0 full, 0 partial
** VM stopped: exit code = 0 **
~/work/Squawk$
</code></pre></td></tr></table>

<p>
    The options above are the standard ones for a 'production' build. By omitting the <b>-prod</b> option
    when <a href="#build-the-rom">building the ROM image</a>,
    the system will be built with its internal instruction tracing system enabled which may be of
    use when debugging the VM. This enables a few extra native VM options as shown below:
</p>

<table class="console"><tr><td><pre><code>
~/work/Squawk$ squawk -X
    -Xmx:&lt;size&gt;    set Squawk RAM size (default=8192Kb)
    -Xmxnvm:&lt;size&gt; set Squawk NVM size (default=8192Kb)
    -Xboot:&lt;file&gt;  load bootstrap suite from file (default=squawk.suite)
    -Xtgc:&lt;n&gt;      set GC trace flags where 'n' is the sum of:
                     1: minimal trace info of mem config and GC events
                     2: trace allocations
                     4: detailed trace of garbage collector
                     8: detailed trace of object graph copying
                    16: trace of heap before each GC
                    32: trace of heap after each GC
    -Xtgca:&lt;n&gt;     start GC tracing at the 'n'th collection (default=0)
    -Xts:&lt;n&gt;       start tracing after 'n' backward branches
    -Xte:&lt;n&gt;       stop tracing after 'n' backward branches
    -Xtr:&lt;n&gt;       trace 5000 instructions after 'n' backward branches
    -Xtnoservice   do not trace when executing on the service thread
    -Xterr         trace to standard error output stream
    -Xstats:&lt;n&gt;    dump a cache stats every 'n' backward branches
    -Xnotrap       don't trap VM crashes
    -J&lt;flag&gt;       pass &lt;flag&gt; to the embedded Java VM. Some common usages include:
                       -J-Xdebug -J-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=9999
                                [enables debugging of embedded JVM]
                       -J-Dcio.tracing=true [enables tracing in embedded JVM]
                       -J-Dcio.logging=true [enables logging in embedded JVM]


---------------------------------- 0.020 M Branches ----------------------------------
Hits   -   Class:0%  Monitor:0%  Exit:0%  New:0%
Extends: 0 (slots as % of extends = 0.00%)
GCs: 0 full, 0 partial
** VM stopped after 0 branches: exit code = 0 **
~/work/Squawk$
</code></pre></td></tr></table>

<h2>5. Running the demo</h2>

The demo application is comprised of a graphical shell that is used to launch a number of applications.
It can be started as follows:

<table class="console"><tr><td><pre><code>
~/work/Squawk$ squawk -verbose -cp:samples/j2meclasses example.shell.Main
[Loaded example.shell.Main]
[Loaded example.shell.Shell]
[Loaded example.shell.Shell$Registration]
[Loaded example.shell.Shell$MainPanel]
[Loaded example.shell.Shell$IsolateListener]
[Loaded example.shell.RemoteShellDialog]
[Loaded example.shell.Shell$1]
[Loaded example.shell.Shell$2]
</code></pre></td></tr></table>

<p>
    You should see similar output as above on the console as some classes are loaded and then the launcher window will appear:
</p>

<p>
    <img alt="A shell used to lauch applications" src="images/shell.jpg" />
</p>

<p>
    One of the more interesting features of the demo is that the running programs can be saved and restored. This is
    achieved by clicking the right mouse button on a running application. A small confirmation dialog will appear as
    shown below in the example of hibernating a running instance of the <b>cubes</b> application:
</p>

<p>
    <img alt="Confirm the hibernation request" src="images/confirm-hibernation.jpg" />
</p>

<p>
    After pressing <b>Yes</b>, the application is hibernated and it's state is serialized to a file. Once the file is
    saved, a message dialog informs you of the identifier that can be used to restart the hibernated application:
</p>

<p>
    <img alt="A dialog informs you of the hibernated application's identifier" src="images/inform-hibernated-id.jpg" />
</p>

<p>
    To resume the application, press the <b>Restart</b> button in the shell.  Select from the list of available hibernated isolates the isolate to restart.  After pressing <b>OK</b>, the application should resume execution exactly where it left off.
</p>

<p>
    <img alt="A dialog allows you to select a hibernated isolate to restart" src="images/deserialise-list.jpg" />
</p>



<h4>Distributed shell demo</h4>

<p>
    The above demonstration has been extended to show that isolates can be resumed on one machine and restarted on
    another, independent of whether or not the two machines have the same endianess. However, the bootstrap image must
    be exactly the same (modulo endianess) for each instance of the VM. Creating the first bootstrap image involves
    running the romizer twice as follows:
</p>

<table class="console"><tr><td><pre><code>
C:\work\Squawk>java -jar build.jar -nocomp -mac rom j2me graphics samples
[running rom...]
[running romize...]
excluding: com.sun.squawk.compiler.*
excluding: com.sun.squawk.os.*
excluding: java.lang.BytecodeTracer
excluding: java.lang.CheneyCollector*
[translating suite squawk ...]
Romizer processed 662 classes and generated these files:
  C:\work\Squawk\squawk.sym
  C:\work\Squawk\squawk.suite
  C:\work\Squawk\squawk_classes.jar
  C:\work\Squawk\slowvm\src\vm\rom.h
  C:\work\Squawk\squawk_rt.jar
[running squawk.jar...]

C:\work\Squawk>java -jar build.jar -prod -o2 -mac rom squawk_classes.jar
[running rom...]
[running romize...]
excluding: com.sun.squawk.compiler.*
excluding: com.sun.squawk.os.*
excluding: java.lang.BytecodeTracer
excluding: java.lang.CheneyCollector*
[translating suite squawk ...]
warning: existing file 'squawk_classes.jar' not overwritten
Romizer processed 662 classes and generated these files:
  C:\work\Squawk\squawk.sym
  C:\work\Squawk\squawk.suite
  C:\work\Squawk\slowvm\src\vm\rom.h
  C:\work\Squawk\squawk_rt.jar
[compiling 'slowvm\src\vm\squawk.c' ...]
squawk.c
   Creating library squawk.lib and object squawk.exp
[running squawk.jar...]

C:\work\Squawk>
</code></pre></td></tr></table>

<p>
    The first execution of the builder is required to produce the <b><code>squawk_classes.jar</code></b> file. This
    is the collection of classes that will be used to build the bootstrap image on this and every other machine by
    running the second builder command shown above. Unfortunately, this means that <b><code>squawk_classes.jar</code></b>
    must be copied to every machine on which the bootstrap image will be built. However, this extra step circumvents issues
    caused by different versions of <b>javac</b> producing slightly different class files.
</p>

<p>
    To start the distributed demo, the name server must first be started on a chosen machine.
</p>


<table class="console"><tr><td><pre><code>
C:\work\Squawk>squawk example.shell.LookupServer -verbose
[starting shell lookup service on 129.146.72.195]
[listening on port 9999]
</code></pre></td></tr></table>

<p>
    Now some shells can be started on the various machines as shown below:
</p>

<table class="console"><tr><td><pre><code>
C:\work\Squawk>squawk example.shell.Main -verbose -register:129.146.72.195
[Connecting to lookup server socket://129.146.72.195:9999]
[registering with lookup server at socket://129.146.72.195:9999]
[registered with lookup server as 129.146.72.195]
[sending isolate performance metrics to socket://129.146.72.195:9999]
[starting isolate receiver]
[listening for isolates on port 8000]
</code></pre></td></tr></table>

<p>
    Start the <b>manyballs</b> application from one of the shells, add a few more balls by pressing the right arrow key and
    then hibernate it with the right mouse button click. Once the isolate is hibernated, you should get a dialog that lists
    the choice of remote shells to which the hibernated isolate can be sent:
</p>

<p>
    <img alt="Choose a remote shell" src="images/choose-remote-shell.jpg" />
</p>

<p>
    Once you've made a choice and pressed <b>OK</b>, the isolate should be sent to the chosen remote shell and resumed. The
    console output of both the sending and receiving shell will have output correlating to the transmission if the
    <b>-verbose</b> option was provided on the command line. If there are no remote shells available, the hibernated isolate
    will be saved to a file.
</p>


<p>
The name server can also be used to coordinate load balancing amongst the running shells.  In this example we use a load balancer which ensures a fair number of isolates are run on each shell.  At certain intervals, the load balancer is run and isolates are migrated appropriately.
</p>

<table class="console"><tr><td><pre><code>
C:\work\Squawk>squawk example.shell.LookupServer -verbose -loadbalance:Isolate
[starting shell lookup service on 129.146.72.195]
[listening on port 9999]

  ...

[registered '129.146.72.231:8000' at Wed, 06 Apr 2005 16:15:34 PST]
[completed handling request]
[registered '129.146.72.231:8001' at Wed, 06 Apr 2005 16:15:41 PST]
[completed handling request]

  ...

[max = 2 , min = 0]
[migrating 1 isolates]
[Opening connection to socket://129.146.72.231:8000]
[Finished moving 1 isolate(s) from 129.146.72.231:8000 to 129.146.72.231:8001]

  ...

[max = 1 , min = 1]
</code></pre></td></tr></table>

<hr>

<p align="left">
    Doug Simon, March 17, 2005<br>
    Andrew Crouch, April 6, 2005
</p>

<p>
    &nbsp;
</p>

</body>
</html>


