/*
 * Copyright 2000-2008 Sun Microsystems, Inc. All Rights Reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER
 * 
 * This code is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2
 * only, as published by the Free Software Foundation.
 * 
 * This code is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * General Public License version 2 for more details (a copy is
 * included in the LICENSE file that accompanied this code).
 * 
 * You should have received a copy of the GNU General Public License
 * version 2 along with this work; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA
 * 
 * Please contact Sun Microsystems, Inc., 16 Network Circle, Menlo
 * Park, CA 94025 or visit www.sun.com if you need additional
 * information or have any questions.
 */

package com.sun.spot.security.implementation;

import com.sun.spot.security.NoSuchAlgorithmException;


/**
 * The <code>RandomData</code> abstract class is the base class for random
 * number generation. Implementations of <code>RandomData</code> algorithms must
 * extend this class and implement all the abstract methods.
 * <p>
 * <b>Warning</b>: This method is not part of the Security and Trust Services
 * API (SATSA) 1.0 specification.
 */ 
public abstract class SecureRandom {

    /**
     * Utility pseudo-random number generation algorithms. The random number
     * sequence generated by this algorithm need not be the same even if seeded
     * with the same seed data.
     */
    public static final byte ALG_PSEUDO_RANDOM = 1;
    
    /**
     * Cryptographically secure random number generation algorithms.
     */
    public static final byte ALG_SECURE_RANDOM = 2;
    
    /**
     * Protected constructor.
     */ 
    protected SecureRandom() {}

    /**
     * Creates a <code>RandomData</code> instance of the selected algorithm.
     * The pseudo random <code>RandomData</code> instance's seed is initialized
     * to a internal default value.
     * <p>
     * <b>WARNING:</b><br>
     * Right now only the pseudo random number generator is implemented.
     *
     * @param algorithm the desired random number algorithm. Valid codes listed
     *   in <code>ALG_..</code> constants above.
     *
     * @return the <code>RandomData</code> object instance of the requested
     *   algorithm
     *
     * @throws NoSuchAlgorithm if the requested
     *     algorithm is not supported.
     *   </ul>
     */
    public static SecureRandom getInstance(byte algorithm)
            throws  NoSuchAlgorithmException {
	switch (algorithm) {
            case ALG_SECURE_RANDOM:
                // return (new SRand());
            case ALG_PSEUDO_RANDOM:
                return (new PseudoRand());
            default:
                throw new NoSuchAlgorithmException();
	}
    }    

    /**
     * Generates random data.
     * 
     * @param buffer the output buffer
     * @param offset the offset into the output buffer
     * @param length the length of random data to generate 
     */ 
    public abstract void generateData(byte[] buffer, int offset, int length);
    
    public void nextBytes(byte[] buffer, int offset, int length) {
	generateData(buffer, offset, length);
    }
    
    
    
    /**
     * Seeds the random data generator. 
     *
     * @param buffer the input buffer
     * @param offset the offset into the input buffer
     * @param length the length of the seed data
     */ 
    public abstract void setSeed(byte[] buffer, int offset, int length);
}
